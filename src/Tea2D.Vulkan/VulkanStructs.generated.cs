// ============================================================================ 
// This file is generated by Tea2D.Vulkan.Generator tool. 
// ============================================================================ 


using System;
using System.Runtime.InteropServices;

namespace Tea2D.Vulkan
{
    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExtent2D
    {
        public uint Width;
        public uint Height;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExtent3D
    {
        public uint Width;
        public uint Height;
        public uint Depth;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkOffset2D
    {
        public int X;
        public int Y;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkOffset3D
    {
        public int X;
        public int Y;
        public int Z;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRect2D
    {
        public VkOffset2D Offset;
        public VkExtent2D Extent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBaseInStructure
    {
        public VkStructureType SType;
        public unsafe VkBaseInStructure* PNext;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBaseOutStructure
    {
        public VkStructureType SType;
        public unsafe VkBaseOutStructure* PNext;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferMemoryBarrier
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkAccessFlags SrcAccessMask;
        public VkAccessFlags DstAccessMask;
        public uint SrcQueueFamilyIndex;
        public uint DstQueueFamilyIndex;
        public VkBuffer Buffer;
        public ulong Offset;
        public ulong Size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDispatchIndirectCommand
    {
        public uint X;
        public uint Y;
        public uint Z;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDrawIndexedIndirectCommand
    {
        public uint IndexCount;
        public uint InstanceCount;
        public uint FirstIndex;
        public int VertexOffset;
        public uint FirstInstance;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDrawIndirectCommand
    {
        public uint VertexCount;
        public uint InstanceCount;
        public uint FirstVertex;
        public uint FirstInstance;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageSubresourceRange
    {
        public VkImageAspectFlags AspectMask;
        public uint BaseMipLevel;
        public uint LevelCount;
        public uint BaseArrayLayer;
        public uint LayerCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageMemoryBarrier
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkAccessFlags SrcAccessMask;
        public VkAccessFlags DstAccessMask;
        public VkImageLayout OldLayout;
        public VkImageLayout NewLayout;
        public uint SrcQueueFamilyIndex;
        public uint DstQueueFamilyIndex;
        public VkImage Image;
        public VkImageSubresourceRange SubresourceRange;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryBarrier
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkAccessFlags SrcAccessMask;
        public VkAccessFlags DstAccessMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineCacheHeaderVersionOne
    {
        public uint HeaderSize;
        public VkPipelineCacheHeaderVersion HeaderVersion;
        public uint VendorID;
        public uint DeviceID;
        public unsafe fixed byte PipelineCacheUUID[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAllocationCallbacks
    {
        public unsafe void* PUserData;
        public unsafe delegate* unmanaged<void*, nuint, nuint, VkSystemAllocationScope, void*> PfnAllocation;
        public unsafe delegate* unmanaged<void*, void*, nuint, nuint, VkSystemAllocationScope, void*> PfnReallocation;
        public unsafe delegate* unmanaged<void*, void*, void> PfnFree;
        public unsafe delegate* unmanaged<void*, nuint, VkInternalAllocationType, VkSystemAllocationScope, void> PfnInternalAllocation;
        public unsafe delegate* unmanaged<void*, nuint, VkInternalAllocationType, VkSystemAllocationScope, void> PfnInternalFree;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkApplicationInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public unsafe byte* PApplicationName;
        public uint ApplicationVersion;
        public unsafe byte* PEngineName;
        public uint EngineVersion;
        public uint ApiVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFormatProperties
    {
        public VkFormatFeatureFlags LinearTilingFeatures;
        public VkFormatFeatureFlags OptimalTilingFeatures;
        public VkFormatFeatureFlags BufferFeatures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageFormatProperties
    {
        public VkExtent3D MaxExtent;
        public uint MaxMipLevels;
        public uint MaxArrayLayers;
        public VkSampleCountFlags SampleCounts;
        public ulong MaxResourceSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkInstanceCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkInstanceCreateFlags Flags;
        public unsafe VkApplicationInfo* PApplicationInfo;
        public uint EnabledLayerCount;
        public unsafe byte** PpEnabledLayerNames;
        public uint EnabledExtensionCount;
        public unsafe byte** PpEnabledExtensionNames;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryHeap
    {
        public ulong Size;
        public VkMemoryHeapFlags Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryType
    {
        public VkMemoryPropertyFlags PropertyFlags;
        public uint HeapIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFeatures
    {
        public uint RobustBufferAccess;
        public uint FullDrawIndexUint32;
        public uint ImageCubeArray;
        public uint IndependentBlend;
        public uint GeometryShader;
        public uint TessellationShader;
        public uint SampleRateShading;
        public uint DualSrcBlend;
        public uint LogicOp;
        public uint MultiDrawIndirect;
        public uint DrawIndirectFirstInstance;
        public uint DepthClamp;
        public uint DepthBiasClamp;
        public uint FillModeNonSolid;
        public uint DepthBounds;
        public uint WideLines;
        public uint LargePoints;
        public uint AlphaToOne;
        public uint MultiViewport;
        public uint SamplerAnisotropy;
        public uint TextureCompressionETC2;
        public uint TextureCompressionASTC_LDR;
        public uint TextureCompressionBC;
        public uint OcclusionQueryPrecise;
        public uint PipelineStatisticsQuery;
        public uint VertexPipelineStoresAndAtomics;
        public uint FragmentStoresAndAtomics;
        public uint ShaderTessellationAndGeometryPointSize;
        public uint ShaderImageGatherExtended;
        public uint ShaderStorageImageExtendedFormats;
        public uint ShaderStorageImageMultisample;
        public uint ShaderStorageImageReadWithoutFormat;
        public uint ShaderStorageImageWriteWithoutFormat;
        public uint ShaderUniformBufferArrayDynamicIndexing;
        public uint ShaderSampledImageArrayDynamicIndexing;
        public uint ShaderStorageBufferArrayDynamicIndexing;
        public uint ShaderStorageImageArrayDynamicIndexing;
        public uint ShaderClipDistance;
        public uint ShaderCullDistance;
        public uint ShaderFloat64;
        public uint ShaderInt64;
        public uint ShaderInt16;
        public uint ShaderResourceResidency;
        public uint ShaderResourceMinLod;
        public uint SparseBinding;
        public uint SparseResidencyBuffer;
        public uint SparseResidencyImage2D;
        public uint SparseResidencyImage3D;
        public uint SparseResidency2Samples;
        public uint SparseResidency4Samples;
        public uint SparseResidency8Samples;
        public uint SparseResidency16Samples;
        public uint SparseResidencyAliased;
        public uint VariableMultisampleRate;
        public uint InheritedQueries;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceLimits
    {
        public uint MaxImageDimension1D;
        public uint MaxImageDimension2D;
        public uint MaxImageDimension3D;
        public uint MaxImageDimensionCube;
        public uint MaxImageArrayLayers;
        public uint MaxTexelBufferElements;
        public uint MaxUniformBufferRange;
        public uint MaxStorageBufferRange;
        public uint MaxPushConstantsSize;
        public uint MaxMemoryAllocationCount;
        public uint MaxSamplerAllocationCount;
        public ulong BufferImageGranularity;
        public ulong SparseAddressSpaceSize;
        public uint MaxBoundDescriptorSets;
        public uint MaxPerStageDescriptorSamplers;
        public uint MaxPerStageDescriptorUniformBuffers;
        public uint MaxPerStageDescriptorStorageBuffers;
        public uint MaxPerStageDescriptorSampledImages;
        public uint MaxPerStageDescriptorStorageImages;
        public uint MaxPerStageDescriptorInputAttachments;
        public uint MaxPerStageResources;
        public uint MaxDescriptorSetSamplers;
        public uint MaxDescriptorSetUniformBuffers;
        public uint MaxDescriptorSetUniformBuffersDynamic;
        public uint MaxDescriptorSetStorageBuffers;
        public uint MaxDescriptorSetStorageBuffersDynamic;
        public uint MaxDescriptorSetSampledImages;
        public uint MaxDescriptorSetStorageImages;
        public uint MaxDescriptorSetInputAttachments;
        public uint MaxVertexInputAttributes;
        public uint MaxVertexInputBindings;
        public uint MaxVertexInputAttributeOffset;
        public uint MaxVertexInputBindingStride;
        public uint MaxVertexOutputComponents;
        public uint MaxTessellationGenerationLevel;
        public uint MaxTessellationPatchSize;
        public uint MaxTessellationControlPerVertexInputComponents;
        public uint MaxTessellationControlPerVertexOutputComponents;
        public uint MaxTessellationControlPerPatchOutputComponents;
        public uint MaxTessellationControlTotalOutputComponents;
        public uint MaxTessellationEvaluationInputComponents;
        public uint MaxTessellationEvaluationOutputComponents;
        public uint MaxGeometryShaderInvocations;
        public uint MaxGeometryInputComponents;
        public uint MaxGeometryOutputComponents;
        public uint MaxGeometryOutputVertices;
        public uint MaxGeometryTotalOutputComponents;
        public uint MaxFragmentInputComponents;
        public uint MaxFragmentOutputAttachments;
        public uint MaxFragmentDualSrcAttachments;
        public uint MaxFragmentCombinedOutputResources;
        public uint MaxComputeSharedMemorySize;
        public unsafe fixed uint MaxComputeWorkGroupCount[3];
        public uint MaxComputeWorkGroupInvocations;
        public unsafe fixed uint MaxComputeWorkGroupSize[3];
        public uint SubPixelPrecisionBits;
        public uint SubTexelPrecisionBits;
        public uint MipmapPrecisionBits;
        public uint MaxDrawIndexedIndexValue;
        public uint MaxDrawIndirectCount;
        public float MaxSamplerLodBias;
        public float MaxSamplerAnisotropy;
        public uint MaxViewports;
        public unsafe fixed uint MaxViewportDimensions[2];
        public unsafe fixed float ViewportBoundsRange[2];
        public uint ViewportSubPixelBits;
        public nuint MinMemoryMapAlignment;
        public ulong MinTexelBufferOffsetAlignment;
        public ulong MinUniformBufferOffsetAlignment;
        public ulong MinStorageBufferOffsetAlignment;
        public int MinTexelOffset;
        public uint MaxTexelOffset;
        public int MinTexelGatherOffset;
        public uint MaxTexelGatherOffset;
        public float MinInterpolationOffset;
        public float MaxInterpolationOffset;
        public uint SubPixelInterpolationOffsetBits;
        public uint MaxFramebufferWidth;
        public uint MaxFramebufferHeight;
        public uint MaxFramebufferLayers;
        public VkSampleCountFlags FramebufferColorSampleCounts;
        public VkSampleCountFlags FramebufferDepthSampleCounts;
        public VkSampleCountFlags FramebufferStencilSampleCounts;
        public VkSampleCountFlags FramebufferNoAttachmentsSampleCounts;
        public uint MaxColorAttachments;
        public VkSampleCountFlags SampledImageColorSampleCounts;
        public VkSampleCountFlags SampledImageIntegerSampleCounts;
        public VkSampleCountFlags SampledImageDepthSampleCounts;
        public VkSampleCountFlags SampledImageStencilSampleCounts;
        public VkSampleCountFlags StorageImageSampleCounts;
        public uint MaxSampleMaskWords;
        public uint TimestampComputeAndGraphics;
        public float TimestampPeriod;
        public uint MaxClipDistances;
        public uint MaxCullDistances;
        public uint MaxCombinedClipAndCullDistances;
        public uint DiscreteQueuePriorities;
        public unsafe fixed float PointSizeRange[2];
        public unsafe fixed float LineWidthRange[2];
        public float PointSizeGranularity;
        public float LineWidthGranularity;
        public uint StrictLines;
        public uint StandardSampleLocations;
        public ulong OptimalBufferCopyOffsetAlignment;
        public ulong OptimalBufferCopyRowPitchAlignment;
        public ulong NonCoherentAtomSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMemoryProperties
    {
        public uint MemoryTypeCount;
        public VkMemoryType MemoryTypes_0;
        public VkMemoryType MemoryTypes_1;
        public VkMemoryType MemoryTypes_2;
        public VkMemoryType MemoryTypes_3;
        public VkMemoryType MemoryTypes_4;
        public VkMemoryType MemoryTypes_5;
        public VkMemoryType MemoryTypes_6;
        public VkMemoryType MemoryTypes_7;
        public VkMemoryType MemoryTypes_8;
        public VkMemoryType MemoryTypes_9;
        public VkMemoryType MemoryTypes_10;
        public VkMemoryType MemoryTypes_11;
        public VkMemoryType MemoryTypes_12;
        public VkMemoryType MemoryTypes_13;
        public VkMemoryType MemoryTypes_14;
        public VkMemoryType MemoryTypes_15;
        public VkMemoryType MemoryTypes_16;
        public VkMemoryType MemoryTypes_17;
        public VkMemoryType MemoryTypes_18;
        public VkMemoryType MemoryTypes_19;
        public VkMemoryType MemoryTypes_20;
        public VkMemoryType MemoryTypes_21;
        public VkMemoryType MemoryTypes_22;
        public VkMemoryType MemoryTypes_23;
        public VkMemoryType MemoryTypes_24;
        public VkMemoryType MemoryTypes_25;
        public VkMemoryType MemoryTypes_26;
        public VkMemoryType MemoryTypes_27;
        public VkMemoryType MemoryTypes_28;
        public VkMemoryType MemoryTypes_29;
        public VkMemoryType MemoryTypes_30;
        public VkMemoryType MemoryTypes_31;
        public uint MemoryHeapCount;
        public VkMemoryHeap MemoryHeaps_0;
        public VkMemoryHeap MemoryHeaps_1;
        public VkMemoryHeap MemoryHeaps_2;
        public VkMemoryHeap MemoryHeaps_3;
        public VkMemoryHeap MemoryHeaps_4;
        public VkMemoryHeap MemoryHeaps_5;
        public VkMemoryHeap MemoryHeaps_6;
        public VkMemoryHeap MemoryHeaps_7;
        public VkMemoryHeap MemoryHeaps_8;
        public VkMemoryHeap MemoryHeaps_9;
        public VkMemoryHeap MemoryHeaps_10;
        public VkMemoryHeap MemoryHeaps_11;
        public VkMemoryHeap MemoryHeaps_12;
        public VkMemoryHeap MemoryHeaps_13;
        public VkMemoryHeap MemoryHeaps_14;
        public VkMemoryHeap MemoryHeaps_15;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSparseProperties
    {
        public uint ResidencyStandard2DBlockShape;
        public uint ResidencyStandard2DMultisampleBlockShape;
        public uint ResidencyStandard3DBlockShape;
        public uint ResidencyAlignedMipSize;
        public uint ResidencyNonResidentStrict;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceProperties
    {
        public uint ApiVersion;
        public uint DriverVersion;
        public uint VendorID;
        public uint DeviceID;
        public VkPhysicalDeviceType DeviceType;
        public unsafe fixed byte DeviceName[256];
        public unsafe fixed byte PipelineCacheUUID[16];
        public VkPhysicalDeviceLimits Limits;
        public VkPhysicalDeviceSparseProperties SparseProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkQueueFamilyProperties
    {
        public VkQueueFlags QueueFlags;
        public uint QueueCount;
        public uint TimestampValidBits;
        public VkExtent3D MinImageTransferGranularity;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceQueueCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDeviceQueueCreateFlags Flags;
        public uint QueueFamilyIndex;
        public uint QueueCount;
        public unsafe float* PQueuePriorities;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDeviceCreateFlags Flags;
        public uint QueueCreateInfoCount;
        public unsafe VkDeviceQueueCreateInfo* PQueueCreateInfos;
        public uint EnabledLayerCount;
        public unsafe byte** PpEnabledLayerNames;
        public uint EnabledExtensionCount;
        public unsafe byte** PpEnabledExtensionNames;
        public unsafe VkPhysicalDeviceFeatures* PEnabledFeatures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExtensionProperties
    {
        public unsafe fixed byte ExtensionName[256];
        public uint SpecVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkLayerProperties
    {
        public unsafe fixed byte LayerName[256];
        public uint SpecVersion;
        public uint ImplementationVersion;
        public unsafe fixed byte Description[256];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubmitInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint WaitSemaphoreCount;
        public unsafe VkSemaphore* PWaitSemaphores;
        public unsafe VkPipelineStageFlags* PWaitDstStageMask;
        public uint CommandBufferCount;
        public unsafe VkCommandBuffer* PCommandBuffers;
        public uint SignalSemaphoreCount;
        public unsafe VkSemaphore* PSignalSemaphores;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMappedMemoryRange
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDeviceMemory Memory;
        public ulong Offset;
        public ulong Size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryAllocateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong AllocationSize;
        public uint MemoryTypeIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryRequirements
    {
        public ulong Size;
        public ulong Alignment;
        public uint MemoryTypeBits;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseMemoryBind
    {
        public ulong ResourceOffset;
        public ulong Size;
        public VkDeviceMemory Memory;
        public ulong MemoryOffset;
        public VkSparseMemoryBindFlags Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseBufferMemoryBindInfo
    {
        public VkBuffer Buffer;
        public uint BindCount;
        public unsafe VkSparseMemoryBind* PBinds;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseImageOpaqueMemoryBindInfo
    {
        public VkImage Image;
        public uint BindCount;
        public unsafe VkSparseMemoryBind* PBinds;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageSubresource
    {
        public VkImageAspectFlags AspectMask;
        public uint MipLevel;
        public uint ArrayLayer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseImageMemoryBind
    {
        public VkImageSubresource Subresource;
        public VkOffset3D Offset;
        public VkExtent3D Extent;
        public VkDeviceMemory Memory;
        public ulong MemoryOffset;
        public VkSparseMemoryBindFlags Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseImageMemoryBindInfo
    {
        public VkImage Image;
        public uint BindCount;
        public unsafe VkSparseImageMemoryBind* PBinds;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindSparseInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint WaitSemaphoreCount;
        public unsafe VkSemaphore* PWaitSemaphores;
        public uint BufferBindCount;
        public unsafe VkSparseBufferMemoryBindInfo* PBufferBinds;
        public uint ImageOpaqueBindCount;
        public unsafe VkSparseImageOpaqueMemoryBindInfo* PImageOpaqueBinds;
        public uint ImageBindCount;
        public unsafe VkSparseImageMemoryBindInfo* PImageBinds;
        public uint SignalSemaphoreCount;
        public unsafe VkSemaphore* PSignalSemaphores;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseImageFormatProperties
    {
        public VkImageAspectFlags AspectMask;
        public VkExtent3D ImageGranularity;
        public VkSparseImageFormatFlags Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseImageMemoryRequirements
    {
        public VkSparseImageFormatProperties FormatProperties;
        public uint ImageMipTailFirstLod;
        public ulong ImageMipTailSize;
        public ulong ImageMipTailOffset;
        public ulong ImageMipTailStride;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFenceCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkFenceCreateFlags Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSemaphoreCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSemaphoreCreateFlags Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkEventCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkEventCreateFlags Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkQueryPoolCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkQueryPoolCreateFlags Flags;
        public VkQueryType QueryType;
        public uint QueryCount;
        public VkQueryPipelineStatisticFlags PipelineStatistics;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkBufferCreateFlags Flags;
        public ulong Size;
        public VkBufferUsageFlags Usage;
        public VkSharingMode SharingMode;
        public uint QueueFamilyIndexCount;
        public unsafe uint* PQueueFamilyIndices;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferViewCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkBufferViewCreateFlags Flags;
        public VkBuffer Buffer;
        public VkFormat Format;
        public ulong Offset;
        public ulong Range;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageCreateFlags Flags;
        public VkImageType ImageType;
        public VkFormat Format;
        public VkExtent3D Extent;
        public uint MipLevels;
        public uint ArrayLayers;
        public VkSampleCountFlagBits Samples;
        public VkImageTiling Tiling;
        public VkImageUsageFlags Usage;
        public VkSharingMode SharingMode;
        public uint QueueFamilyIndexCount;
        public unsafe uint* PQueueFamilyIndices;
        public VkImageLayout InitialLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubresourceLayout
    {
        public ulong Offset;
        public ulong Size;
        public ulong RowPitch;
        public ulong ArrayPitch;
        public ulong DepthPitch;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkComponentMapping
    {
        public VkComponentSwizzle R;
        public VkComponentSwizzle G;
        public VkComponentSwizzle B;
        public VkComponentSwizzle A;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageViewCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageViewCreateFlags Flags;
        public VkImage Image;
        public VkImageViewType ViewType;
        public VkFormat Format;
        public VkComponentMapping Components;
        public VkImageSubresourceRange SubresourceRange;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkShaderModuleCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkShaderModuleCreateFlags Flags;
        public nuint CodeSize;
        public unsafe uint* PCode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineCacheCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineCacheCreateFlags Flags;
        public nuint InitialDataSize;
        public unsafe void* PInitialData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSpecializationMapEntry
    {
        public uint ConstantID;
        public uint Offset;
        public nuint Size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSpecializationInfo
    {
        public uint MapEntryCount;
        public unsafe VkSpecializationMapEntry* PMapEntries;
        public nuint DataSize;
        public unsafe void* PData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineShaderStageCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineShaderStageCreateFlags Flags;
        public VkShaderStageFlagBits Stage;
        public VkShaderModule Module;
        public unsafe byte* PName;
        public unsafe VkSpecializationInfo* PSpecializationInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkComputePipelineCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineCreateFlags Flags;
        public VkPipelineShaderStageCreateInfo Stage;
        public VkPipelineLayout Layout;
        public VkPipeline BasePipelineHandle;
        public int BasePipelineIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkVertexInputBindingDescription
    {
        public uint Binding;
        public uint Stride;
        public VkVertexInputRate InputRate;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkVertexInputAttributeDescription
    {
        public uint Location;
        public uint Binding;
        public VkFormat Format;
        public uint Offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineVertexInputStateCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineVertexInputStateCreateFlags Flags;
        public uint VertexBindingDescriptionCount;
        public unsafe VkVertexInputBindingDescription* PVertexBindingDescriptions;
        public uint VertexAttributeDescriptionCount;
        public unsafe VkVertexInputAttributeDescription* PVertexAttributeDescriptions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineInputAssemblyStateCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineInputAssemblyStateCreateFlags Flags;
        public VkPrimitiveTopology Topology;
        public uint PrimitiveRestartEnable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineTessellationStateCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineTessellationStateCreateFlags Flags;
        public uint PatchControlPoints;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkViewport
    {
        public float X;
        public float Y;
        public float Width;
        public float Height;
        public float MinDepth;
        public float MaxDepth;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineViewportStateCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineViewportStateCreateFlags Flags;
        public uint ViewportCount;
        public unsafe VkViewport* PViewports;
        public uint ScissorCount;
        public unsafe VkRect2D* PScissors;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRasterizationStateCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineRasterizationStateCreateFlags Flags;
        public uint DepthClampEnable;
        public uint RasterizerDiscardEnable;
        public VkPolygonMode PolygonMode;
        public VkCullModeFlags CullMode;
        public VkFrontFace FrontFace;
        public uint DepthBiasEnable;
        public float DepthBiasConstantFactor;
        public float DepthBiasClamp;
        public float DepthBiasSlopeFactor;
        public float LineWidth;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineMultisampleStateCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineMultisampleStateCreateFlags Flags;
        public VkSampleCountFlagBits RasterizationSamples;
        public uint SampleShadingEnable;
        public float MinSampleShading;
        public unsafe uint* PSampleMask;
        public uint AlphaToCoverageEnable;
        public uint AlphaToOneEnable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkStencilOpState
    {
        public VkStencilOp FailOp;
        public VkStencilOp PassOp;
        public VkStencilOp DepthFailOp;
        public VkCompareOp CompareOp;
        public uint CompareMask;
        public uint WriteMask;
        public uint Reference;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineDepthStencilStateCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineDepthStencilStateCreateFlags Flags;
        public uint DepthTestEnable;
        public uint DepthWriteEnable;
        public VkCompareOp DepthCompareOp;
        public uint DepthBoundsTestEnable;
        public uint StencilTestEnable;
        public VkStencilOpState Front;
        public VkStencilOpState Back;
        public float MinDepthBounds;
        public float MaxDepthBounds;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineColorBlendAttachmentState
    {
        public uint BlendEnable;
        public VkBlendFactor SrcColorBlendFactor;
        public VkBlendFactor DstColorBlendFactor;
        public VkBlendOp ColorBlendOp;
        public VkBlendFactor SrcAlphaBlendFactor;
        public VkBlendFactor DstAlphaBlendFactor;
        public VkBlendOp AlphaBlendOp;
        public VkColorComponentFlags ColorWriteMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineColorBlendStateCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineColorBlendStateCreateFlags Flags;
        public uint LogicOpEnable;
        public VkLogicOp LogicOp;
        public uint AttachmentCount;
        public unsafe VkPipelineColorBlendAttachmentState* PAttachments;
        public unsafe fixed float BlendConstants[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineDynamicStateCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineDynamicStateCreateFlags Flags;
        public uint DynamicStateCount;
        public unsafe VkDynamicState* PDynamicStates;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGraphicsPipelineCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineCreateFlags Flags;
        public uint StageCount;
        public unsafe VkPipelineShaderStageCreateInfo* PStages;
        public unsafe VkPipelineVertexInputStateCreateInfo* PVertexInputState;
        public unsafe VkPipelineInputAssemblyStateCreateInfo* PInputAssemblyState;
        public unsafe VkPipelineTessellationStateCreateInfo* PTessellationState;
        public unsafe VkPipelineViewportStateCreateInfo* PViewportState;
        public unsafe VkPipelineRasterizationStateCreateInfo* PRasterizationState;
        public unsafe VkPipelineMultisampleStateCreateInfo* PMultisampleState;
        public unsafe VkPipelineDepthStencilStateCreateInfo* PDepthStencilState;
        public unsafe VkPipelineColorBlendStateCreateInfo* PColorBlendState;
        public unsafe VkPipelineDynamicStateCreateInfo* PDynamicState;
        public VkPipelineLayout Layout;
        public VkRenderPass RenderPass;
        public uint Subpass;
        public VkPipeline BasePipelineHandle;
        public int BasePipelineIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPushConstantRange
    {
        public VkShaderStageFlags StageFlags;
        public uint Offset;
        public uint Size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineLayoutCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineLayoutCreateFlags Flags;
        public uint SetLayoutCount;
        public unsafe VkDescriptorSetLayout* PSetLayouts;
        public uint PushConstantRangeCount;
        public unsafe VkPushConstantRange* PPushConstantRanges;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSamplerCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSamplerCreateFlags Flags;
        public VkFilter MagFilter;
        public VkFilter MinFilter;
        public VkSamplerMipmapMode MipmapMode;
        public VkSamplerAddressMode AddressModeU;
        public VkSamplerAddressMode AddressModeV;
        public VkSamplerAddressMode AddressModeW;
        public float MipLodBias;
        public uint AnisotropyEnable;
        public float MaxAnisotropy;
        public uint CompareEnable;
        public VkCompareOp CompareOp;
        public float MinLod;
        public float MaxLod;
        public VkBorderColor BorderColor;
        public uint UnnormalizedCoordinates;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyDescriptorSet
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDescriptorSet SrcSet;
        public uint SrcBinding;
        public uint SrcArrayElement;
        public VkDescriptorSet DstSet;
        public uint DstBinding;
        public uint DstArrayElement;
        public uint DescriptorCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorBufferInfo
    {
        public VkBuffer Buffer;
        public ulong Offset;
        public ulong Range;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorImageInfo
    {
        public VkSampler Sampler;
        public VkImageView ImageView;
        public VkImageLayout ImageLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorPoolSize
    {
        public VkDescriptorType Type;
        public uint DescriptorCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorPoolCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDescriptorPoolCreateFlags Flags;
        public uint MaxSets;
        public uint PoolSizeCount;
        public unsafe VkDescriptorPoolSize* PPoolSizes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorSetAllocateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDescriptorPool DescriptorPool;
        public uint DescriptorSetCount;
        public unsafe VkDescriptorSetLayout* PSetLayouts;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorSetLayoutBinding
    {
        public uint Binding;
        public VkDescriptorType DescriptorType;
        public uint DescriptorCount;
        public VkShaderStageFlags StageFlags;
        public unsafe VkSampler* PImmutableSamplers;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorSetLayoutCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDescriptorSetLayoutCreateFlags Flags;
        public uint BindingCount;
        public unsafe VkDescriptorSetLayoutBinding* PBindings;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkWriteDescriptorSet
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDescriptorSet DstSet;
        public uint DstBinding;
        public uint DstArrayElement;
        public uint DescriptorCount;
        public VkDescriptorType DescriptorType;
        public unsafe VkDescriptorImageInfo* PImageInfo;
        public unsafe VkDescriptorBufferInfo* PBufferInfo;
        public unsafe VkBufferView* PTexelBufferView;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAttachmentDescription
    {
        public VkAttachmentDescriptionFlags Flags;
        public VkFormat Format;
        public VkSampleCountFlagBits Samples;
        public VkAttachmentLoadOp LoadOp;
        public VkAttachmentStoreOp StoreOp;
        public VkAttachmentLoadOp StencilLoadOp;
        public VkAttachmentStoreOp StencilStoreOp;
        public VkImageLayout InitialLayout;
        public VkImageLayout FinalLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAttachmentReference
    {
        public uint Attachment;
        public VkImageLayout Layout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFramebufferCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkFramebufferCreateFlags Flags;
        public VkRenderPass RenderPass;
        public uint AttachmentCount;
        public unsafe VkImageView* PAttachments;
        public uint Width;
        public uint Height;
        public uint Layers;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassDescription
    {
        public VkSubpassDescriptionFlags Flags;
        public VkPipelineBindPoint PipelineBindPoint;
        public uint InputAttachmentCount;
        public unsafe VkAttachmentReference* PInputAttachments;
        public uint ColorAttachmentCount;
        public unsafe VkAttachmentReference* PColorAttachments;
        public unsafe VkAttachmentReference* PResolveAttachments;
        public unsafe VkAttachmentReference* PDepthStencilAttachment;
        public uint PreserveAttachmentCount;
        public unsafe uint* PPreserveAttachments;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassDependency
    {
        public uint SrcSubpass;
        public uint DstSubpass;
        public VkPipelineStageFlags SrcStageMask;
        public VkPipelineStageFlags DstStageMask;
        public VkAccessFlags SrcAccessMask;
        public VkAccessFlags DstAccessMask;
        public VkDependencyFlags DependencyFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkRenderPassCreateFlags Flags;
        public uint AttachmentCount;
        public unsafe VkAttachmentDescription* PAttachments;
        public uint SubpassCount;
        public unsafe VkSubpassDescription* PSubpasses;
        public uint DependencyCount;
        public unsafe VkSubpassDependency* PDependencies;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandPoolCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkCommandPoolCreateFlags Flags;
        public uint QueueFamilyIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandBufferAllocateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkCommandPool CommandPool;
        public VkCommandBufferLevel Level;
        public uint CommandBufferCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandBufferInheritanceInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkRenderPass RenderPass;
        public uint Subpass;
        public VkFramebuffer Framebuffer;
        public uint OcclusionQueryEnable;
        public VkQueryControlFlags QueryFlags;
        public VkQueryPipelineStatisticFlags PipelineStatistics;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandBufferBeginInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkCommandBufferUsageFlags Flags;
        public unsafe VkCommandBufferInheritanceInfo* PInheritanceInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferCopy
    {
        public ulong SrcOffset;
        public ulong DstOffset;
        public ulong Size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageSubresourceLayers
    {
        public VkImageAspectFlags AspectMask;
        public uint MipLevel;
        public uint BaseArrayLayer;
        public uint LayerCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferImageCopy
    {
        public ulong BufferOffset;
        public uint BufferRowLength;
        public uint BufferImageHeight;
        public VkImageSubresourceLayers ImageSubresource;
        public VkOffset3D ImageOffset;
        public VkExtent3D ImageExtent;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkClearColorValue
    {
        [FieldOffset(0)]
        public unsafe fixed float Float32[4];
        [FieldOffset(0)]
        public unsafe fixed int Int32[4];
        [FieldOffset(0)]
        public unsafe fixed uint Uint32[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkClearDepthStencilValue
    {
        public float Depth;
        public uint Stencil;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkClearValue
    {
        [FieldOffset(0)]
        public VkClearColorValue Color;
        [FieldOffset(0)]
        public VkClearDepthStencilValue DepthStencil;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkClearAttachment
    {
        public VkImageAspectFlags AspectMask;
        public uint ColorAttachment;
        public VkClearValue ClearValue;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkClearRect
    {
        public VkRect2D Rect;
        public uint BaseArrayLayer;
        public uint LayerCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageBlit
    {
        public VkImageSubresourceLayers SrcSubresource;
        public VkOffset3D SrcOffsets_0;
        public VkOffset3D SrcOffsets_1;
        public VkImageSubresourceLayers DstSubresource;
        public VkOffset3D DstOffsets_0;
        public VkOffset3D DstOffsets_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageCopy
    {
        public VkImageSubresourceLayers SrcSubresource;
        public VkOffset3D SrcOffset;
        public VkImageSubresourceLayers DstSubresource;
        public VkOffset3D DstOffset;
        public VkExtent3D Extent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageResolve
    {
        public VkImageSubresourceLayers SrcSubresource;
        public VkOffset3D SrcOffset;
        public VkImageSubresourceLayers DstSubresource;
        public VkOffset3D DstOffset;
        public VkExtent3D Extent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassBeginInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkRenderPass RenderPass;
        public VkFramebuffer Framebuffer;
        public VkRect2D RenderArea;
        public uint ClearValueCount;
        public unsafe VkClearValue* PClearValues;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSubgroupProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SubgroupSize;
        public VkShaderStageFlags SupportedStages;
        public VkSubgroupFeatureFlags SupportedOperations;
        public uint QuadOperationsInAllStages;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindBufferMemoryInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkBuffer Buffer;
        public VkDeviceMemory Memory;
        public ulong MemoryOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindImageMemoryInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImage Image;
        public VkDeviceMemory Memory;
        public ulong MemoryOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevice16BitStorageFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint StorageBuffer16BitAccess;
        public uint UniformAndStorageBuffer16BitAccess;
        public uint StoragePushConstant16;
        public uint StorageInputOutput16;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryDedicatedRequirements
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PrefersDedicatedAllocation;
        public uint RequiresDedicatedAllocation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryDedicatedAllocateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImage Image;
        public VkBuffer Buffer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryAllocateFlagsInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkMemoryAllocateFlags Flags;
        public uint DeviceMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceGroupRenderPassBeginInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DeviceMask;
        public uint DeviceRenderAreaCount;
        public unsafe VkRect2D* PDeviceRenderAreas;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceGroupCommandBufferBeginInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DeviceMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceGroupSubmitInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint WaitSemaphoreCount;
        public unsafe uint* PWaitSemaphoreDeviceIndices;
        public uint CommandBufferCount;
        public unsafe uint* PCommandBufferDeviceMasks;
        public uint SignalSemaphoreCount;
        public unsafe uint* PSignalSemaphoreDeviceIndices;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceGroupBindSparseInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ResourceDeviceIndex;
        public uint MemoryDeviceIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindBufferMemoryDeviceGroupInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DeviceIndexCount;
        public unsafe uint* PDeviceIndices;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindImageMemoryDeviceGroupInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DeviceIndexCount;
        public unsafe uint* PDeviceIndices;
        public uint SplitInstanceBindRegionCount;
        public unsafe VkRect2D* PSplitInstanceBindRegions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceGroupProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PhysicalDeviceCount;
        public VkPhysicalDevice PhysicalDevices_0;
        public VkPhysicalDevice PhysicalDevices_1;
        public VkPhysicalDevice PhysicalDevices_2;
        public VkPhysicalDevice PhysicalDevices_3;
        public VkPhysicalDevice PhysicalDevices_4;
        public VkPhysicalDevice PhysicalDevices_5;
        public VkPhysicalDevice PhysicalDevices_6;
        public VkPhysicalDevice PhysicalDevices_7;
        public VkPhysicalDevice PhysicalDevices_8;
        public VkPhysicalDevice PhysicalDevices_9;
        public VkPhysicalDevice PhysicalDevices_10;
        public VkPhysicalDevice PhysicalDevices_11;
        public VkPhysicalDevice PhysicalDevices_12;
        public VkPhysicalDevice PhysicalDevices_13;
        public VkPhysicalDevice PhysicalDevices_14;
        public VkPhysicalDevice PhysicalDevices_15;
        public VkPhysicalDevice PhysicalDevices_16;
        public VkPhysicalDevice PhysicalDevices_17;
        public VkPhysicalDevice PhysicalDevices_18;
        public VkPhysicalDevice PhysicalDevices_19;
        public VkPhysicalDevice PhysicalDevices_20;
        public VkPhysicalDevice PhysicalDevices_21;
        public VkPhysicalDevice PhysicalDevices_22;
        public VkPhysicalDevice PhysicalDevices_23;
        public VkPhysicalDevice PhysicalDevices_24;
        public VkPhysicalDevice PhysicalDevices_25;
        public VkPhysicalDevice PhysicalDevices_26;
        public VkPhysicalDevice PhysicalDevices_27;
        public VkPhysicalDevice PhysicalDevices_28;
        public VkPhysicalDevice PhysicalDevices_29;
        public VkPhysicalDevice PhysicalDevices_30;
        public VkPhysicalDevice PhysicalDevices_31;
        public uint SubsetAllocation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceGroupDeviceCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PhysicalDeviceCount;
        public unsafe VkPhysicalDevice* PPhysicalDevices;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferMemoryRequirementsInfo2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkBuffer Buffer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageMemoryRequirementsInfo2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImage Image;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageSparseMemoryRequirementsInfo2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImage Image;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryRequirements2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkMemoryRequirements MemoryRequirements;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseImageMemoryRequirements2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSparseImageMemoryRequirements MemoryRequirements;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFeatures2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPhysicalDeviceFeatures Features;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceProperties2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPhysicalDeviceProperties Properties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFormatProperties2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkFormatProperties FormatProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageFormatProperties2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageFormatProperties ImageFormatProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceImageFormatInfo2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkFormat Format;
        public VkImageType Type;
        public VkImageTiling Tiling;
        public VkImageUsageFlags Usage;
        public VkImageCreateFlags Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkQueueFamilyProperties2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkQueueFamilyProperties QueueFamilyProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMemoryProperties2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPhysicalDeviceMemoryProperties MemoryProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseImageFormatProperties2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSparseImageFormatProperties Properties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSparseImageFormatInfo2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkFormat Format;
        public VkImageType Type;
        public VkSampleCountFlagBits Samples;
        public VkImageUsageFlags Usage;
        public VkImageTiling Tiling;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePointClippingProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPointClippingBehavior PointClippingBehavior;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkInputAttachmentAspectReference
    {
        public uint Subpass;
        public uint InputAttachmentIndex;
        public VkImageAspectFlags AspectMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassInputAttachmentAspectCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint AspectReferenceCount;
        public unsafe VkInputAttachmentAspectReference* PAspectReferences;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageViewUsageCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageUsageFlags Usage;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineTessellationDomainOriginStateCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkTessellationDomainOrigin DomainOrigin;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassMultiviewCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SubpassCount;
        public unsafe uint* PViewMasks;
        public uint DependencyCount;
        public unsafe int* PViewOffsets;
        public uint CorrelationMaskCount;
        public unsafe uint* PCorrelationMasks;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMultiviewFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint Multiview;
        public uint MultiviewGeometryShader;
        public uint MultiviewTessellationShader;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMultiviewProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxMultiviewViewCount;
        public uint MaxMultiviewInstanceIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVariablePointersFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint VariablePointersStorageBuffer;
        public uint VariablePointers;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceProtectedMemoryFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ProtectedMemory;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceProtectedMemoryProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ProtectedNoFault;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceQueueInfo2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDeviceQueueCreateFlags Flags;
        public uint QueueFamilyIndex;
        public uint QueueIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkProtectedSubmitInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ProtectedSubmit;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSamplerYcbcrConversionCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkFormat Format;
        public VkSamplerYcbcrModelConversion YcbcrModel;
        public VkSamplerYcbcrRange YcbcrRange;
        public VkComponentMapping Components;
        public VkChromaLocation XChromaOffset;
        public VkChromaLocation YChromaOffset;
        public VkFilter ChromaFilter;
        public uint ForceExplicitReconstruction;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSamplerYcbcrConversionInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSamplerYcbcrConversion Conversion;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindImagePlaneMemoryInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageAspectFlagBits PlaneAspect;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImagePlaneMemoryRequirementsInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageAspectFlagBits PlaneAspect;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSamplerYcbcrConversionFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SamplerYcbcrConversion;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSamplerYcbcrConversionImageFormatProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint CombinedImageSamplerDescriptorCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorUpdateTemplateEntry
    {
        public uint DstBinding;
        public uint DstArrayElement;
        public uint DescriptorCount;
        public VkDescriptorType DescriptorType;
        public nuint Offset;
        public nuint Stride;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorUpdateTemplateCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDescriptorUpdateTemplateCreateFlags Flags;
        public uint DescriptorUpdateEntryCount;
        public unsafe VkDescriptorUpdateTemplateEntry* PDescriptorUpdateEntries;
        public VkDescriptorUpdateTemplateType TemplateType;
        public VkDescriptorSetLayout DescriptorSetLayout;
        public VkPipelineBindPoint PipelineBindPoint;
        public VkPipelineLayout PipelineLayout;
        public uint Set;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalMemoryProperties
    {
        public VkExternalMemoryFeatureFlags ExternalMemoryFeatures;
        public VkExternalMemoryHandleTypeFlags ExportFromImportedHandleTypes;
        public VkExternalMemoryHandleTypeFlags CompatibleHandleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExternalImageFormatInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExternalMemoryHandleTypeFlagBits HandleType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalImageFormatProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExternalMemoryProperties ExternalMemoryProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExternalBufferInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkBufferCreateFlags Flags;
        public VkBufferUsageFlags Usage;
        public VkExternalMemoryHandleTypeFlagBits HandleType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalBufferProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExternalMemoryProperties ExternalMemoryProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceIDProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public unsafe fixed byte DeviceUUID[16];
        public unsafe fixed byte DriverUUID[16];
        public unsafe fixed byte DeviceLUID[8];
        public uint DeviceNodeMask;
        public uint DeviceLUIDValid;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalMemoryImageCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExternalMemoryHandleTypeFlags HandleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalMemoryBufferCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExternalMemoryHandleTypeFlags HandleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExportMemoryAllocateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExternalMemoryHandleTypeFlags HandleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExternalFenceInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExternalFenceHandleTypeFlagBits HandleType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalFenceProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExternalFenceHandleTypeFlags ExportFromImportedHandleTypes;
        public VkExternalFenceHandleTypeFlags CompatibleHandleTypes;
        public VkExternalFenceFeatureFlags ExternalFenceFeatures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExportFenceCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExternalFenceHandleTypeFlags HandleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExportSemaphoreCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExternalSemaphoreHandleTypeFlags HandleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExternalSemaphoreInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExternalSemaphoreHandleTypeFlagBits HandleType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalSemaphoreProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExternalSemaphoreHandleTypeFlags ExportFromImportedHandleTypes;
        public VkExternalSemaphoreHandleTypeFlags CompatibleHandleTypes;
        public VkExternalSemaphoreFeatureFlags ExternalSemaphoreFeatures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMaintenance3Properties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxPerSetDescriptors;
        public ulong MaxMemoryAllocationSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorSetLayoutSupport
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint Supported;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderDrawParametersFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderDrawParameters;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVulkan11Features
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint StorageBuffer16BitAccess;
        public uint UniformAndStorageBuffer16BitAccess;
        public uint StoragePushConstant16;
        public uint StorageInputOutput16;
        public uint Multiview;
        public uint MultiviewGeometryShader;
        public uint MultiviewTessellationShader;
        public uint VariablePointersStorageBuffer;
        public uint VariablePointers;
        public uint ProtectedMemory;
        public uint SamplerYcbcrConversion;
        public uint ShaderDrawParameters;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVulkan11Properties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public unsafe fixed byte DeviceUUID[16];
        public unsafe fixed byte DriverUUID[16];
        public unsafe fixed byte DeviceLUID[8];
        public uint DeviceNodeMask;
        public uint DeviceLUIDValid;
        public uint SubgroupSize;
        public VkShaderStageFlags SubgroupSupportedStages;
        public VkSubgroupFeatureFlags SubgroupSupportedOperations;
        public uint SubgroupQuadOperationsInAllStages;
        public VkPointClippingBehavior PointClippingBehavior;
        public uint MaxMultiviewViewCount;
        public uint MaxMultiviewInstanceIndex;
        public uint ProtectedNoFault;
        public uint MaxPerSetDescriptors;
        public ulong MaxMemoryAllocationSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVulkan12Features
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SamplerMirrorClampToEdge;
        public uint DrawIndirectCount;
        public uint StorageBuffer8BitAccess;
        public uint UniformAndStorageBuffer8BitAccess;
        public uint StoragePushConstant8;
        public uint ShaderBufferInt64Atomics;
        public uint ShaderSharedInt64Atomics;
        public uint ShaderFloat16;
        public uint ShaderInt8;
        public uint DescriptorIndexing;
        public uint ShaderInputAttachmentArrayDynamicIndexing;
        public uint ShaderUniformTexelBufferArrayDynamicIndexing;
        public uint ShaderStorageTexelBufferArrayDynamicIndexing;
        public uint ShaderUniformBufferArrayNonUniformIndexing;
        public uint ShaderSampledImageArrayNonUniformIndexing;
        public uint ShaderStorageBufferArrayNonUniformIndexing;
        public uint ShaderStorageImageArrayNonUniformIndexing;
        public uint ShaderInputAttachmentArrayNonUniformIndexing;
        public uint ShaderUniformTexelBufferArrayNonUniformIndexing;
        public uint ShaderStorageTexelBufferArrayNonUniformIndexing;
        public uint DescriptorBindingUniformBufferUpdateAfterBind;
        public uint DescriptorBindingSampledImageUpdateAfterBind;
        public uint DescriptorBindingStorageImageUpdateAfterBind;
        public uint DescriptorBindingStorageBufferUpdateAfterBind;
        public uint DescriptorBindingUniformTexelBufferUpdateAfterBind;
        public uint DescriptorBindingStorageTexelBufferUpdateAfterBind;
        public uint DescriptorBindingUpdateUnusedWhilePending;
        public uint DescriptorBindingPartiallyBound;
        public uint DescriptorBindingVariableDescriptorCount;
        public uint RuntimeDescriptorArray;
        public uint SamplerFilterMinmax;
        public uint ScalarBlockLayout;
        public uint ImagelessFramebuffer;
        public uint UniformBufferStandardLayout;
        public uint ShaderSubgroupExtendedTypes;
        public uint SeparateDepthStencilLayouts;
        public uint HostQueryReset;
        public uint TimelineSemaphore;
        public uint BufferDeviceAddress;
        public uint BufferDeviceAddressCaptureReplay;
        public uint BufferDeviceAddressMultiDevice;
        public uint VulkanMemoryModel;
        public uint VulkanMemoryModelDeviceScope;
        public uint VulkanMemoryModelAvailabilityVisibilityChains;
        public uint ShaderOutputViewportIndex;
        public uint ShaderOutputLayer;
        public uint SubgroupBroadcastDynamicId;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkConformanceVersion
    {
        public byte Major;
        public byte Minor;
        public byte Subminor;
        public byte Patch;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVulkan12Properties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDriverId DriverID;
        public unsafe fixed byte DriverName[256];
        public unsafe fixed byte DriverInfo[256];
        public VkConformanceVersion ConformanceVersion;
        public VkShaderFloatControlsIndependence DenormBehaviorIndependence;
        public VkShaderFloatControlsIndependence RoundingModeIndependence;
        public uint ShaderSignedZeroInfNanPreserveFloat16;
        public uint ShaderSignedZeroInfNanPreserveFloat32;
        public uint ShaderSignedZeroInfNanPreserveFloat64;
        public uint ShaderDenormPreserveFloat16;
        public uint ShaderDenormPreserveFloat32;
        public uint ShaderDenormPreserveFloat64;
        public uint ShaderDenormFlushToZeroFloat16;
        public uint ShaderDenormFlushToZeroFloat32;
        public uint ShaderDenormFlushToZeroFloat64;
        public uint ShaderRoundingModeRTEFloat16;
        public uint ShaderRoundingModeRTEFloat32;
        public uint ShaderRoundingModeRTEFloat64;
        public uint ShaderRoundingModeRTZFloat16;
        public uint ShaderRoundingModeRTZFloat32;
        public uint ShaderRoundingModeRTZFloat64;
        public uint MaxUpdateAfterBindDescriptorsInAllPools;
        public uint ShaderUniformBufferArrayNonUniformIndexingNative;
        public uint ShaderSampledImageArrayNonUniformIndexingNative;
        public uint ShaderStorageBufferArrayNonUniformIndexingNative;
        public uint ShaderStorageImageArrayNonUniformIndexingNative;
        public uint ShaderInputAttachmentArrayNonUniformIndexingNative;
        public uint RobustBufferAccessUpdateAfterBind;
        public uint QuadDivergentImplicitLod;
        public uint MaxPerStageDescriptorUpdateAfterBindSamplers;
        public uint MaxPerStageDescriptorUpdateAfterBindUniformBuffers;
        public uint MaxPerStageDescriptorUpdateAfterBindStorageBuffers;
        public uint MaxPerStageDescriptorUpdateAfterBindSampledImages;
        public uint MaxPerStageDescriptorUpdateAfterBindStorageImages;
        public uint MaxPerStageDescriptorUpdateAfterBindInputAttachments;
        public uint MaxPerStageUpdateAfterBindResources;
        public uint MaxDescriptorSetUpdateAfterBindSamplers;
        public uint MaxDescriptorSetUpdateAfterBindUniformBuffers;
        public uint MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
        public uint MaxDescriptorSetUpdateAfterBindStorageBuffers;
        public uint MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
        public uint MaxDescriptorSetUpdateAfterBindSampledImages;
        public uint MaxDescriptorSetUpdateAfterBindStorageImages;
        public uint MaxDescriptorSetUpdateAfterBindInputAttachments;
        public VkResolveModeFlags SupportedDepthResolveModes;
        public VkResolveModeFlags SupportedStencilResolveModes;
        public uint IndependentResolveNone;
        public uint IndependentResolve;
        public uint FilterMinmaxSingleComponentFormats;
        public uint FilterMinmaxImageComponentMapping;
        public ulong MaxTimelineSemaphoreValueDifference;
        public VkSampleCountFlags FramebufferIntegerColorSampleCounts;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageFormatListCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ViewFormatCount;
        public unsafe VkFormat* PViewFormats;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAttachmentDescription2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkAttachmentDescriptionFlags Flags;
        public VkFormat Format;
        public VkSampleCountFlagBits Samples;
        public VkAttachmentLoadOp LoadOp;
        public VkAttachmentStoreOp StoreOp;
        public VkAttachmentLoadOp StencilLoadOp;
        public VkAttachmentStoreOp StencilStoreOp;
        public VkImageLayout InitialLayout;
        public VkImageLayout FinalLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAttachmentReference2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint Attachment;
        public VkImageLayout Layout;
        public VkImageAspectFlags AspectMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassDescription2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSubpassDescriptionFlags Flags;
        public VkPipelineBindPoint PipelineBindPoint;
        public uint ViewMask;
        public uint InputAttachmentCount;
        public unsafe VkAttachmentReference2* PInputAttachments;
        public uint ColorAttachmentCount;
        public unsafe VkAttachmentReference2* PColorAttachments;
        public unsafe VkAttachmentReference2* PResolveAttachments;
        public unsafe VkAttachmentReference2* PDepthStencilAttachment;
        public uint PreserveAttachmentCount;
        public unsafe uint* PPreserveAttachments;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassDependency2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SrcSubpass;
        public uint DstSubpass;
        public VkPipelineStageFlags SrcStageMask;
        public VkPipelineStageFlags DstStageMask;
        public VkAccessFlags SrcAccessMask;
        public VkAccessFlags DstAccessMask;
        public VkDependencyFlags DependencyFlags;
        public int ViewOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassCreateInfo2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkRenderPassCreateFlags Flags;
        public uint AttachmentCount;
        public unsafe VkAttachmentDescription2* PAttachments;
        public uint SubpassCount;
        public unsafe VkSubpassDescription2* PSubpasses;
        public uint DependencyCount;
        public unsafe VkSubpassDependency2* PDependencies;
        public uint CorrelatedViewMaskCount;
        public unsafe uint* PCorrelatedViewMasks;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassBeginInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSubpassContents Contents;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassEndInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevice8BitStorageFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint StorageBuffer8BitAccess;
        public uint UniformAndStorageBuffer8BitAccess;
        public uint StoragePushConstant8;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDriverProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDriverId DriverID;
        public unsafe fixed byte DriverName[256];
        public unsafe fixed byte DriverInfo[256];
        public VkConformanceVersion ConformanceVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderAtomicInt64Features
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderBufferInt64Atomics;
        public uint ShaderSharedInt64Atomics;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderFloat16Int8Features
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderFloat16;
        public uint ShaderInt8;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFloatControlsProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkShaderFloatControlsIndependence DenormBehaviorIndependence;
        public VkShaderFloatControlsIndependence RoundingModeIndependence;
        public uint ShaderSignedZeroInfNanPreserveFloat16;
        public uint ShaderSignedZeroInfNanPreserveFloat32;
        public uint ShaderSignedZeroInfNanPreserveFloat64;
        public uint ShaderDenormPreserveFloat16;
        public uint ShaderDenormPreserveFloat32;
        public uint ShaderDenormPreserveFloat64;
        public uint ShaderDenormFlushToZeroFloat16;
        public uint ShaderDenormFlushToZeroFloat32;
        public uint ShaderDenormFlushToZeroFloat64;
        public uint ShaderRoundingModeRTEFloat16;
        public uint ShaderRoundingModeRTEFloat32;
        public uint ShaderRoundingModeRTEFloat64;
        public uint ShaderRoundingModeRTZFloat16;
        public uint ShaderRoundingModeRTZFloat32;
        public uint ShaderRoundingModeRTZFloat64;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorSetLayoutBindingFlagsCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint BindingCount;
        public unsafe VkDescriptorBindingFlags* PBindingFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDescriptorIndexingFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderInputAttachmentArrayDynamicIndexing;
        public uint ShaderUniformTexelBufferArrayDynamicIndexing;
        public uint ShaderStorageTexelBufferArrayDynamicIndexing;
        public uint ShaderUniformBufferArrayNonUniformIndexing;
        public uint ShaderSampledImageArrayNonUniformIndexing;
        public uint ShaderStorageBufferArrayNonUniformIndexing;
        public uint ShaderStorageImageArrayNonUniformIndexing;
        public uint ShaderInputAttachmentArrayNonUniformIndexing;
        public uint ShaderUniformTexelBufferArrayNonUniformIndexing;
        public uint ShaderStorageTexelBufferArrayNonUniformIndexing;
        public uint DescriptorBindingUniformBufferUpdateAfterBind;
        public uint DescriptorBindingSampledImageUpdateAfterBind;
        public uint DescriptorBindingStorageImageUpdateAfterBind;
        public uint DescriptorBindingStorageBufferUpdateAfterBind;
        public uint DescriptorBindingUniformTexelBufferUpdateAfterBind;
        public uint DescriptorBindingStorageTexelBufferUpdateAfterBind;
        public uint DescriptorBindingUpdateUnusedWhilePending;
        public uint DescriptorBindingPartiallyBound;
        public uint DescriptorBindingVariableDescriptorCount;
        public uint RuntimeDescriptorArray;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDescriptorIndexingProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxUpdateAfterBindDescriptorsInAllPools;
        public uint ShaderUniformBufferArrayNonUniformIndexingNative;
        public uint ShaderSampledImageArrayNonUniformIndexingNative;
        public uint ShaderStorageBufferArrayNonUniformIndexingNative;
        public uint ShaderStorageImageArrayNonUniformIndexingNative;
        public uint ShaderInputAttachmentArrayNonUniformIndexingNative;
        public uint RobustBufferAccessUpdateAfterBind;
        public uint QuadDivergentImplicitLod;
        public uint MaxPerStageDescriptorUpdateAfterBindSamplers;
        public uint MaxPerStageDescriptorUpdateAfterBindUniformBuffers;
        public uint MaxPerStageDescriptorUpdateAfterBindStorageBuffers;
        public uint MaxPerStageDescriptorUpdateAfterBindSampledImages;
        public uint MaxPerStageDescriptorUpdateAfterBindStorageImages;
        public uint MaxPerStageDescriptorUpdateAfterBindInputAttachments;
        public uint MaxPerStageUpdateAfterBindResources;
        public uint MaxDescriptorSetUpdateAfterBindSamplers;
        public uint MaxDescriptorSetUpdateAfterBindUniformBuffers;
        public uint MaxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
        public uint MaxDescriptorSetUpdateAfterBindStorageBuffers;
        public uint MaxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
        public uint MaxDescriptorSetUpdateAfterBindSampledImages;
        public uint MaxDescriptorSetUpdateAfterBindStorageImages;
        public uint MaxDescriptorSetUpdateAfterBindInputAttachments;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorSetVariableDescriptorCountAllocateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DescriptorSetCount;
        public unsafe uint* PDescriptorCounts;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorSetVariableDescriptorCountLayoutSupport
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxVariableDescriptorCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassDescriptionDepthStencilResolve
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkResolveModeFlagBits DepthResolveMode;
        public VkResolveModeFlagBits StencilResolveMode;
        public unsafe VkAttachmentReference2* PDepthStencilResolveAttachment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDepthStencilResolveProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkResolveModeFlags SupportedDepthResolveModes;
        public VkResolveModeFlags SupportedStencilResolveModes;
        public uint IndependentResolveNone;
        public uint IndependentResolve;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceScalarBlockLayoutFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ScalarBlockLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageStencilUsageCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageUsageFlags StencilUsage;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSamplerReductionModeCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSamplerReductionMode ReductionMode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSamplerFilterMinmaxProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint FilterMinmaxSingleComponentFormats;
        public uint FilterMinmaxImageComponentMapping;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVulkanMemoryModelFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint VulkanMemoryModel;
        public uint VulkanMemoryModelDeviceScope;
        public uint VulkanMemoryModelAvailabilityVisibilityChains;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceImagelessFramebufferFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ImagelessFramebuffer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFramebufferAttachmentImageInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageCreateFlags Flags;
        public VkImageUsageFlags Usage;
        public uint Width;
        public uint Height;
        public uint LayerCount;
        public uint ViewFormatCount;
        public unsafe VkFormat* PViewFormats;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFramebufferAttachmentsCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint AttachmentImageInfoCount;
        public unsafe VkFramebufferAttachmentImageInfo* PAttachmentImageInfos;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassAttachmentBeginInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint AttachmentCount;
        public unsafe VkImageView* PAttachments;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint UniformBufferStandardLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderSubgroupExtendedTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SeparateDepthStencilLayouts;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAttachmentReferenceStencilLayout
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageLayout StencilLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAttachmentDescriptionStencilLayout
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageLayout StencilInitialLayout;
        public VkImageLayout StencilFinalLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceHostQueryResetFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint HostQueryReset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceTimelineSemaphoreFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint TimelineSemaphore;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceTimelineSemaphoreProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong MaxTimelineSemaphoreValueDifference;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSemaphoreTypeCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSemaphoreType SemaphoreType;
        public ulong InitialValue;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkTimelineSemaphoreSubmitInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint WaitSemaphoreValueCount;
        public unsafe ulong* PWaitSemaphoreValues;
        public uint SignalSemaphoreValueCount;
        public unsafe ulong* PSignalSemaphoreValues;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSemaphoreWaitInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSemaphoreWaitFlags Flags;
        public uint SemaphoreCount;
        public unsafe VkSemaphore* PSemaphores;
        public unsafe ulong* PValues;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSemaphoreSignalInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSemaphore Semaphore;
        public ulong Value;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceBufferDeviceAddressFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint BufferDeviceAddress;
        public uint BufferDeviceAddressCaptureReplay;
        public uint BufferDeviceAddressMultiDevice;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferDeviceAddressInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkBuffer Buffer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferOpaqueCaptureAddressCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong OpaqueCaptureAddress;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryOpaqueCaptureAddressAllocateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong OpaqueCaptureAddress;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceMemoryOpaqueCaptureAddressInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDeviceMemory Memory;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVulkan13Features
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint RobustImageAccess;
        public uint InlineUniformBlock;
        public uint DescriptorBindingInlineUniformBlockUpdateAfterBind;
        public uint PipelineCreationCacheControl;
        public uint PrivateData;
        public uint ShaderDemoteToHelperInvocation;
        public uint ShaderTerminateInvocation;
        public uint SubgroupSizeControl;
        public uint ComputeFullSubgroups;
        public uint Synchronization2;
        public uint TextureCompressionASTC_HDR;
        public uint ShaderZeroInitializeWorkgroupMemory;
        public uint DynamicRendering;
        public uint ShaderIntegerDotProduct;
        public uint Maintenance4;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVulkan13Properties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MinSubgroupSize;
        public uint MaxSubgroupSize;
        public uint MaxComputeWorkgroupSubgroups;
        public VkShaderStageFlags RequiredSubgroupSizeStages;
        public uint MaxInlineUniformBlockSize;
        public uint MaxPerStageDescriptorInlineUniformBlocks;
        public uint MaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
        public uint MaxDescriptorSetInlineUniformBlocks;
        public uint MaxDescriptorSetUpdateAfterBindInlineUniformBlocks;
        public uint MaxInlineUniformTotalSize;
        public uint IntegerDotProduct8BitUnsignedAccelerated;
        public uint IntegerDotProduct8BitSignedAccelerated;
        public uint IntegerDotProduct8BitMixedSignednessAccelerated;
        public uint IntegerDotProduct4x8BitPackedUnsignedAccelerated;
        public uint IntegerDotProduct4x8BitPackedSignedAccelerated;
        public uint IntegerDotProduct4x8BitPackedMixedSignednessAccelerated;
        public uint IntegerDotProduct16BitUnsignedAccelerated;
        public uint IntegerDotProduct16BitSignedAccelerated;
        public uint IntegerDotProduct16BitMixedSignednessAccelerated;
        public uint IntegerDotProduct32BitUnsignedAccelerated;
        public uint IntegerDotProduct32BitSignedAccelerated;
        public uint IntegerDotProduct32BitMixedSignednessAccelerated;
        public uint IntegerDotProduct64BitUnsignedAccelerated;
        public uint IntegerDotProduct64BitSignedAccelerated;
        public uint IntegerDotProduct64BitMixedSignednessAccelerated;
        public uint IntegerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating8BitSignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
        public uint IntegerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
        public uint IntegerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating16BitSignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
        public uint IntegerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating32BitSignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
        public uint IntegerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating64BitSignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
        public ulong StorageTexelBufferOffsetAlignmentBytes;
        public uint StorageTexelBufferOffsetSingleTexelAlignment;
        public ulong UniformTexelBufferOffsetAlignmentBytes;
        public uint UniformTexelBufferOffsetSingleTexelAlignment;
        public ulong MaxBufferSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineCreationFeedback
    {
        public VkPipelineCreationFeedbackFlags Flags;
        public ulong Duration;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineCreationFeedbackCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public unsafe VkPipelineCreationFeedback* PPipelineCreationFeedback;
        public uint PipelineStageCreationFeedbackCount;
        public unsafe VkPipelineCreationFeedback* PPipelineStageCreationFeedbacks;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderTerminateInvocationFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderTerminateInvocation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceToolProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public unsafe fixed byte Name[256];
        public unsafe fixed byte Version[256];
        public VkToolPurposeFlags Purposes;
        public unsafe fixed byte Description[256];
        public unsafe fixed byte Layer[256];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderDemoteToHelperInvocation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePrivateDataFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PrivateData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDevicePrivateDataCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PrivateDataSlotRequestCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPrivateDataSlotCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPrivateDataSlotCreateFlags Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePipelineCreationCacheControlFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PipelineCreationCacheControl;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryBarrier2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineStageFlags2 SrcStageMask;
        public VkAccessFlags2 SrcAccessMask;
        public VkPipelineStageFlags2 DstStageMask;
        public VkAccessFlags2 DstAccessMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferMemoryBarrier2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineStageFlags2 SrcStageMask;
        public VkAccessFlags2 SrcAccessMask;
        public VkPipelineStageFlags2 DstStageMask;
        public VkAccessFlags2 DstAccessMask;
        public uint SrcQueueFamilyIndex;
        public uint DstQueueFamilyIndex;
        public VkBuffer Buffer;
        public ulong Offset;
        public ulong Size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageMemoryBarrier2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineStageFlags2 SrcStageMask;
        public VkAccessFlags2 SrcAccessMask;
        public VkPipelineStageFlags2 DstStageMask;
        public VkAccessFlags2 DstAccessMask;
        public VkImageLayout OldLayout;
        public VkImageLayout NewLayout;
        public uint SrcQueueFamilyIndex;
        public uint DstQueueFamilyIndex;
        public VkImage Image;
        public VkImageSubresourceRange SubresourceRange;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDependencyInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDependencyFlags DependencyFlags;
        public uint MemoryBarrierCount;
        public unsafe VkMemoryBarrier2* PMemoryBarriers;
        public uint BufferMemoryBarrierCount;
        public unsafe VkBufferMemoryBarrier2* PBufferMemoryBarriers;
        public uint ImageMemoryBarrierCount;
        public unsafe VkImageMemoryBarrier2* PImageMemoryBarriers;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSemaphoreSubmitInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSemaphore Semaphore;
        public ulong Value;
        public VkPipelineStageFlags2 StageMask;
        public uint DeviceIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandBufferSubmitInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkCommandBuffer CommandBuffer;
        public uint DeviceMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubmitInfo2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSubmitFlags Flags;
        public uint WaitSemaphoreInfoCount;
        public unsafe VkSemaphoreSubmitInfo* PWaitSemaphoreInfos;
        public uint CommandBufferInfoCount;
        public unsafe VkCommandBufferSubmitInfo* PCommandBufferInfos;
        public uint SignalSemaphoreInfoCount;
        public unsafe VkSemaphoreSubmitInfo* PSignalSemaphoreInfos;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSynchronization2Features
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint Synchronization2;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderZeroInitializeWorkgroupMemory;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceImageRobustnessFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint RobustImageAccess;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferCopy2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong SrcOffset;
        public ulong DstOffset;
        public ulong Size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyBufferInfo2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkBuffer SrcBuffer;
        public VkBuffer DstBuffer;
        public uint RegionCount;
        public unsafe VkBufferCopy2* PRegions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageCopy2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageSubresourceLayers SrcSubresource;
        public VkOffset3D SrcOffset;
        public VkImageSubresourceLayers DstSubresource;
        public VkOffset3D DstOffset;
        public VkExtent3D Extent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyImageInfo2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImage SrcImage;
        public VkImageLayout SrcImageLayout;
        public VkImage DstImage;
        public VkImageLayout DstImageLayout;
        public uint RegionCount;
        public unsafe VkImageCopy2* PRegions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferImageCopy2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong BufferOffset;
        public uint BufferRowLength;
        public uint BufferImageHeight;
        public VkImageSubresourceLayers ImageSubresource;
        public VkOffset3D ImageOffset;
        public VkExtent3D ImageExtent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyBufferToImageInfo2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkBuffer SrcBuffer;
        public VkImage DstImage;
        public VkImageLayout DstImageLayout;
        public uint RegionCount;
        public unsafe VkBufferImageCopy2* PRegions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyImageToBufferInfo2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImage SrcImage;
        public VkImageLayout SrcImageLayout;
        public VkBuffer DstBuffer;
        public uint RegionCount;
        public unsafe VkBufferImageCopy2* PRegions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageBlit2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageSubresourceLayers SrcSubresource;
        public VkOffset3D SrcOffsets_0;
        public VkOffset3D SrcOffsets_1;
        public VkImageSubresourceLayers DstSubresource;
        public VkOffset3D DstOffsets_0;
        public VkOffset3D DstOffsets_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBlitImageInfo2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImage SrcImage;
        public VkImageLayout SrcImageLayout;
        public VkImage DstImage;
        public VkImageLayout DstImageLayout;
        public uint RegionCount;
        public unsafe VkImageBlit2* PRegions;
        public VkFilter Filter;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageResolve2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageSubresourceLayers SrcSubresource;
        public VkOffset3D SrcOffset;
        public VkImageSubresourceLayers DstSubresource;
        public VkOffset3D DstOffset;
        public VkExtent3D Extent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkResolveImageInfo2
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImage SrcImage;
        public VkImageLayout SrcImageLayout;
        public VkImage DstImage;
        public VkImageLayout DstImageLayout;
        public uint RegionCount;
        public unsafe VkImageResolve2* PRegions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSubgroupSizeControlFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SubgroupSizeControl;
        public uint ComputeFullSubgroups;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSubgroupSizeControlProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MinSubgroupSize;
        public uint MaxSubgroupSize;
        public uint MaxComputeWorkgroupSubgroups;
        public VkShaderStageFlags RequiredSubgroupSizeStages;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint RequiredSubgroupSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceInlineUniformBlockFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint InlineUniformBlock;
        public uint DescriptorBindingInlineUniformBlockUpdateAfterBind;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceInlineUniformBlockProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxInlineUniformBlockSize;
        public uint MaxPerStageDescriptorInlineUniformBlocks;
        public uint MaxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
        public uint MaxDescriptorSetInlineUniformBlocks;
        public uint MaxDescriptorSetUpdateAfterBindInlineUniformBlocks;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkWriteDescriptorSetInlineUniformBlock
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DataSize;
        public unsafe void* PData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorPoolInlineUniformBlockCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxInlineUniformBlockBindings;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint TextureCompressionASTC_HDR;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderingAttachmentInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageView ImageView;
        public VkImageLayout ImageLayout;
        public VkResolveModeFlagBits ResolveMode;
        public VkImageView ResolveImageView;
        public VkImageLayout ResolveImageLayout;
        public VkAttachmentLoadOp LoadOp;
        public VkAttachmentStoreOp StoreOp;
        public VkClearValue ClearValue;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderingInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkRenderingFlags Flags;
        public VkRect2D RenderArea;
        public uint LayerCount;
        public uint ViewMask;
        public uint ColorAttachmentCount;
        public unsafe VkRenderingAttachmentInfo* PColorAttachments;
        public unsafe VkRenderingAttachmentInfo* PDepthAttachment;
        public unsafe VkRenderingAttachmentInfo* PStencilAttachment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRenderingCreateInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ViewMask;
        public uint ColorAttachmentCount;
        public unsafe VkFormat* PColorAttachmentFormats;
        public VkFormat DepthAttachmentFormat;
        public VkFormat StencilAttachmentFormat;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDynamicRenderingFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DynamicRendering;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandBufferInheritanceRenderingInfo
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkRenderingFlags Flags;
        public uint ViewMask;
        public uint ColorAttachmentCount;
        public unsafe VkFormat* PColorAttachmentFormats;
        public VkFormat DepthAttachmentFormat;
        public VkFormat StencilAttachmentFormat;
        public VkSampleCountFlagBits RasterizationSamples;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderIntegerDotProductFeatures
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderIntegerDotProduct;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderIntegerDotProductProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint IntegerDotProduct8BitUnsignedAccelerated;
        public uint IntegerDotProduct8BitSignedAccelerated;
        public uint IntegerDotProduct8BitMixedSignednessAccelerated;
        public uint IntegerDotProduct4x8BitPackedUnsignedAccelerated;
        public uint IntegerDotProduct4x8BitPackedSignedAccelerated;
        public uint IntegerDotProduct4x8BitPackedMixedSignednessAccelerated;
        public uint IntegerDotProduct16BitUnsignedAccelerated;
        public uint IntegerDotProduct16BitSignedAccelerated;
        public uint IntegerDotProduct16BitMixedSignednessAccelerated;
        public uint IntegerDotProduct32BitUnsignedAccelerated;
        public uint IntegerDotProduct32BitSignedAccelerated;
        public uint IntegerDotProduct32BitMixedSignednessAccelerated;
        public uint IntegerDotProduct64BitUnsignedAccelerated;
        public uint IntegerDotProduct64BitSignedAccelerated;
        public uint IntegerDotProduct64BitMixedSignednessAccelerated;
        public uint IntegerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating8BitSignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
        public uint IntegerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
        public uint IntegerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating16BitSignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
        public uint IntegerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating32BitSignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
        public uint IntegerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating64BitSignedAccelerated;
        public uint IntegerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceTexelBufferAlignmentProperties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong StorageTexelBufferOffsetAlignmentBytes;
        public uint StorageTexelBufferOffsetSingleTexelAlignment;
        public ulong UniformTexelBufferOffsetAlignmentBytes;
        public uint UniformTexelBufferOffsetSingleTexelAlignment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFormatProperties3
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkFormatFeatureFlags2 LinearTilingFeatures;
        public VkFormatFeatureFlags2 OptimalTilingFeatures;
        public VkFormatFeatureFlags2 BufferFeatures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMaintenance4Features
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint Maintenance4;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMaintenance4Properties
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong MaxBufferSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceBufferMemoryRequirements
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public unsafe VkBufferCreateInfo* PCreateInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceImageMemoryRequirements
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public unsafe VkImageCreateInfo* PCreateInfo;
        public VkImageAspectFlagBits PlaneAspect;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSurfaceCapabilitiesKHR
    {
        public uint MinImageCount;
        public uint MaxImageCount;
        public VkExtent2D CurrentExtent;
        public VkExtent2D MinImageExtent;
        public VkExtent2D MaxImageExtent;
        public uint MaxImageArrayLayers;
        public VkSurfaceTransformFlagsKHR SupportedTransforms;
        public VkSurfaceTransformFlagBitsKHR CurrentTransform;
        public VkCompositeAlphaFlagsKHR SupportedCompositeAlpha;
        public VkImageUsageFlags SupportedUsageFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSurfaceFormatKHR
    {
        public VkFormat Format;
        public VkColorSpaceKHR ColorSpace;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSwapchainCreateInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSwapchainCreateFlagsKHR Flags;
        public VkSurfaceKHR Surface;
        public uint MinImageCount;
        public VkFormat ImageFormat;
        public VkColorSpaceKHR ImageColorSpace;
        public VkExtent2D ImageExtent;
        public uint ImageArrayLayers;
        public VkImageUsageFlags ImageUsage;
        public VkSharingMode ImageSharingMode;
        public uint QueueFamilyIndexCount;
        public unsafe uint* PQueueFamilyIndices;
        public VkSurfaceTransformFlagBitsKHR PreTransform;
        public VkCompositeAlphaFlagBitsKHR CompositeAlpha;
        public VkPresentModeKHR PresentMode;
        public uint Clipped;
        public VkSwapchainKHR OldSwapchain;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPresentInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint WaitSemaphoreCount;
        public unsafe VkSemaphore* PWaitSemaphores;
        public uint SwapchainCount;
        public unsafe VkSwapchainKHR* PSwapchains;
        public unsafe uint* PImageIndices;
        public unsafe VkResult* PResults;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageSwapchainCreateInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSwapchainKHR Swapchain;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindImageMemorySwapchainInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSwapchainKHR Swapchain;
        public uint ImageIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAcquireNextImageInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSwapchainKHR Swapchain;
        public ulong Timeout;
        public VkSemaphore Semaphore;
        public VkFence Fence;
        public uint DeviceMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceGroupPresentCapabilitiesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public unsafe fixed uint PresentMask[32];
        public VkDeviceGroupPresentModeFlagsKHR Modes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceGroupPresentInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SwapchainCount;
        public unsafe uint* PDeviceMasks;
        public VkDeviceGroupPresentModeFlagBitsKHR Mode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceGroupSwapchainCreateInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDeviceGroupPresentModeFlagsKHR Modes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayModeParametersKHR
    {
        public VkExtent2D VisibleRegion;
        public uint RefreshRate;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayModeCreateInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDisplayModeCreateFlagsKHR Flags;
        public VkDisplayModeParametersKHR Parameters;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayModePropertiesKHR
    {
        public VkDisplayModeKHR DisplayMode;
        public VkDisplayModeParametersKHR Parameters;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayPlaneCapabilitiesKHR
    {
        public VkDisplayPlaneAlphaFlagsKHR SupportedAlpha;
        public VkOffset2D MinSrcPosition;
        public VkOffset2D MaxSrcPosition;
        public VkExtent2D MinSrcExtent;
        public VkExtent2D MaxSrcExtent;
        public VkOffset2D MinDstPosition;
        public VkOffset2D MaxDstPosition;
        public VkExtent2D MinDstExtent;
        public VkExtent2D MaxDstExtent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayPlanePropertiesKHR
    {
        public VkDisplayKHR CurrentDisplay;
        public uint CurrentStackIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayPropertiesKHR
    {
        public VkDisplayKHR Display;
        public unsafe byte* DisplayName;
        public VkExtent2D PhysicalDimensions;
        public VkExtent2D PhysicalResolution;
        public VkSurfaceTransformFlagsKHR SupportedTransforms;
        public uint PlaneReorderPossible;
        public uint PersistentContent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplaySurfaceCreateInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDisplaySurfaceCreateFlagsKHR Flags;
        public VkDisplayModeKHR DisplayMode;
        public uint PlaneIndex;
        public uint PlaneStackIndex;
        public VkSurfaceTransformFlagBitsKHR Transform;
        public float GlobalAlpha;
        public VkDisplayPlaneAlphaFlagBitsKHR AlphaMode;
        public VkExtent2D ImageExtent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayPresentInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkRect2D SrcRect;
        public VkRect2D DstRect;
        public uint Persistent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderingFragmentShadingRateAttachmentInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageView ImageView;
        public VkImageLayout ImageLayout;
        public VkExtent2D ShadingRateAttachmentTexelSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderingFragmentDensityMapAttachmentInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageView ImageView;
        public VkImageLayout ImageLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAttachmentSampleCountInfoAMD
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ColorAttachmentCount;
        public unsafe VkSampleCountFlagBits* PColorAttachmentSamples;
        public VkSampleCountFlagBits DepthStencilAttachmentSamples;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMultiviewPerViewAttributesInfoNVX
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PerViewAttributes;
        public uint PerViewAttributesPositionXOnly;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImportMemoryFdInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExternalMemoryHandleTypeFlagBits HandleType;
        public int Fd;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryFdPropertiesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MemoryTypeBits;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryGetFdInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDeviceMemory Memory;
        public VkExternalMemoryHandleTypeFlagBits HandleType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImportSemaphoreFdInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSemaphore Semaphore;
        public VkSemaphoreImportFlags Flags;
        public VkExternalSemaphoreHandleTypeFlagBits HandleType;
        public int Fd;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSemaphoreGetFdInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSemaphore Semaphore;
        public VkExternalSemaphoreHandleTypeFlagBits HandleType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePushDescriptorPropertiesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxPushDescriptors;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRectLayerKHR
    {
        public VkOffset2D Offset;
        public VkExtent2D Extent;
        public uint Layer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPresentRegionKHR
    {
        public uint RectangleCount;
        public unsafe VkRectLayerKHR* PRectangles;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPresentRegionsKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SwapchainCount;
        public unsafe VkPresentRegionKHR* PRegions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSharedPresentSurfaceCapabilitiesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageUsageFlags SharedPresentSupportedUsageFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImportFenceFdInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkFence Fence;
        public VkFenceImportFlags Flags;
        public VkExternalFenceHandleTypeFlagBits HandleType;
        public int Fd;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFenceGetFdInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkFence Fence;
        public VkExternalFenceHandleTypeFlagBits HandleType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePerformanceQueryFeaturesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PerformanceCounterQueryPools;
        public uint PerformanceCounterMultipleQueryPools;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePerformanceQueryPropertiesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint AllowCommandBufferQueryCopies;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPerformanceCounterKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPerformanceCounterUnitKHR Unit;
        public VkPerformanceCounterScopeKHR Scope;
        public VkPerformanceCounterStorageKHR Storage;
        public unsafe fixed byte Uuid[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPerformanceCounterDescriptionKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPerformanceCounterDescriptionFlagsKHR Flags;
        public unsafe fixed byte Name[256];
        public unsafe fixed byte Category[256];
        public unsafe fixed byte Description[256];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkQueryPoolPerformanceCreateInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint QueueFamilyIndex;
        public uint CounterIndexCount;
        public unsafe uint* PCounterIndices;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkPerformanceCounterResultKHR
    {
        [FieldOffset(0)]
        public int Int32;
        [FieldOffset(0)]
        public long Int64;
        [FieldOffset(0)]
        public uint Uint32;
        [FieldOffset(0)]
        public ulong Uint64;
        [FieldOffset(0)]
        public float Float32;
        [FieldOffset(0)]
        public double Float64;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAcquireProfilingLockInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkAcquireProfilingLockFlagsKHR Flags;
        public ulong Timeout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPerformanceQuerySubmitInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint CounterPassIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSurfaceInfo2KHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSurfaceKHR Surface;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSurfaceCapabilities2KHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSurfaceCapabilitiesKHR SurfaceCapabilities;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSurfaceFormat2KHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSurfaceFormatKHR SurfaceFormat;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayProperties2KHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDisplayPropertiesKHR DisplayProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayPlaneProperties2KHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDisplayPlanePropertiesKHR DisplayPlaneProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayModeProperties2KHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDisplayModePropertiesKHR DisplayModeProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayPlaneInfo2KHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDisplayModeKHR Mode;
        public uint PlaneIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayPlaneCapabilities2KHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDisplayPlaneCapabilitiesKHR Capabilities;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderClockFeaturesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderSubgroupClock;
        public uint ShaderDeviceClock;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceQueueGlobalPriorityCreateInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkQueueGlobalPriorityKHR GlobalPriority;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint GlobalPriorityQuery;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkQueueFamilyGlobalPriorityPropertiesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PriorityCount;
        public VkQueueGlobalPriorityKHR Priorities_0;
        public VkQueueGlobalPriorityKHR Priorities_1;
        public VkQueueGlobalPriorityKHR Priorities_2;
        public VkQueueGlobalPriorityKHR Priorities_3;
        public VkQueueGlobalPriorityKHR Priorities_4;
        public VkQueueGlobalPriorityKHR Priorities_5;
        public VkQueueGlobalPriorityKHR Priorities_6;
        public VkQueueGlobalPriorityKHR Priorities_7;
        public VkQueueGlobalPriorityKHR Priorities_8;
        public VkQueueGlobalPriorityKHR Priorities_9;
        public VkQueueGlobalPriorityKHR Priorities_10;
        public VkQueueGlobalPriorityKHR Priorities_11;
        public VkQueueGlobalPriorityKHR Priorities_12;
        public VkQueueGlobalPriorityKHR Priorities_13;
        public VkQueueGlobalPriorityKHR Priorities_14;
        public VkQueueGlobalPriorityKHR Priorities_15;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFragmentShadingRateAttachmentInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public unsafe VkAttachmentReference2* PFragmentShadingRateAttachment;
        public VkExtent2D ShadingRateAttachmentTexelSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineFragmentShadingRateStateCreateInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExtent2D FragmentSize;
        public VkFragmentShadingRateCombinerOpKHR CombinerOps_0;
        public VkFragmentShadingRateCombinerOpKHR CombinerOps_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PipelineFragmentShadingRate;
        public uint PrimitiveFragmentShadingRate;
        public uint AttachmentFragmentShadingRate;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExtent2D MinFragmentShadingRateAttachmentTexelSize;
        public VkExtent2D MaxFragmentShadingRateAttachmentTexelSize;
        public uint MaxFragmentShadingRateAttachmentTexelSizeAspectRatio;
        public uint PrimitiveFragmentShadingRateWithMultipleViewports;
        public uint LayeredShadingRateAttachments;
        public uint FragmentShadingRateNonTrivialCombinerOps;
        public VkExtent2D MaxFragmentSize;
        public uint MaxFragmentSizeAspectRatio;
        public uint MaxFragmentShadingRateCoverageSamples;
        public VkSampleCountFlagBits MaxFragmentShadingRateRasterizationSamples;
        public uint FragmentShadingRateWithShaderDepthStencilWrites;
        public uint FragmentShadingRateWithSampleMask;
        public uint FragmentShadingRateWithShaderSampleMask;
        public uint FragmentShadingRateWithConservativeRasterization;
        public uint FragmentShadingRateWithFragmentShaderInterlock;
        public uint FragmentShadingRateWithCustomSampleLocations;
        public uint FragmentShadingRateStrictMultiplyCombiner;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentShadingRateKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSampleCountFlags SampleCounts;
        public VkExtent2D FragmentSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSurfaceProtectedCapabilitiesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SupportsProtected;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePresentWaitFeaturesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PresentWait;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PipelineExecutableInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipeline Pipeline;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineExecutablePropertiesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkShaderStageFlags Stages;
        public unsafe fixed byte Name[256];
        public unsafe fixed byte Description[256];
        public uint SubgroupSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineExecutableInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipeline Pipeline;
        public uint ExecutableIndex;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkPipelineExecutableStatisticValueKHR
    {
        [FieldOffset(0)]
        public uint B32;
        [FieldOffset(0)]
        public long I64;
        [FieldOffset(0)]
        public ulong U64;
        [FieldOffset(0)]
        public double F64;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineExecutableStatisticKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public unsafe fixed byte Name[256];
        public unsafe fixed byte Description[256];
        public VkPipelineExecutableStatisticFormatKHR Format;
        public VkPipelineExecutableStatisticValueKHR Value;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineExecutableInternalRepresentationKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public unsafe fixed byte Name[256];
        public unsafe fixed byte Description[256];
        public uint IsText;
        public nuint DataSize;
        public unsafe void* PData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineLibraryCreateInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint LibraryCount;
        public unsafe VkPipeline* PLibraries;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPresentIdKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SwapchainCount;
        public unsafe ulong* PPresentIds;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePresentIdFeaturesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PresentId;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkQueueFamilyCheckpointProperties2NV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineStageFlags2 CheckpointExecutionStageMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCheckpointData2NV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineStageFlags2 Stage;
        public unsafe void* PCheckpointMarker;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderSubgroupUniformControlFlow;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint WorkgroupMemoryExplicitLayout;
        public uint WorkgroupMemoryExplicitLayoutScalarBlockLayout;
        public uint WorkgroupMemoryExplicitLayout8BitAccess;
        public uint WorkgroupMemoryExplicitLayout16BitAccess;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugReportCallbackCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDebugReportFlagsEXT Flags;
        public unsafe delegate* unmanaged<VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, nuint, int, byte*, byte*, void*, uint> PfnCallback;
        public unsafe void* PUserData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRasterizationStateRasterizationOrderAMD
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkRasterizationOrderAMD RasterizationOrder;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugMarkerObjectNameInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDebugReportObjectTypeEXT ObjectType;
        public ulong Object;
        public unsafe byte* PObjectName;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugMarkerObjectTagInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDebugReportObjectTypeEXT ObjectType;
        public ulong Object;
        public ulong TagName;
        public nuint TagSize;
        public unsafe void* PTag;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugMarkerMarkerInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public unsafe byte* PMarkerName;
        public unsafe fixed float Color[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDedicatedAllocationImageCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DedicatedAllocation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDedicatedAllocationBufferCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DedicatedAllocation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDedicatedAllocationMemoryAllocateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImage Image;
        public VkBuffer Buffer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceTransformFeedbackFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint TransformFeedback;
        public uint GeometryStreams;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceTransformFeedbackPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxTransformFeedbackStreams;
        public uint MaxTransformFeedbackBuffers;
        public ulong MaxTransformFeedbackBufferSize;
        public uint MaxTransformFeedbackStreamDataSize;
        public uint MaxTransformFeedbackBufferDataSize;
        public uint MaxTransformFeedbackBufferDataStride;
        public uint TransformFeedbackQueries;
        public uint TransformFeedbackStreamsLinesTriangles;
        public uint TransformFeedbackRasterizationStreamSelect;
        public uint TransformFeedbackDraw;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRasterizationStateStreamCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineRasterizationStateStreamCreateFlagsEXT Flags;
        public uint RasterizationStream;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCuModuleCreateInfoNVX
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public nuint DataSize;
        public unsafe void* PData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCuFunctionCreateInfoNVX
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkCuModuleNVX Module;
        public unsafe byte* PName;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCuLaunchInfoNVX
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkCuFunctionNVX Function;
        public uint GridDimX;
        public uint GridDimY;
        public uint GridDimZ;
        public uint BlockDimX;
        public uint BlockDimY;
        public uint BlockDimZ;
        public uint SharedMemBytes;
        public nuint ParamCount;
        public unsafe void** PParams;
        public nuint ExtraCount;
        public unsafe void** PExtras;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageViewHandleInfoNVX
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageView ImageView;
        public VkDescriptorType DescriptorType;
        public VkSampler Sampler;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageViewAddressPropertiesNVX
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong DeviceAddress;
        public ulong Size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkTextureLODGatherFormatPropertiesAMD
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SupportsTextureGatherLODBiasAMD;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkShaderResourceUsageAMD
    {
        public uint NumUsedVgprs;
        public uint NumUsedSgprs;
        public uint LdsSizePerLocalWorkGroup;
        public nuint LdsUsageSizeInBytes;
        public nuint ScratchMemUsageInBytes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkShaderStatisticsInfoAMD
    {
        public VkShaderStageFlags ShaderStageMask;
        public VkShaderResourceUsageAMD ResourceUsage;
        public uint NumPhysicalVgprs;
        public uint NumPhysicalSgprs;
        public uint NumAvailableVgprs;
        public uint NumAvailableSgprs;
        public unsafe fixed uint ComputeWorkGroupSize[3];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceCornerSampledImageFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint CornerSampledImage;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalImageFormatPropertiesNV
    {
        public VkImageFormatProperties ImageFormatProperties;
        public VkExternalMemoryFeatureFlagsNV ExternalMemoryFeatures;
        public VkExternalMemoryHandleTypeFlagsNV ExportFromImportedHandleTypes;
        public VkExternalMemoryHandleTypeFlagsNV CompatibleHandleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalMemoryImageCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExternalMemoryHandleTypeFlagsNV HandleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExportMemoryAllocateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExternalMemoryHandleTypeFlagsNV HandleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkValidationFlagsEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DisabledValidationCheckCount;
        public unsafe VkValidationCheckEXT* PDisabledValidationChecks;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageViewASTCDecodeModeEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkFormat DecodeMode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceASTCDecodeFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DecodeModeSharedExponent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkConditionalRenderingBeginInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkBuffer Buffer;
        public ulong Offset;
        public VkConditionalRenderingFlagsEXT Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceConditionalRenderingFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ConditionalRendering;
        public uint InheritedConditionalRendering;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandBufferInheritanceConditionalRenderingInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ConditionalRenderingEnable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkViewportWScalingNV
    {
        public float Xcoeff;
        public float Ycoeff;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineViewportWScalingStateCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ViewportWScalingEnable;
        public uint ViewportCount;
        public unsafe VkViewportWScalingNV* PViewportWScalings;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSurfaceCapabilities2EXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MinImageCount;
        public uint MaxImageCount;
        public VkExtent2D CurrentExtent;
        public VkExtent2D MinImageExtent;
        public VkExtent2D MaxImageExtent;
        public uint MaxImageArrayLayers;
        public VkSurfaceTransformFlagsKHR SupportedTransforms;
        public VkSurfaceTransformFlagBitsKHR CurrentTransform;
        public VkCompositeAlphaFlagsKHR SupportedCompositeAlpha;
        public VkImageUsageFlags SupportedUsageFlags;
        public VkSurfaceCounterFlagsEXT SupportedSurfaceCounters;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayPowerInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDisplayPowerStateEXT PowerState;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceEventInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDeviceEventTypeEXT DeviceEvent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayEventInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDisplayEventTypeEXT DisplayEvent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSwapchainCounterCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSurfaceCounterFlagsEXT SurfaceCounters;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRefreshCycleDurationGOOGLE
    {
        public ulong RefreshDuration;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPastPresentationTimingGOOGLE
    {
        public uint PresentID;
        public ulong DesiredPresentTime;
        public ulong ActualPresentTime;
        public ulong EarliestPresentTime;
        public ulong PresentMargin;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPresentTimeGOOGLE
    {
        public uint PresentID;
        public ulong DesiredPresentTime;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPresentTimesInfoGOOGLE
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SwapchainCount;
        public unsafe VkPresentTimeGOOGLE* PTimes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PerViewPositionAllComponents;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkViewportSwizzleNV
    {
        public VkViewportCoordinateSwizzleNV X;
        public VkViewportCoordinateSwizzleNV Y;
        public VkViewportCoordinateSwizzleNV Z;
        public VkViewportCoordinateSwizzleNV W;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineViewportSwizzleStateCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineViewportSwizzleStateCreateFlagsNV Flags;
        public uint ViewportCount;
        public unsafe VkViewportSwizzleNV* PViewportSwizzles;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDiscardRectanglePropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxDiscardRectangles;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineDiscardRectangleStateCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineDiscardRectangleStateCreateFlagsEXT Flags;
        public VkDiscardRectangleModeEXT DiscardRectangleMode;
        public uint DiscardRectangleCount;
        public unsafe VkRect2D* PDiscardRectangles;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public float PrimitiveOverestimationSize;
        public float MaxExtraPrimitiveOverestimationSize;
        public float ExtraPrimitiveOverestimationSizeGranularity;
        public uint PrimitiveUnderestimation;
        public uint ConservativePointAndLineRasterization;
        public uint DegenerateTrianglesRasterized;
        public uint DegenerateLinesRasterized;
        public uint FullyCoveredFragmentShaderInputVariable;
        public uint ConservativeRasterizationPostDepthCoverage;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRasterizationConservativeStateCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineRasterizationConservativeStateCreateFlagsEXT Flags;
        public VkConservativeRasterizationModeEXT ConservativeRasterizationMode;
        public float ExtraPrimitiveOverestimationSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDepthClipEnableFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DepthClipEnable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRasterizationDepthClipStateCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineRasterizationDepthClipStateCreateFlagsEXT Flags;
        public uint DepthClipEnable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkXYColorEXT
    {
        public float X;
        public float Y;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkHdrMetadataEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkXYColorEXT DisplayPrimaryRed;
        public VkXYColorEXT DisplayPrimaryGreen;
        public VkXYColorEXT DisplayPrimaryBlue;
        public VkXYColorEXT WhitePoint;
        public float MaxLuminance;
        public float MinLuminance;
        public float MaxContentLightLevel;
        public float MaxFrameAverageLightLevel;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugUtilsLabelEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public unsafe byte* PLabelName;
        public unsafe fixed float Color[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugUtilsObjectNameInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkObjectType ObjectType;
        public ulong ObjectHandle;
        public unsafe byte* PObjectName;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugUtilsMessengerCallbackDataEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDebugUtilsMessengerCallbackDataFlagsEXT Flags;
        public unsafe byte* PMessageIdName;
        public int MessageIdNumber;
        public unsafe byte* PMessage;
        public uint QueueLabelCount;
        public unsafe VkDebugUtilsLabelEXT* PQueueLabels;
        public uint CmdBufLabelCount;
        public unsafe VkDebugUtilsLabelEXT* PCmdBufLabels;
        public uint ObjectCount;
        public unsafe VkDebugUtilsObjectNameInfoEXT* PObjects;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugUtilsMessengerCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDebugUtilsMessengerCreateFlagsEXT Flags;
        public VkDebugUtilsMessageSeverityFlagsEXT MessageSeverity;
        public VkDebugUtilsMessageTypeFlagsEXT MessageType;
        public unsafe delegate* unmanaged<VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void*, uint> PfnUserCallback;
        public unsafe void* PUserData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugUtilsObjectTagInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkObjectType ObjectType;
        public ulong ObjectHandle;
        public ulong TagName;
        public nuint TagSize;
        public unsafe void* PTag;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSampleLocationEXT
    {
        public float X;
        public float Y;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSampleLocationsInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSampleCountFlagBits SampleLocationsPerPixel;
        public VkExtent2D SampleLocationGridSize;
        public uint SampleLocationsCount;
        public unsafe VkSampleLocationEXT* PSampleLocations;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAttachmentSampleLocationsEXT
    {
        public uint AttachmentIndex;
        public VkSampleLocationsInfoEXT SampleLocationsInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassSampleLocationsEXT
    {
        public uint SubpassIndex;
        public VkSampleLocationsInfoEXT SampleLocationsInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassSampleLocationsBeginInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint AttachmentInitialSampleLocationsCount;
        public unsafe VkAttachmentSampleLocationsEXT* PAttachmentInitialSampleLocations;
        public uint PostSubpassSampleLocationsCount;
        public unsafe VkSubpassSampleLocationsEXT* PPostSubpassSampleLocations;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineSampleLocationsStateCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SampleLocationsEnable;
        public VkSampleLocationsInfoEXT SampleLocationsInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSampleLocationsPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSampleCountFlags SampleLocationSampleCounts;
        public VkExtent2D MaxSampleLocationGridSize;
        public unsafe fixed float SampleLocationCoordinateRange[2];
        public uint SampleLocationSubPixelBits;
        public uint VariableSampleLocations;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMultisamplePropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExtent2D MaxSampleLocationGridSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint AdvancedBlendCoherentOperations;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint AdvancedBlendMaxColorAttachments;
        public uint AdvancedBlendIndependentBlend;
        public uint AdvancedBlendNonPremultipliedSrcColor;
        public uint AdvancedBlendNonPremultipliedDstColor;
        public uint AdvancedBlendCorrelatedOverlap;
        public uint AdvancedBlendAllOperations;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineColorBlendAdvancedStateCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SrcPremultiplied;
        public uint DstPremultiplied;
        public VkBlendOverlapEXT BlendOverlap;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineCoverageToColorStateCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineCoverageToColorStateCreateFlagsNV Flags;
        public uint CoverageToColorEnable;
        public uint CoverageToColorLocation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineCoverageModulationStateCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineCoverageModulationStateCreateFlagsNV Flags;
        public VkCoverageModulationModeNV CoverageModulationMode;
        public uint CoverageModulationTableEnable;
        public uint CoverageModulationTableCount;
        public unsafe float* PCoverageModulationTable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderSMCount;
        public uint ShaderWarpsPerSM;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderSMBuiltins;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDrmFormatModifierPropertiesEXT
    {
        public ulong DrmFormatModifier;
        public uint DrmFormatModifierPlaneCount;
        public VkFormatFeatureFlags DrmFormatModifierTilingFeatures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDrmFormatModifierPropertiesListEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DrmFormatModifierCount;
        public unsafe VkDrmFormatModifierPropertiesEXT* PDrmFormatModifierProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong DrmFormatModifier;
        public VkSharingMode SharingMode;
        public uint QueueFamilyIndexCount;
        public unsafe uint* PQueueFamilyIndices;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageDrmFormatModifierListCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DrmFormatModifierCount;
        public unsafe ulong* PDrmFormatModifiers;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageDrmFormatModifierExplicitCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong DrmFormatModifier;
        public uint DrmFormatModifierPlaneCount;
        public unsafe VkSubresourceLayout* PPlaneLayouts;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageDrmFormatModifierPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong DrmFormatModifier;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDrmFormatModifierProperties2EXT
    {
        public ulong DrmFormatModifier;
        public uint DrmFormatModifierPlaneCount;
        public VkFormatFeatureFlags2 DrmFormatModifierTilingFeatures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDrmFormatModifierPropertiesList2EXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DrmFormatModifierCount;
        public unsafe VkDrmFormatModifierProperties2EXT* PDrmFormatModifierProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkValidationCacheCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkValidationCacheCreateFlagsEXT Flags;
        public nuint InitialDataSize;
        public unsafe void* PInitialData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkShaderModuleValidationCacheCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkValidationCacheEXT ValidationCache;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkShadingRatePaletteNV
    {
        public uint ShadingRatePaletteEntryCount;
        public unsafe VkShadingRatePaletteEntryNV* PShadingRatePaletteEntries;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineViewportShadingRateImageStateCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShadingRateImageEnable;
        public uint ViewportCount;
        public unsafe VkShadingRatePaletteNV* PShadingRatePalettes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShadingRateImageFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShadingRateImage;
        public uint ShadingRateCoarseSampleOrder;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShadingRateImagePropertiesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExtent2D ShadingRateTexelSize;
        public uint ShadingRatePaletteSize;
        public uint ShadingRateMaxCoarseSamples;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCoarseSampleLocationNV
    {
        public uint PixelX;
        public uint PixelY;
        public uint Sample;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCoarseSampleOrderCustomNV
    {
        public VkShadingRatePaletteEntryNV ShadingRate;
        public uint SampleCount;
        public uint SampleLocationCount;
        public unsafe VkCoarseSampleLocationNV* PSampleLocations;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkCoarseSampleOrderTypeNV SampleOrderType;
        public uint CustomSampleOrderCount;
        public unsafe VkCoarseSampleOrderCustomNV* PCustomSampleOrders;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRayTracingShaderGroupCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkRayTracingShaderGroupTypeKHR Type;
        public uint GeneralShader;
        public uint ClosestHitShader;
        public uint AnyHitShader;
        public uint IntersectionShader;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRayTracingPipelineCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineCreateFlags Flags;
        public uint StageCount;
        public unsafe VkPipelineShaderStageCreateInfo* PStages;
        public uint GroupCount;
        public unsafe VkRayTracingShaderGroupCreateInfoNV* PGroups;
        public uint MaxRecursionDepth;
        public VkPipelineLayout Layout;
        public VkPipeline BasePipelineHandle;
        public int BasePipelineIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGeometryTrianglesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkBuffer VertexData;
        public ulong VertexOffset;
        public uint VertexCount;
        public ulong VertexStride;
        public VkFormat VertexFormat;
        public VkBuffer IndexData;
        public ulong IndexOffset;
        public uint IndexCount;
        public VkIndexType IndexType;
        public VkBuffer TransformData;
        public ulong TransformOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGeometryAABBNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkBuffer AabbData;
        public uint NumAABBs;
        public uint Stride;
        public ulong Offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGeometryDataNV
    {
        public VkGeometryTrianglesNV Triangles;
        public VkGeometryAABBNV Aabbs;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGeometryNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkGeometryTypeKHR GeometryType;
        public VkGeometryDataNV Geometry;
        public VkGeometryFlagsKHR Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkAccelerationStructureTypeKHR Type;
        public VkBuildAccelerationStructureFlagsNV Flags;
        public uint InstanceCount;
        public uint GeometryCount;
        public unsafe VkGeometryNV* PGeometries;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong CompactedSize;
        public VkAccelerationStructureInfoNV Info;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindAccelerationStructureMemoryInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkAccelerationStructureNV AccelerationStructure;
        public VkDeviceMemory Memory;
        public ulong MemoryOffset;
        public uint DeviceIndexCount;
        public unsafe uint* PDeviceIndices;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkWriteDescriptorSetAccelerationStructureNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint AccelerationStructureCount;
        public unsafe VkAccelerationStructureNV* PAccelerationStructures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureMemoryRequirementsInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkAccelerationStructureMemoryRequirementsTypeNV Type;
        public VkAccelerationStructureNV AccelerationStructure;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRayTracingPropertiesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderGroupHandleSize;
        public uint MaxRecursionDepth;
        public uint MaxShaderGroupStride;
        public uint ShaderGroupBaseAlignment;
        public ulong MaxGeometryCount;
        public ulong MaxInstanceCount;
        public ulong MaxTriangleCount;
        public uint MaxDescriptorSetAccelerationStructures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkTransformMatrixKHR
    {
        public unsafe float* Matrix_0;
        public unsafe float* Matrix_1;
        public unsafe float* Matrix_2;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAabbPositionsKHR
    {
        public float MinX;
        public float MinY;
        public float MinZ;
        public float MaxX;
        public float MaxY;
        public float MaxZ;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureInstanceKHR
    {
        public VkTransformMatrixKHR Transform;
        public uint InstanceCustomIndex;
        public uint Mask;
        public uint InstanceShaderBindingTableRecordOffset;
        public VkGeometryInstanceFlagsKHR Flags;
        public ulong AccelerationStructureReference;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint RepresentativeFragmentTest;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint RepresentativeFragmentTestEnable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceImageViewImageFormatInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkImageViewType ImageViewType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFilterCubicImageViewImageFormatPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint FilterCubic;
        public uint FilterCubicMinmax;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImportMemoryHostPointerInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExternalMemoryHandleTypeFlagBits HandleType;
        public unsafe void* PHostPointer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryHostPointerPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MemoryTypeBits;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong MinImportedHostPointerAlignment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineCompilerControlCreateInfoAMD
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineCompilerControlFlagsAMD CompilerControlFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCalibratedTimestampInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkTimeDomainEXT TimeDomain;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderCorePropertiesAMD
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderEngineCount;
        public uint ShaderArraysPerEngineCount;
        public uint ComputeUnitsPerShaderArray;
        public uint SimdPerComputeUnit;
        public uint WavefrontsPerSimd;
        public uint WavefrontSize;
        public uint SgprsPerSimd;
        public uint MinSgprAllocation;
        public uint MaxSgprAllocation;
        public uint SgprAllocationGranularity;
        public uint VgprsPerSimd;
        public uint MinVgprAllocation;
        public uint MaxVgprAllocation;
        public uint VgprAllocationGranularity;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceMemoryOverallocationCreateInfoAMD
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkMemoryOverallocationBehaviorAMD OverallocationBehavior;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxVertexAttribDivisor;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkVertexInputBindingDivisorDescriptionEXT
    {
        public uint Binding;
        public uint Divisor;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineVertexInputDivisorStateCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint VertexBindingDivisorCount;
        public unsafe VkVertexInputBindingDivisorDescriptionEXT* PVertexBindingDivisors;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint VertexAttributeInstanceRateDivisor;
        public uint VertexAttributeInstanceRateZeroDivisor;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ComputeDerivativeGroupQuads;
        public uint ComputeDerivativeGroupLinear;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMeshShaderFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint TaskShader;
        public uint MeshShader;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMeshShaderPropertiesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxDrawMeshTasksCount;
        public uint MaxTaskWorkGroupInvocations;
        public unsafe fixed uint MaxTaskWorkGroupSize[3];
        public uint MaxTaskTotalMemorySize;
        public uint MaxTaskOutputCount;
        public uint MaxMeshWorkGroupInvocations;
        public unsafe fixed uint MaxMeshWorkGroupSize[3];
        public uint MaxMeshTotalMemorySize;
        public uint MaxMeshOutputVertices;
        public uint MaxMeshOutputPrimitives;
        public uint MaxMeshMultiviewViewCount;
        public uint MeshOutputPerVertexGranularity;
        public uint MeshOutputPerPrimitiveGranularity;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDrawMeshTasksIndirectCommandNV
    {
        public uint TaskCount;
        public uint FirstTask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint FragmentShaderBarycentric;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderImageFootprintFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ImageFootprint;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineViewportExclusiveScissorStateCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ExclusiveScissorCount;
        public unsafe VkRect2D* PExclusiveScissors;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExclusiveScissorFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ExclusiveScissor;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkQueueFamilyCheckpointPropertiesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineStageFlags CheckpointExecutionStageMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCheckpointDataNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineStageFlagBits Stage;
        public unsafe void* PCheckpointMarker;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderIntegerFunctions2;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkPerformanceValueDataINTEL
    {
        [FieldOffset(0)]
        public uint Value32;
        [FieldOffset(0)]
        public ulong Value64;
        [FieldOffset(0)]
        public float ValueFloat;
        [FieldOffset(0)]
        public uint ValueBool;
        [FieldOffset(0)]
        public unsafe byte* ValueString;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPerformanceValueINTEL
    {
        public VkPerformanceValueTypeINTEL Type;
        public VkPerformanceValueDataINTEL Data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkInitializePerformanceApiInfoINTEL
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public unsafe void* PUserData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkQueryPoolPerformanceQueryCreateInfoINTEL
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkQueryPoolSamplingModeINTEL PerformanceCountersSampling;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPerformanceMarkerInfoINTEL
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong Marker;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPerformanceStreamMarkerInfoINTEL
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint Marker;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPerformanceOverrideInfoINTEL
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPerformanceOverrideTypeINTEL Type;
        public uint Enable;
        public ulong Parameter;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPerformanceConfigurationAcquireInfoINTEL
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPerformanceConfigurationTypeINTEL Type;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePCIBusInfoPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PciDomain;
        public uint PciBus;
        public uint PciDevice;
        public uint PciFunction;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayNativeHdrSurfaceCapabilitiesAMD
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint LocalDimmingSupport;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSwapchainDisplayNativeHdrCreateInfoAMD
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint LocalDimmingEnable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint FragmentDensityMap;
        public uint FragmentDensityMapDynamic;
        public uint FragmentDensityMapNonSubsampledImages;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExtent2D MinFragmentDensityTexelSize;
        public VkExtent2D MaxFragmentDensityTexelSize;
        public uint FragmentDensityInvocations;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassFragmentDensityMapCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkAttachmentReference FragmentDensityMapAttachment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderCoreProperties2AMD
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkShaderCorePropertiesFlagsAMD ShaderCoreFeatures;
        public uint ActiveComputeUnitCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceCoherentMemoryFeaturesAMD
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DeviceCoherentMemory;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderImageInt64Atomics;
        public uint SparseImageInt64Atomics;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMemoryBudgetPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong HeapBudget_0;
        public ulong HeapBudget_1;
        public ulong HeapBudget_2;
        public ulong HeapBudget_3;
        public ulong HeapBudget_4;
        public ulong HeapBudget_5;
        public ulong HeapBudget_6;
        public ulong HeapBudget_7;
        public ulong HeapBudget_8;
        public ulong HeapBudget_9;
        public ulong HeapBudget_10;
        public ulong HeapBudget_11;
        public ulong HeapBudget_12;
        public ulong HeapBudget_13;
        public ulong HeapBudget_14;
        public ulong HeapBudget_15;
        public ulong HeapUsage_0;
        public ulong HeapUsage_1;
        public ulong HeapUsage_2;
        public ulong HeapUsage_3;
        public ulong HeapUsage_4;
        public ulong HeapUsage_5;
        public ulong HeapUsage_6;
        public ulong HeapUsage_7;
        public ulong HeapUsage_8;
        public ulong HeapUsage_9;
        public ulong HeapUsage_10;
        public ulong HeapUsage_11;
        public ulong HeapUsage_12;
        public ulong HeapUsage_13;
        public ulong HeapUsage_14;
        public ulong HeapUsage_15;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMemoryPriorityFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MemoryPriority;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryPriorityAllocateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public float Priority;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DedicatedAllocationImageAliasing;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint BufferDeviceAddress;
        public uint BufferDeviceAddressCaptureReplay;
        public uint BufferDeviceAddressMultiDevice;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferDeviceAddressCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong DeviceAddress;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkValidationFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint EnabledValidationFeatureCount;
        public unsafe VkValidationFeatureEnableEXT* PEnabledValidationFeatures;
        public uint DisabledValidationFeatureCount;
        public unsafe VkValidationFeatureDisableEXT* PDisabledValidationFeatures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCooperativeMatrixPropertiesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MSize;
        public uint NSize;
        public uint KSize;
        public VkComponentTypeNV AType;
        public VkComponentTypeNV BType;
        public VkComponentTypeNV CType;
        public VkComponentTypeNV DType;
        public VkScopeNV Scope;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceCooperativeMatrixFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint CooperativeMatrix;
        public uint CooperativeMatrixRobustBufferAccess;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceCooperativeMatrixPropertiesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkShaderStageFlags CooperativeMatrixSupportedStages;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceCoverageReductionModeFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint CoverageReductionMode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineCoverageReductionStateCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineCoverageReductionStateCreateFlagsNV Flags;
        public VkCoverageReductionModeNV CoverageReductionMode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFramebufferMixedSamplesCombinationNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkCoverageReductionModeNV CoverageReductionMode;
        public VkSampleCountFlagBits RasterizationSamples;
        public VkSampleCountFlags DepthStencilSamples;
        public VkSampleCountFlags ColorSamples;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint FragmentShaderSampleInterlock;
        public uint FragmentShaderPixelInterlock;
        public uint FragmentShaderShadingRateInterlock;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint YcbcrImageArrays;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceProvokingVertexFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ProvokingVertexLast;
        public uint TransformFeedbackPreservesProvokingVertex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceProvokingVertexPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ProvokingVertexModePerPipeline;
        public uint TransformFeedbackPreservesTriangleFanProvokingVertex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkProvokingVertexModeEXT ProvokingVertexMode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkHeadlessSurfaceCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkHeadlessSurfaceCreateFlagsEXT Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceLineRasterizationFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint RectangularLines;
        public uint BresenhamLines;
        public uint SmoothLines;
        public uint StippledRectangularLines;
        public uint StippledBresenhamLines;
        public uint StippledSmoothLines;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceLineRasterizationPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint LineSubPixelPrecisionBits;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRasterizationLineStateCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkLineRasterizationModeEXT LineRasterizationMode;
        public uint StippledLineEnable;
        public uint LineStippleFactor;
        public ushort LineStipplePattern;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderBufferFloat32Atomics;
        public uint ShaderBufferFloat32AtomicAdd;
        public uint ShaderBufferFloat64Atomics;
        public uint ShaderBufferFloat64AtomicAdd;
        public uint ShaderSharedFloat32Atomics;
        public uint ShaderSharedFloat32AtomicAdd;
        public uint ShaderSharedFloat64Atomics;
        public uint ShaderSharedFloat64AtomicAdd;
        public uint ShaderImageFloat32Atomics;
        public uint ShaderImageFloat32AtomicAdd;
        public uint SparseImageFloat32Atomics;
        public uint SparseImageFloat32AtomicAdd;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint IndexTypeUint8;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ExtendedDynamicState;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderBufferFloat16Atomics;
        public uint ShaderBufferFloat16AtomicAdd;
        public uint ShaderBufferFloat16AtomicMinMax;
        public uint ShaderBufferFloat32AtomicMinMax;
        public uint ShaderBufferFloat64AtomicMinMax;
        public uint ShaderSharedFloat16Atomics;
        public uint ShaderSharedFloat16AtomicAdd;
        public uint ShaderSharedFloat16AtomicMinMax;
        public uint ShaderSharedFloat32AtomicMinMax;
        public uint ShaderSharedFloat64AtomicMinMax;
        public uint ShaderImageFloat32AtomicMinMax;
        public uint SparseImageFloat32AtomicMinMax;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxGraphicsShaderGroupCount;
        public uint MaxIndirectSequenceCount;
        public uint MaxIndirectCommandsTokenCount;
        public uint MaxIndirectCommandsStreamCount;
        public uint MaxIndirectCommandsTokenOffset;
        public uint MaxIndirectCommandsStreamStride;
        public uint MinSequencesCountBufferOffsetAlignment;
        public uint MinSequencesIndexBufferOffsetAlignment;
        public uint MinIndirectCommandsBufferOffsetAlignment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DeviceGeneratedCommands;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGraphicsShaderGroupCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint StageCount;
        public unsafe VkPipelineShaderStageCreateInfo* PStages;
        public unsafe VkPipelineVertexInputStateCreateInfo* PVertexInputState;
        public unsafe VkPipelineTessellationStateCreateInfo* PTessellationState;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGraphicsPipelineShaderGroupsCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint GroupCount;
        public unsafe VkGraphicsShaderGroupCreateInfoNV* PGroups;
        public uint PipelineCount;
        public unsafe VkPipeline* PPipelines;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindShaderGroupIndirectCommandNV
    {
        public uint GroupIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindIndexBufferIndirectCommandNV
    {
        public ulong BufferAddress;
        public uint Size;
        public VkIndexType IndexType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindVertexBufferIndirectCommandNV
    {
        public ulong BufferAddress;
        public uint Size;
        public uint Stride;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSetStateFlagsIndirectCommandNV
    {
        public uint Data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkIndirectCommandsStreamNV
    {
        public VkBuffer Buffer;
        public ulong Offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkIndirectCommandsLayoutTokenNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkIndirectCommandsTokenTypeNV TokenType;
        public uint Stream;
        public uint Offset;
        public uint VertexBindingUnit;
        public uint VertexDynamicStride;
        public VkPipelineLayout PushconstantPipelineLayout;
        public VkShaderStageFlags PushconstantShaderStageFlags;
        public uint PushconstantOffset;
        public uint PushconstantSize;
        public VkIndirectStateFlagsNV IndirectStateFlags;
        public uint IndexTypeCount;
        public unsafe VkIndexType* PIndexTypes;
        public unsafe uint* PIndexTypeValues;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkIndirectCommandsLayoutCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkIndirectCommandsLayoutUsageFlagsNV Flags;
        public VkPipelineBindPoint PipelineBindPoint;
        public uint TokenCount;
        public unsafe VkIndirectCommandsLayoutTokenNV* PTokens;
        public uint StreamCount;
        public unsafe uint* PStreamStrides;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGeneratedCommandsInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineBindPoint PipelineBindPoint;
        public VkPipeline Pipeline;
        public VkIndirectCommandsLayoutNV IndirectCommandsLayout;
        public uint StreamCount;
        public unsafe VkIndirectCommandsStreamNV* PStreams;
        public uint SequencesCount;
        public VkBuffer PreprocessBuffer;
        public ulong PreprocessOffset;
        public ulong PreprocessSize;
        public VkBuffer SequencesCountBuffer;
        public ulong SequencesCountOffset;
        public VkBuffer SequencesIndexBuffer;
        public ulong SequencesIndexOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGeneratedCommandsMemoryRequirementsInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineBindPoint PipelineBindPoint;
        public VkPipeline Pipeline;
        public VkIndirectCommandsLayoutNV IndirectCommandsLayout;
        public uint MaxSequencesCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint InheritedViewportScissor2D;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandBufferInheritanceViewportScissorInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ViewportScissor2D;
        public uint ViewportDepthCount;
        public unsafe VkViewport* PViewportDepths;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint TexelBufferAlignment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassTransformBeginInfoQCOM
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSurfaceTransformFlagBitsKHR Transform;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSurfaceTransformFlagBitsKHR Transform;
        public VkRect2D RenderArea;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DeviceMemoryReport;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceMemoryReportCallbackDataEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDeviceMemoryReportFlagsEXT Flags;
        public VkDeviceMemoryReportEventTypeEXT Type;
        public ulong MemoryObjectId;
        public ulong Size;
        public VkObjectType ObjectType;
        public ulong ObjectHandle;
        public uint HeapIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceDeviceMemoryReportCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDeviceMemoryReportFlagsEXT Flags;
        public unsafe delegate* unmanaged<VkDeviceMemoryReportCallbackDataEXT*, void*, void> PfnUserCallback;
        public unsafe void* PUserData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRobustness2FeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint RobustBufferAccess2;
        public uint RobustImageAccess2;
        public uint NullDescriptor;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRobustness2PropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong RobustStorageBufferAccessSizeAlignment;
        public ulong RobustUniformBufferAccessSizeAlignment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSamplerCustomBorderColorCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkClearColorValue CustomBorderColor;
        public VkFormat Format;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceCustomBorderColorPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxCustomBorderColorSamplers;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceCustomBorderColorFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint CustomBorderColors;
        public uint CustomBorderColorWithoutFormat;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DiagnosticsConfig;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceDiagnosticsConfigCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDeviceDiagnosticsConfigFlagsNV Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint FragmentShadingRateEnums;
        public uint SupersampleFragmentShadingRates;
        public uint NoInvocationFragmentShadingRates;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSampleCountFlagBits MaxFragmentShadingRateInvocationCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkFragmentShadingRateTypeNV ShadingRateType;
        public VkFragmentShadingRateNV ShadingRate;
        public VkFragmentShadingRateCombinerOpKHR CombinerOps_0;
        public VkFragmentShadingRateCombinerOpKHR CombinerOps_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkDeviceOrHostAddressConstKHR
    {
        [FieldOffset(0)]
        public ulong DeviceAddress;
        [FieldOffset(0)]
        public unsafe void* HostAddress;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureGeometryMotionTrianglesDataNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDeviceOrHostAddressConstKHR VertexData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureMotionInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxInstances;
        public VkAccelerationStructureMotionInfoFlagsNV Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureMatrixMotionInstanceNV
    {
        public VkTransformMatrixKHR TransformT0;
        public VkTransformMatrixKHR TransformT1;
        public uint InstanceCustomIndex;
        public uint Mask;
        public uint InstanceShaderBindingTableRecordOffset;
        public VkGeometryInstanceFlagsKHR Flags;
        public ulong AccelerationStructureReference;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSRTDataNV
    {
        public float Sx;
        public float A;
        public float B;
        public float Pvx;
        public float Sy;
        public float C;
        public float Pvy;
        public float Sz;
        public float Pvz;
        public float Qx;
        public float Qy;
        public float Qz;
        public float Qw;
        public float Tx;
        public float Ty;
        public float Tz;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureSRTMotionInstanceNV
    {
        public VkSRTDataNV TransformT0;
        public VkSRTDataNV TransformT1;
        public uint InstanceCustomIndex;
        public uint Mask;
        public uint InstanceShaderBindingTableRecordOffset;
        public VkGeometryInstanceFlagsKHR Flags;
        public ulong AccelerationStructureReference;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkAccelerationStructureMotionInstanceDataNV
    {
        [FieldOffset(0)]
        public VkAccelerationStructureInstanceKHR StaticInstance;
        [FieldOffset(0)]
        public VkAccelerationStructureMatrixMotionInstanceNV MatrixMotionInstance;
        [FieldOffset(0)]
        public VkAccelerationStructureSRTMotionInstanceNV SrtMotionInstance;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureMotionInstanceNV
    {
        public VkAccelerationStructureMotionInstanceTypeNV Type;
        public VkAccelerationStructureMotionInstanceFlagsNV Flags;
        public VkAccelerationStructureMotionInstanceDataNV Data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint RayTracingMotionBlur;
        public uint RayTracingMotionBlurPipelineTraceRaysIndirect;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint Ycbcr2plane444Formats;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint FragmentDensityMapDeferred;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SubsampledLoads;
        public uint SubsampledCoarseReconstructionEarlyAccess;
        public uint MaxSubsampledArrayLayers;
        public uint MaxDescriptorSetSubsampledSamplers;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyCommandTransformInfoQCOM
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkSurfaceTransformFlagBitsKHR Transform;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevice4444FormatsFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint FormatA4R4G4B4;
        public uint FormatA4B4G4R4;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint RasterizationOrderColorAttachmentAccess;
        public uint RasterizationOrderDepthAttachmentAccess;
        public uint RasterizationOrderStencilAttachmentAccess;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint FormatRgba10x6WithoutYCbCrSampler;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MutableDescriptorType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMutableDescriptorTypeListVALVE
    {
        public uint DescriptorTypeCount;
        public unsafe VkDescriptorType* PDescriptorTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMutableDescriptorTypeCreateInfoVALVE
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MutableDescriptorTypeListCount;
        public unsafe VkMutableDescriptorTypeListVALVE* PMutableDescriptorTypeLists;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint VertexInputDynamicState;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkVertexInputBindingDescription2EXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint Binding;
        public uint Stride;
        public VkVertexInputRate InputRate;
        public uint Divisor;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkVertexInputAttributeDescription2EXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint Location;
        public uint Binding;
        public VkFormat Format;
        public uint Offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDrmPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint HasPrimary;
        public uint HasRender;
        public long PrimaryMajor;
        public long PrimaryMinor;
        public long RenderMajor;
        public long RenderMinor;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDepthClipControlFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint DepthClipControl;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineViewportDepthClipControlCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint NegativeOneToOne;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PrimitiveTopologyListRestart;
        public uint PrimitiveTopologyPatchListRestart;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassShadingPipelineCreateInfoHUAWEI
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkRenderPass RenderPass;
        public uint Subpass;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint SubpassShading;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxSubpassShadingWorkgroupSizeAspectRatio;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint InvocationMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryGetRemoteAddressInfoNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDeviceMemory Memory;
        public VkExternalMemoryHandleTypeFlagBits HandleType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ExternalMemoryRDMA;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ExtendedDynamicState2;
        public uint ExtendedDynamicState2LogicOp;
        public uint ExtendedDynamicState2PatchControlPoints;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceColorWriteEnableFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ColorWriteEnable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineColorWriteCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint AttachmentCount;
        public unsafe uint* PColorWriteEnables;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceImageViewMinLodFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MinLod;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageViewMinLodCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public float MinLod;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMultiDrawFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MultiDraw;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMultiDrawPropertiesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxMultiDrawCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMultiDrawInfoEXT
    {
        public uint FirstVertex;
        public uint VertexCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMultiDrawIndexedInfoEXT
    {
        public uint FirstIndex;
        public uint IndexCount;
        public int VertexOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint BorderColorSwizzle;
        public uint BorderColorSwizzleFromImage;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSamplerBorderColorComponentMappingCreateInfoEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkComponentMapping Components;
        public uint Srgb;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint PageableDeviceLocalMemory;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint FragmentDensityMapOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkExtent2D FragmentDensityOffsetGranularity;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint FragmentDensityOffsetCount;
        public unsafe VkOffset2D* PFragmentDensityOffsets;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint LinearColorAttachment;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkDeviceOrHostAddressKHR
    {
        [FieldOffset(0)]
        public ulong DeviceAddress;
        [FieldOffset(0)]
        public unsafe void* HostAddress;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureBuildRangeInfoKHR
    {
        public uint PrimitiveCount;
        public uint PrimitiveOffset;
        public uint FirstVertex;
        public uint TransformOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureGeometryTrianglesDataKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkFormat VertexFormat;
        public VkDeviceOrHostAddressConstKHR VertexData;
        public ulong VertexStride;
        public uint MaxVertex;
        public VkIndexType IndexType;
        public VkDeviceOrHostAddressConstKHR IndexData;
        public VkDeviceOrHostAddressConstKHR TransformData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureGeometryAabbsDataKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDeviceOrHostAddressConstKHR Data;
        public ulong Stride;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureGeometryInstancesDataKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ArrayOfPointers;
        public VkDeviceOrHostAddressConstKHR Data;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkAccelerationStructureGeometryDataKHR
    {
        [FieldOffset(0)]
        public VkAccelerationStructureGeometryTrianglesDataKHR Triangles;
        [FieldOffset(0)]
        public VkAccelerationStructureGeometryAabbsDataKHR Aabbs;
        [FieldOffset(0)]
        public VkAccelerationStructureGeometryInstancesDataKHR Instances;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureGeometryKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkGeometryTypeKHR GeometryType;
        public VkAccelerationStructureGeometryDataKHR Geometry;
        public VkGeometryFlagsKHR Flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureBuildGeometryInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkAccelerationStructureTypeKHR Type;
        public VkBuildAccelerationStructureFlagsKHR Flags;
        public VkBuildAccelerationStructureModeKHR Mode;
        public VkAccelerationStructureKHR SrcAccelerationStructure;
        public VkAccelerationStructureKHR DstAccelerationStructure;
        public uint GeometryCount;
        public unsafe VkAccelerationStructureGeometryKHR* PGeometries;
        public unsafe VkAccelerationStructureGeometryKHR** PpGeometries;
        public VkDeviceOrHostAddressKHR ScratchData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureCreateInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkAccelerationStructureCreateFlagsKHR CreateFlags;
        public VkBuffer Buffer;
        public ulong Offset;
        public ulong Size;
        public VkAccelerationStructureTypeKHR Type;
        public ulong DeviceAddress;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkWriteDescriptorSetAccelerationStructureKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint AccelerationStructureCount;
        public unsafe VkAccelerationStructureKHR* PAccelerationStructures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceAccelerationStructureFeaturesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint AccelerationStructure;
        public uint AccelerationStructureCaptureReplay;
        public uint AccelerationStructureIndirectBuild;
        public uint AccelerationStructureHostCommands;
        public uint DescriptorBindingAccelerationStructureUpdateAfterBind;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceAccelerationStructurePropertiesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong MaxGeometryCount;
        public ulong MaxInstanceCount;
        public ulong MaxPrimitiveCount;
        public uint MaxPerStageDescriptorAccelerationStructures;
        public uint MaxPerStageDescriptorUpdateAfterBindAccelerationStructures;
        public uint MaxDescriptorSetAccelerationStructures;
        public uint MaxDescriptorSetUpdateAfterBindAccelerationStructures;
        public uint MinAccelerationStructureScratchOffsetAlignment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureDeviceAddressInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkAccelerationStructureKHR AccelerationStructure;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureVersionInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public unsafe byte* PVersionData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyAccelerationStructureToMemoryInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkAccelerationStructureKHR Src;
        public VkDeviceOrHostAddressKHR Dst;
        public VkCopyAccelerationStructureModeKHR Mode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyMemoryToAccelerationStructureInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkDeviceOrHostAddressConstKHR Src;
        public VkAccelerationStructureKHR Dst;
        public VkCopyAccelerationStructureModeKHR Mode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyAccelerationStructureInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkAccelerationStructureKHR Src;
        public VkAccelerationStructureKHR Dst;
        public VkCopyAccelerationStructureModeKHR Mode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureBuildSizesInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public ulong AccelerationStructureSize;
        public ulong UpdateScratchSize;
        public ulong BuildScratchSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRayTracingShaderGroupCreateInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkRayTracingShaderGroupTypeKHR Type;
        public uint GeneralShader;
        public uint ClosestHitShader;
        public uint AnyHitShader;
        public uint IntersectionShader;
        public unsafe void* PShaderGroupCaptureReplayHandle;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRayTracingPipelineInterfaceCreateInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint MaxPipelineRayPayloadSize;
        public uint MaxPipelineRayHitAttributeSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRayTracingPipelineCreateInfoKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public VkPipelineCreateFlags Flags;
        public uint StageCount;
        public unsafe VkPipelineShaderStageCreateInfo* PStages;
        public uint GroupCount;
        public unsafe VkRayTracingShaderGroupCreateInfoKHR* PGroups;
        public uint MaxPipelineRayRecursionDepth;
        public unsafe VkPipelineLibraryCreateInfoKHR* PLibraryInfo;
        public unsafe VkRayTracingPipelineInterfaceCreateInfoKHR* PLibraryInterface;
        public unsafe VkPipelineDynamicStateCreateInfo* PDynamicState;
        public VkPipelineLayout Layout;
        public VkPipeline BasePipelineHandle;
        public int BasePipelineIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint RayTracingPipeline;
        public uint RayTracingPipelineShaderGroupHandleCaptureReplay;
        public uint RayTracingPipelineShaderGroupHandleCaptureReplayMixed;
        public uint RayTracingPipelineTraceRaysIndirect;
        public uint RayTraversalPrimitiveCulling;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint ShaderGroupHandleSize;
        public uint MaxRayRecursionDepth;
        public uint MaxShaderGroupStride;
        public uint ShaderGroupBaseAlignment;
        public uint ShaderGroupHandleCaptureReplaySize;
        public uint MaxRayDispatchInvocationCount;
        public uint ShaderGroupHandleAlignment;
        public uint MaxRayHitAttributeSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkStridedDeviceAddressRegionKHR
    {
        public ulong DeviceAddress;
        public ulong Stride;
        public ulong Size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkTraceRaysIndirectCommandKHR
    {
        public uint Width;
        public uint Height;
        public uint Depth;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRayQueryFeaturesKHR
    {
        public VkStructureType SType;
        public unsafe void* PNext;
        public uint RayQuery;
    }

}
