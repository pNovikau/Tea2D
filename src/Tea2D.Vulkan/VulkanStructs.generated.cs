// ============================================================================ 
// This file is generated by Tea2D.Vulkan.Generator tool. 
// ============================================================================ 


using System;
using System.Runtime.InteropServices;

using VkAccessFlags = System.UInt32;
using VkImageAspectFlags = System.UInt32;
using VkFormatFeatureFlags = System.UInt32;
using VkImageCreateFlags = System.UInt32;
using VkSampleCountFlags = System.UInt32;
using VkImageUsageFlags = System.UInt32;
using VkInstanceCreateFlags = System.UInt32;
using VkMemoryHeapFlags = System.UInt32;
using VkMemoryPropertyFlags = System.UInt32;
using VkQueueFlags = System.UInt32;
using VkDeviceCreateFlags = System.UInt32;
using VkDeviceQueueCreateFlags = System.UInt32;
using VkPipelineStageFlags = System.UInt32;
using VkMemoryMapFlags = System.UInt32;
using VkSparseMemoryBindFlags = System.UInt32;
using VkSparseImageFormatFlags = System.UInt32;
using VkFenceCreateFlags = System.UInt32;
using VkSemaphoreCreateFlags = System.UInt32;
using VkEventCreateFlags = System.UInt32;
using VkQueryPipelineStatisticFlags = System.UInt32;
using VkQueryPoolCreateFlags = System.UInt32;
using VkQueryResultFlags = System.UInt32;
using VkBufferCreateFlags = System.UInt32;
using VkBufferUsageFlags = System.UInt32;
using VkBufferViewCreateFlags = System.UInt32;
using VkImageViewCreateFlags = System.UInt32;
using VkShaderModuleCreateFlags = System.UInt32;
using VkPipelineCacheCreateFlags = System.UInt32;
using VkColorComponentFlags = System.UInt32;
using VkPipelineCreateFlags = System.UInt32;
using VkPipelineShaderStageCreateFlags = System.UInt32;
using VkCullModeFlags = System.UInt32;
using VkPipelineVertexInputStateCreateFlags = System.UInt32;
using VkPipelineInputAssemblyStateCreateFlags = System.UInt32;
using VkPipelineTessellationStateCreateFlags = System.UInt32;
using VkPipelineViewportStateCreateFlags = System.UInt32;
using VkPipelineRasterizationStateCreateFlags = System.UInt32;
using VkPipelineMultisampleStateCreateFlags = System.UInt32;
using VkPipelineDepthStencilStateCreateFlags = System.UInt32;
using VkPipelineColorBlendStateCreateFlags = System.UInt32;
using VkPipelineDynamicStateCreateFlags = System.UInt32;
using VkPipelineLayoutCreateFlags = System.UInt32;
using VkShaderStageFlags = System.UInt32;
using VkSamplerCreateFlags = System.UInt32;
using VkDescriptorPoolCreateFlags = System.UInt32;
using VkDescriptorPoolResetFlags = System.UInt32;
using VkDescriptorSetLayoutCreateFlags = System.UInt32;
using VkAttachmentDescriptionFlags = System.UInt32;
using VkDependencyFlags = System.UInt32;
using VkFramebufferCreateFlags = System.UInt32;
using VkRenderPassCreateFlags = System.UInt32;
using VkSubpassDescriptionFlags = System.UInt32;
using VkCommandPoolCreateFlags = System.UInt32;
using VkCommandPoolResetFlags = System.UInt32;
using VkCommandBufferUsageFlags = System.UInt32;
using VkQueryControlFlags = System.UInt32;
using VkCommandBufferResetFlags = System.UInt32;
using VkStencilFaceFlags = System.UInt32;
using VkSubgroupFeatureFlags = System.UInt32;
using VkPeerMemoryFeatureFlags = System.UInt32;
using VkMemoryAllocateFlags = System.UInt32;
using VkCommandPoolTrimFlags = System.UInt32;
using VkDescriptorUpdateTemplateCreateFlags = System.UInt32;
using VkExternalMemoryHandleTypeFlags = System.UInt32;
using VkExternalMemoryFeatureFlags = System.UInt32;
using VkExternalFenceHandleTypeFlags = System.UInt32;
using VkExternalFenceFeatureFlags = System.UInt32;
using VkFenceImportFlags = System.UInt32;
using VkSemaphoreImportFlags = System.UInt32;
using VkExternalSemaphoreHandleTypeFlags = System.UInt32;
using VkExternalSemaphoreFeatureFlags = System.UInt32;
using VkResolveModeFlags = System.UInt32;
using VkDescriptorBindingFlags = System.UInt32;
using VkSemaphoreWaitFlags = System.UInt32;
using VkPipelineCreationFeedbackFlags = System.UInt32;
using VkToolPurposeFlags = System.UInt32;
using VkPrivateDataSlotCreateFlags = System.UInt32;
using VkSubmitFlags = System.UInt32;
using VkRenderingFlags = System.UInt32;
using VkCompositeAlphaFlagsKHR = System.UInt32;
using VkSurfaceTransformFlagsKHR = System.UInt32;
using VkSwapchainCreateFlagsKHR = System.UInt32;
using VkDeviceGroupPresentModeFlagsKHR = System.UInt32;
using VkDisplayModeCreateFlagsKHR = System.UInt32;
using VkDisplayPlaneAlphaFlagsKHR = System.UInt32;
using VkDisplaySurfaceCreateFlagsKHR = System.UInt32;
using VkPerformanceCounterDescriptionFlagsKHR = System.UInt32;
using VkAcquireProfilingLockFlagsKHR = System.UInt32;
using VkDebugReportFlagsEXT = System.UInt32;
using VkPipelineRasterizationStateStreamCreateFlagsEXT = System.UInt32;
using VkExternalMemoryHandleTypeFlagsNV = System.UInt32;
using VkExternalMemoryFeatureFlagsNV = System.UInt32;
using VkConditionalRenderingFlagsEXT = System.UInt32;
using VkSurfaceCounterFlagsEXT = System.UInt32;
using VkPipelineViewportSwizzleStateCreateFlagsNV = System.UInt32;
using VkPipelineDiscardRectangleStateCreateFlagsEXT = System.UInt32;
using VkPipelineRasterizationConservativeStateCreateFlagsEXT = System.UInt32;
using VkPipelineRasterizationDepthClipStateCreateFlagsEXT = System.UInt32;
using VkDebugUtilsMessengerCallbackDataFlagsEXT = System.UInt32;
using VkDebugUtilsMessageTypeFlagsEXT = System.UInt32;
using VkDebugUtilsMessageSeverityFlagsEXT = System.UInt32;
using VkDebugUtilsMessengerCreateFlagsEXT = System.UInt32;
using VkPipelineCoverageToColorStateCreateFlagsNV = System.UInt32;
using VkPipelineCoverageModulationStateCreateFlagsNV = System.UInt32;
using VkValidationCacheCreateFlagsEXT = System.UInt32;
using VkGeometryFlagsKHR = System.UInt32;
using VkGeometryInstanceFlagsKHR = System.UInt32;
using VkBuildAccelerationStructureFlagsKHR = System.UInt32;
using VkBuildAccelerationStructureFlagsNV = System.UInt32;
using VkPipelineCompilerControlFlagsAMD = System.UInt32;
using VkShaderCorePropertiesFlagsAMD = System.UInt32;
using VkPipelineCoverageReductionStateCreateFlagsNV = System.UInt32;
using VkHeadlessSurfaceCreateFlagsEXT = System.UInt32;
using VkIndirectStateFlagsNV = System.UInt32;
using VkIndirectCommandsLayoutUsageFlagsNV = System.UInt32;
using VkDeviceMemoryReportFlagsEXT = System.UInt32;
using VkDeviceDiagnosticsConfigFlagsNV = System.UInt32;
using VkAccelerationStructureMotionInfoFlagsNV = System.UInt32;
using VkAccelerationStructureMotionInstanceFlagsNV = System.UInt32;
using VkAccelerationStructureCreateFlagsKHR = System.UInt32;

namespace Tea2D.Vulkan
{
    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExtent2D
    {
        public uint width;
        public uint height;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExtent3D
    {
        public uint width;
        public uint height;
        public uint depth;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkOffset2D
    {
        public int x;
        public int y;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkOffset3D
    {
        public int x;
        public int y;
        public int z;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRect2D
    {
        public VkOffset2D offset;
        public VkExtent2D extent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBaseInStructure
    {
        public VkStructureType sType;
        public unsafe VkBaseInStructure* pNext;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBaseOutStructure
    {
        public VkStructureType sType;
        public unsafe VkBaseOutStructure* pNext;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferMemoryBarrier
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkAccessFlags srcAccessMask;
        public VkAccessFlags dstAccessMask;
        public uint srcQueueFamilyIndex;
        public uint dstQueueFamilyIndex;
        public VkBuffer buffer;
        public ulong offset;
        public ulong size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDispatchIndirectCommand
    {
        public uint x;
        public uint y;
        public uint z;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDrawIndexedIndirectCommand
    {
        public uint indexCount;
        public uint instanceCount;
        public uint firstIndex;
        public int vertexOffset;
        public uint firstInstance;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDrawIndirectCommand
    {
        public uint vertexCount;
        public uint instanceCount;
        public uint firstVertex;
        public uint firstInstance;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageSubresourceRange
    {
        public VkImageAspectFlags aspectMask;
        public uint baseMipLevel;
        public uint levelCount;
        public uint baseArrayLayer;
        public uint layerCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageMemoryBarrier
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkAccessFlags srcAccessMask;
        public VkAccessFlags dstAccessMask;
        public VkImageLayout oldLayout;
        public VkImageLayout newLayout;
        public uint srcQueueFamilyIndex;
        public uint dstQueueFamilyIndex;
        public VkImage image;
        public VkImageSubresourceRange subresourceRange;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryBarrier
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkAccessFlags srcAccessMask;
        public VkAccessFlags dstAccessMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineCacheHeaderVersionOne
    {
        public uint headerSize;
        public VkPipelineCacheHeaderVersion headerVersion;
        public uint vendorID;
        public uint deviceID;
        public unsafe fixed byte pipelineCacheUUID[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAllocationCallbacks
    {
        public unsafe void* pUserData;
        public unsafe delegate* unmanaged<void*, uint, uint, VkSystemAllocationScope, void*> pfnAllocation;
        public unsafe delegate* unmanaged<void*, void*, uint, uint, VkSystemAllocationScope, void*> pfnReallocation;
        public unsafe delegate* unmanaged<void*, void*, void> pfnFree;
        public unsafe delegate* unmanaged<void*, uint, VkInternalAllocationType, VkSystemAllocationScope, void> pfnInternalAllocation;
        public unsafe delegate* unmanaged<void*, uint, VkInternalAllocationType, VkSystemAllocationScope, void> pfnInternalFree;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkApplicationInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public unsafe byte* pApplicationName;
        public uint applicationVersion;
        public unsafe byte* pEngineName;
        public uint engineVersion;
        public uint apiVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFormatProperties
    {
        public VkFormatFeatureFlags linearTilingFeatures;
        public VkFormatFeatureFlags optimalTilingFeatures;
        public VkFormatFeatureFlags bufferFeatures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageFormatProperties
    {
        public VkExtent3D maxExtent;
        public uint maxMipLevels;
        public uint maxArrayLayers;
        public VkSampleCountFlags sampleCounts;
        public ulong maxResourceSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkInstanceCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkInstanceCreateFlags flags;
        public unsafe VkApplicationInfo* pApplicationInfo;
        public uint enabledLayerCount;
        public unsafe byte** ppEnabledLayerNames;
        public uint enabledExtensionCount;
        public unsafe byte** ppEnabledExtensionNames;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryHeap
    {
        public ulong size;
        public VkMemoryHeapFlags flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryType
    {
        public VkMemoryPropertyFlags propertyFlags;
        public uint heapIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFeatures
    {
        public uint robustBufferAccess;
        public uint fullDrawIndexUint32;
        public uint imageCubeArray;
        public uint independentBlend;
        public uint geometryShader;
        public uint tessellationShader;
        public uint sampleRateShading;
        public uint dualSrcBlend;
        public uint logicOp;
        public uint multiDrawIndirect;
        public uint drawIndirectFirstInstance;
        public uint depthClamp;
        public uint depthBiasClamp;
        public uint fillModeNonSolid;
        public uint depthBounds;
        public uint wideLines;
        public uint largePoints;
        public uint alphaToOne;
        public uint multiViewport;
        public uint samplerAnisotropy;
        public uint textureCompressionETC2;
        public uint textureCompressionASTC_LDR;
        public uint textureCompressionBC;
        public uint occlusionQueryPrecise;
        public uint pipelineStatisticsQuery;
        public uint vertexPipelineStoresAndAtomics;
        public uint fragmentStoresAndAtomics;
        public uint shaderTessellationAndGeometryPointSize;
        public uint shaderImageGatherExtended;
        public uint shaderStorageImageExtendedFormats;
        public uint shaderStorageImageMultisample;
        public uint shaderStorageImageReadWithoutFormat;
        public uint shaderStorageImageWriteWithoutFormat;
        public uint shaderUniformBufferArrayDynamicIndexing;
        public uint shaderSampledImageArrayDynamicIndexing;
        public uint shaderStorageBufferArrayDynamicIndexing;
        public uint shaderStorageImageArrayDynamicIndexing;
        public uint shaderClipDistance;
        public uint shaderCullDistance;
        public uint shaderFloat64;
        public uint shaderInt64;
        public uint shaderInt16;
        public uint shaderResourceResidency;
        public uint shaderResourceMinLod;
        public uint sparseBinding;
        public uint sparseResidencyBuffer;
        public uint sparseResidencyImage2D;
        public uint sparseResidencyImage3D;
        public uint sparseResidency2Samples;
        public uint sparseResidency4Samples;
        public uint sparseResidency8Samples;
        public uint sparseResidency16Samples;
        public uint sparseResidencyAliased;
        public uint variableMultisampleRate;
        public uint inheritedQueries;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceLimits
    {
        public uint maxImageDimension1D;
        public uint maxImageDimension2D;
        public uint maxImageDimension3D;
        public uint maxImageDimensionCube;
        public uint maxImageArrayLayers;
        public uint maxTexelBufferElements;
        public uint maxUniformBufferRange;
        public uint maxStorageBufferRange;
        public uint maxPushConstantsSize;
        public uint maxMemoryAllocationCount;
        public uint maxSamplerAllocationCount;
        public ulong bufferImageGranularity;
        public ulong sparseAddressSpaceSize;
        public uint maxBoundDescriptorSets;
        public uint maxPerStageDescriptorSamplers;
        public uint maxPerStageDescriptorUniformBuffers;
        public uint maxPerStageDescriptorStorageBuffers;
        public uint maxPerStageDescriptorSampledImages;
        public uint maxPerStageDescriptorStorageImages;
        public uint maxPerStageDescriptorInputAttachments;
        public uint maxPerStageResources;
        public uint maxDescriptorSetSamplers;
        public uint maxDescriptorSetUniformBuffers;
        public uint maxDescriptorSetUniformBuffersDynamic;
        public uint maxDescriptorSetStorageBuffers;
        public uint maxDescriptorSetStorageBuffersDynamic;
        public uint maxDescriptorSetSampledImages;
        public uint maxDescriptorSetStorageImages;
        public uint maxDescriptorSetInputAttachments;
        public uint maxVertexInputAttributes;
        public uint maxVertexInputBindings;
        public uint maxVertexInputAttributeOffset;
        public uint maxVertexInputBindingStride;
        public uint maxVertexOutputComponents;
        public uint maxTessellationGenerationLevel;
        public uint maxTessellationPatchSize;
        public uint maxTessellationControlPerVertexInputComponents;
        public uint maxTessellationControlPerVertexOutputComponents;
        public uint maxTessellationControlPerPatchOutputComponents;
        public uint maxTessellationControlTotalOutputComponents;
        public uint maxTessellationEvaluationInputComponents;
        public uint maxTessellationEvaluationOutputComponents;
        public uint maxGeometryShaderInvocations;
        public uint maxGeometryInputComponents;
        public uint maxGeometryOutputComponents;
        public uint maxGeometryOutputVertices;
        public uint maxGeometryTotalOutputComponents;
        public uint maxFragmentInputComponents;
        public uint maxFragmentOutputAttachments;
        public uint maxFragmentDualSrcAttachments;
        public uint maxFragmentCombinedOutputResources;
        public uint maxComputeSharedMemorySize;
        public unsafe fixed uint maxComputeWorkGroupCount[3];
        public uint maxComputeWorkGroupInvocations;
        public unsafe fixed uint maxComputeWorkGroupSize[3];
        public uint subPixelPrecisionBits;
        public uint subTexelPrecisionBits;
        public uint mipmapPrecisionBits;
        public uint maxDrawIndexedIndexValue;
        public uint maxDrawIndirectCount;
        public float maxSamplerLodBias;
        public float maxSamplerAnisotropy;
        public uint maxViewports;
        public unsafe fixed uint maxViewportDimensions[2];
        public unsafe fixed float viewportBoundsRange[2];
        public uint viewportSubPixelBits;
        public uint minMemoryMapAlignment;
        public ulong minTexelBufferOffsetAlignment;
        public ulong minUniformBufferOffsetAlignment;
        public ulong minStorageBufferOffsetAlignment;
        public int minTexelOffset;
        public uint maxTexelOffset;
        public int minTexelGatherOffset;
        public uint maxTexelGatherOffset;
        public float minInterpolationOffset;
        public float maxInterpolationOffset;
        public uint subPixelInterpolationOffsetBits;
        public uint maxFramebufferWidth;
        public uint maxFramebufferHeight;
        public uint maxFramebufferLayers;
        public VkSampleCountFlags framebufferColorSampleCounts;
        public VkSampleCountFlags framebufferDepthSampleCounts;
        public VkSampleCountFlags framebufferStencilSampleCounts;
        public VkSampleCountFlags framebufferNoAttachmentsSampleCounts;
        public uint maxColorAttachments;
        public VkSampleCountFlags sampledImageColorSampleCounts;
        public VkSampleCountFlags sampledImageIntegerSampleCounts;
        public VkSampleCountFlags sampledImageDepthSampleCounts;
        public VkSampleCountFlags sampledImageStencilSampleCounts;
        public VkSampleCountFlags storageImageSampleCounts;
        public uint maxSampleMaskWords;
        public uint timestampComputeAndGraphics;
        public float timestampPeriod;
        public uint maxClipDistances;
        public uint maxCullDistances;
        public uint maxCombinedClipAndCullDistances;
        public uint discreteQueuePriorities;
        public unsafe fixed float pointSizeRange[2];
        public unsafe fixed float lineWidthRange[2];
        public float pointSizeGranularity;
        public float lineWidthGranularity;
        public uint strictLines;
        public uint standardSampleLocations;
        public ulong optimalBufferCopyOffsetAlignment;
        public ulong optimalBufferCopyRowPitchAlignment;
        public ulong nonCoherentAtomSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMemoryProperties
    {
        public uint memoryTypeCount;
        public VkMemoryType memoryTypes_0;
        public VkMemoryType memoryTypes_1;
        public VkMemoryType memoryTypes_2;
        public VkMemoryType memoryTypes_3;
        public VkMemoryType memoryTypes_4;
        public VkMemoryType memoryTypes_5;
        public VkMemoryType memoryTypes_6;
        public VkMemoryType memoryTypes_7;
        public VkMemoryType memoryTypes_8;
        public VkMemoryType memoryTypes_9;
        public VkMemoryType memoryTypes_10;
        public VkMemoryType memoryTypes_11;
        public VkMemoryType memoryTypes_12;
        public VkMemoryType memoryTypes_13;
        public VkMemoryType memoryTypes_14;
        public VkMemoryType memoryTypes_15;
        public VkMemoryType memoryTypes_16;
        public VkMemoryType memoryTypes_17;
        public VkMemoryType memoryTypes_18;
        public VkMemoryType memoryTypes_19;
        public VkMemoryType memoryTypes_20;
        public VkMemoryType memoryTypes_21;
        public VkMemoryType memoryTypes_22;
        public VkMemoryType memoryTypes_23;
        public VkMemoryType memoryTypes_24;
        public VkMemoryType memoryTypes_25;
        public VkMemoryType memoryTypes_26;
        public VkMemoryType memoryTypes_27;
        public VkMemoryType memoryTypes_28;
        public VkMemoryType memoryTypes_29;
        public VkMemoryType memoryTypes_30;
        public VkMemoryType memoryTypes_31;
        public uint memoryHeapCount;
        public VkMemoryHeap memoryHeaps_0;
        public VkMemoryHeap memoryHeaps_1;
        public VkMemoryHeap memoryHeaps_2;
        public VkMemoryHeap memoryHeaps_3;
        public VkMemoryHeap memoryHeaps_4;
        public VkMemoryHeap memoryHeaps_5;
        public VkMemoryHeap memoryHeaps_6;
        public VkMemoryHeap memoryHeaps_7;
        public VkMemoryHeap memoryHeaps_8;
        public VkMemoryHeap memoryHeaps_9;
        public VkMemoryHeap memoryHeaps_10;
        public VkMemoryHeap memoryHeaps_11;
        public VkMemoryHeap memoryHeaps_12;
        public VkMemoryHeap memoryHeaps_13;
        public VkMemoryHeap memoryHeaps_14;
        public VkMemoryHeap memoryHeaps_15;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSparseProperties
    {
        public uint residencyStandard2DBlockShape;
        public uint residencyStandard2DMultisampleBlockShape;
        public uint residencyStandard3DBlockShape;
        public uint residencyAlignedMipSize;
        public uint residencyNonResidentStrict;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceProperties
    {
        public uint apiVersion;
        public uint driverVersion;
        public uint vendorID;
        public uint deviceID;
        public VkPhysicalDeviceType deviceType;
        public unsafe fixed byte deviceName[256];
        public unsafe fixed byte pipelineCacheUUID[16];
        public VkPhysicalDeviceLimits limits;
        public VkPhysicalDeviceSparseProperties sparseProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkQueueFamilyProperties
    {
        public VkQueueFlags queueFlags;
        public uint queueCount;
        public uint timestampValidBits;
        public VkExtent3D minImageTransferGranularity;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceQueueCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDeviceQueueCreateFlags flags;
        public uint queueFamilyIndex;
        public uint queueCount;
        public unsafe float* pQueuePriorities;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDeviceCreateFlags flags;
        public uint queueCreateInfoCount;
        public unsafe VkDeviceQueueCreateInfo* pQueueCreateInfos;
        public uint enabledLayerCount;
        public unsafe byte** ppEnabledLayerNames;
        public uint enabledExtensionCount;
        public unsafe byte** ppEnabledExtensionNames;
        public unsafe VkPhysicalDeviceFeatures* pEnabledFeatures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExtensionProperties
    {
        public unsafe fixed byte extensionName[256];
        public uint specVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkLayerProperties
    {
        public unsafe fixed byte layerName[256];
        public uint specVersion;
        public uint implementationVersion;
        public unsafe fixed byte description[256];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubmitInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint waitSemaphoreCount;
        public unsafe VkSemaphore* pWaitSemaphores;
        public unsafe VkPipelineStageFlags* pWaitDstStageMask;
        public uint commandBufferCount;
        public unsafe VkCommandBuffer* pCommandBuffers;
        public uint signalSemaphoreCount;
        public unsafe VkSemaphore* pSignalSemaphores;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMappedMemoryRange
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDeviceMemory memory;
        public ulong offset;
        public ulong size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryAllocateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong allocationSize;
        public uint memoryTypeIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryRequirements
    {
        public ulong size;
        public ulong alignment;
        public uint memoryTypeBits;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseMemoryBind
    {
        public ulong resourceOffset;
        public ulong size;
        public VkDeviceMemory memory;
        public ulong memoryOffset;
        public VkSparseMemoryBindFlags flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseBufferMemoryBindInfo
    {
        public VkBuffer buffer;
        public uint bindCount;
        public unsafe VkSparseMemoryBind* pBinds;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseImageOpaqueMemoryBindInfo
    {
        public VkImage image;
        public uint bindCount;
        public unsafe VkSparseMemoryBind* pBinds;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageSubresource
    {
        public VkImageAspectFlags aspectMask;
        public uint mipLevel;
        public uint arrayLayer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseImageMemoryBind
    {
        public VkImageSubresource subresource;
        public VkOffset3D offset;
        public VkExtent3D extent;
        public VkDeviceMemory memory;
        public ulong memoryOffset;
        public VkSparseMemoryBindFlags flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseImageMemoryBindInfo
    {
        public VkImage image;
        public uint bindCount;
        public unsafe VkSparseImageMemoryBind* pBinds;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindSparseInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint waitSemaphoreCount;
        public unsafe VkSemaphore* pWaitSemaphores;
        public uint bufferBindCount;
        public unsafe VkSparseBufferMemoryBindInfo* pBufferBinds;
        public uint imageOpaqueBindCount;
        public unsafe VkSparseImageOpaqueMemoryBindInfo* pImageOpaqueBinds;
        public uint imageBindCount;
        public unsafe VkSparseImageMemoryBindInfo* pImageBinds;
        public uint signalSemaphoreCount;
        public unsafe VkSemaphore* pSignalSemaphores;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseImageFormatProperties
    {
        public VkImageAspectFlags aspectMask;
        public VkExtent3D imageGranularity;
        public VkSparseImageFormatFlags flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseImageMemoryRequirements
    {
        public VkSparseImageFormatProperties formatProperties;
        public uint imageMipTailFirstLod;
        public ulong imageMipTailSize;
        public ulong imageMipTailOffset;
        public ulong imageMipTailStride;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFenceCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkFenceCreateFlags flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSemaphoreCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSemaphoreCreateFlags flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkEventCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkEventCreateFlags flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkQueryPoolCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkQueryPoolCreateFlags flags;
        public VkQueryType queryType;
        public uint queryCount;
        public VkQueryPipelineStatisticFlags pipelineStatistics;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkBufferCreateFlags flags;
        public ulong size;
        public VkBufferUsageFlags usage;
        public VkSharingMode sharingMode;
        public uint queueFamilyIndexCount;
        public unsafe uint* pQueueFamilyIndices;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferViewCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkBufferViewCreateFlags flags;
        public VkBuffer buffer;
        public VkFormat format;
        public ulong offset;
        public ulong range;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageCreateFlags flags;
        public VkImageType imageType;
        public VkFormat format;
        public VkExtent3D extent;
        public uint mipLevels;
        public uint arrayLayers;
        public VkSampleCountFlagBits samples;
        public VkImageTiling tiling;
        public VkImageUsageFlags usage;
        public VkSharingMode sharingMode;
        public uint queueFamilyIndexCount;
        public unsafe uint* pQueueFamilyIndices;
        public VkImageLayout initialLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubresourceLayout
    {
        public ulong offset;
        public ulong size;
        public ulong rowPitch;
        public ulong arrayPitch;
        public ulong depthPitch;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkComponentMapping
    {
        public VkComponentSwizzle r;
        public VkComponentSwizzle g;
        public VkComponentSwizzle b;
        public VkComponentSwizzle a;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageViewCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageViewCreateFlags flags;
        public VkImage image;
        public VkImageViewType viewType;
        public VkFormat format;
        public VkComponentMapping components;
        public VkImageSubresourceRange subresourceRange;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkShaderModuleCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkShaderModuleCreateFlags flags;
        public uint codeSize;
        public unsafe uint* pCode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineCacheCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineCacheCreateFlags flags;
        public uint initialDataSize;
        public unsafe void* pInitialData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSpecializationMapEntry
    {
        public uint constantID;
        public uint offset;
        public uint size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSpecializationInfo
    {
        public uint mapEntryCount;
        public unsafe VkSpecializationMapEntry* pMapEntries;
        public uint dataSize;
        public unsafe void* pData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineShaderStageCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineShaderStageCreateFlags flags;
        public VkShaderStageFlagBits stage;
        public VkShaderModule module;
        public unsafe byte* pName;
        public unsafe VkSpecializationInfo* pSpecializationInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkComputePipelineCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineCreateFlags flags;
        public VkPipelineShaderStageCreateInfo stage;
        public VkPipelineLayout layout;
        public VkPipeline basePipelineHandle;
        public int basePipelineIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkVertexInputBindingDescription
    {
        public uint binding;
        public uint stride;
        public VkVertexInputRate inputRate;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkVertexInputAttributeDescription
    {
        public uint location;
        public uint binding;
        public VkFormat format;
        public uint offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineVertexInputStateCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineVertexInputStateCreateFlags flags;
        public uint vertexBindingDescriptionCount;
        public unsafe VkVertexInputBindingDescription* pVertexBindingDescriptions;
        public uint vertexAttributeDescriptionCount;
        public unsafe VkVertexInputAttributeDescription* pVertexAttributeDescriptions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineInputAssemblyStateCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineInputAssemblyStateCreateFlags flags;
        public VkPrimitiveTopology topology;
        public uint primitiveRestartEnable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineTessellationStateCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineTessellationStateCreateFlags flags;
        public uint patchControlPoints;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkViewport
    {
        public float x;
        public float y;
        public float width;
        public float height;
        public float minDepth;
        public float maxDepth;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineViewportStateCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineViewportStateCreateFlags flags;
        public uint viewportCount;
        public unsafe VkViewport* pViewports;
        public uint scissorCount;
        public unsafe VkRect2D* pScissors;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRasterizationStateCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineRasterizationStateCreateFlags flags;
        public uint depthClampEnable;
        public uint rasterizerDiscardEnable;
        public VkPolygonMode polygonMode;
        public VkCullModeFlags cullMode;
        public VkFrontFace frontFace;
        public uint depthBiasEnable;
        public float depthBiasConstantFactor;
        public float depthBiasClamp;
        public float depthBiasSlopeFactor;
        public float lineWidth;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineMultisampleStateCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineMultisampleStateCreateFlags flags;
        public VkSampleCountFlagBits rasterizationSamples;
        public uint sampleShadingEnable;
        public float minSampleShading;
        public unsafe uint* pSampleMask;
        public uint alphaToCoverageEnable;
        public uint alphaToOneEnable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkStencilOpState
    {
        public VkStencilOp failOp;
        public VkStencilOp passOp;
        public VkStencilOp depthFailOp;
        public VkCompareOp compareOp;
        public uint compareMask;
        public uint writeMask;
        public uint reference;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineDepthStencilStateCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineDepthStencilStateCreateFlags flags;
        public uint depthTestEnable;
        public uint depthWriteEnable;
        public VkCompareOp depthCompareOp;
        public uint depthBoundsTestEnable;
        public uint stencilTestEnable;
        public VkStencilOpState front;
        public VkStencilOpState back;
        public float minDepthBounds;
        public float maxDepthBounds;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineColorBlendAttachmentState
    {
        public uint blendEnable;
        public VkBlendFactor srcColorBlendFactor;
        public VkBlendFactor dstColorBlendFactor;
        public VkBlendOp colorBlendOp;
        public VkBlendFactor srcAlphaBlendFactor;
        public VkBlendFactor dstAlphaBlendFactor;
        public VkBlendOp alphaBlendOp;
        public VkColorComponentFlags colorWriteMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineColorBlendStateCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineColorBlendStateCreateFlags flags;
        public uint logicOpEnable;
        public VkLogicOp logicOp;
        public uint attachmentCount;
        public unsafe VkPipelineColorBlendAttachmentState* pAttachments;
        public unsafe fixed float blendConstants[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineDynamicStateCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineDynamicStateCreateFlags flags;
        public uint dynamicStateCount;
        public unsafe VkDynamicState* pDynamicStates;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGraphicsPipelineCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineCreateFlags flags;
        public uint stageCount;
        public unsafe VkPipelineShaderStageCreateInfo* pStages;
        public unsafe VkPipelineVertexInputStateCreateInfo* pVertexInputState;
        public unsafe VkPipelineInputAssemblyStateCreateInfo* pInputAssemblyState;
        public unsafe VkPipelineTessellationStateCreateInfo* pTessellationState;
        public unsafe VkPipelineViewportStateCreateInfo* pViewportState;
        public unsafe VkPipelineRasterizationStateCreateInfo* pRasterizationState;
        public unsafe VkPipelineMultisampleStateCreateInfo* pMultisampleState;
        public unsafe VkPipelineDepthStencilStateCreateInfo* pDepthStencilState;
        public unsafe VkPipelineColorBlendStateCreateInfo* pColorBlendState;
        public unsafe VkPipelineDynamicStateCreateInfo* pDynamicState;
        public VkPipelineLayout layout;
        public VkRenderPass renderPass;
        public uint subpass;
        public VkPipeline basePipelineHandle;
        public int basePipelineIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPushConstantRange
    {
        public VkShaderStageFlags stageFlags;
        public uint offset;
        public uint size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineLayoutCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineLayoutCreateFlags flags;
        public uint setLayoutCount;
        public unsafe VkDescriptorSetLayout* pSetLayouts;
        public uint pushConstantRangeCount;
        public unsafe VkPushConstantRange* pPushConstantRanges;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSamplerCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSamplerCreateFlags flags;
        public VkFilter magFilter;
        public VkFilter minFilter;
        public VkSamplerMipmapMode mipmapMode;
        public VkSamplerAddressMode addressModeU;
        public VkSamplerAddressMode addressModeV;
        public VkSamplerAddressMode addressModeW;
        public float mipLodBias;
        public uint anisotropyEnable;
        public float maxAnisotropy;
        public uint compareEnable;
        public VkCompareOp compareOp;
        public float minLod;
        public float maxLod;
        public VkBorderColor borderColor;
        public uint unnormalizedCoordinates;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyDescriptorSet
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDescriptorSet srcSet;
        public uint srcBinding;
        public uint srcArrayElement;
        public VkDescriptorSet dstSet;
        public uint dstBinding;
        public uint dstArrayElement;
        public uint descriptorCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorBufferInfo
    {
        public VkBuffer buffer;
        public ulong offset;
        public ulong range;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorImageInfo
    {
        public VkSampler sampler;
        public VkImageView imageView;
        public VkImageLayout imageLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorPoolSize
    {
        public VkDescriptorType type;
        public uint descriptorCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorPoolCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDescriptorPoolCreateFlags flags;
        public uint maxSets;
        public uint poolSizeCount;
        public unsafe VkDescriptorPoolSize* pPoolSizes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorSetAllocateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDescriptorPool descriptorPool;
        public uint descriptorSetCount;
        public unsafe VkDescriptorSetLayout* pSetLayouts;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorSetLayoutBinding
    {
        public uint binding;
        public VkDescriptorType descriptorType;
        public uint descriptorCount;
        public VkShaderStageFlags stageFlags;
        public unsafe VkSampler* pImmutableSamplers;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorSetLayoutCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDescriptorSetLayoutCreateFlags flags;
        public uint bindingCount;
        public unsafe VkDescriptorSetLayoutBinding* pBindings;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkWriteDescriptorSet
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDescriptorSet dstSet;
        public uint dstBinding;
        public uint dstArrayElement;
        public uint descriptorCount;
        public VkDescriptorType descriptorType;
        public unsafe VkDescriptorImageInfo* pImageInfo;
        public unsafe VkDescriptorBufferInfo* pBufferInfo;
        public unsafe VkBufferView* pTexelBufferView;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAttachmentDescription
    {
        public VkAttachmentDescriptionFlags flags;
        public VkFormat format;
        public VkSampleCountFlagBits samples;
        public VkAttachmentLoadOp loadOp;
        public VkAttachmentStoreOp storeOp;
        public VkAttachmentLoadOp stencilLoadOp;
        public VkAttachmentStoreOp stencilStoreOp;
        public VkImageLayout initialLayout;
        public VkImageLayout finalLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAttachmentReference
    {
        public uint attachment;
        public VkImageLayout layout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFramebufferCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkFramebufferCreateFlags flags;
        public VkRenderPass renderPass;
        public uint attachmentCount;
        public unsafe VkImageView* pAttachments;
        public uint width;
        public uint height;
        public uint layers;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassDescription
    {
        public VkSubpassDescriptionFlags flags;
        public VkPipelineBindPoint pipelineBindPoint;
        public uint inputAttachmentCount;
        public unsafe VkAttachmentReference* pInputAttachments;
        public uint colorAttachmentCount;
        public unsafe VkAttachmentReference* pColorAttachments;
        public unsafe VkAttachmentReference* pResolveAttachments;
        public unsafe VkAttachmentReference* pDepthStencilAttachment;
        public uint preserveAttachmentCount;
        public unsafe uint* pPreserveAttachments;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassDependency
    {
        public uint srcSubpass;
        public uint dstSubpass;
        public VkPipelineStageFlags srcStageMask;
        public VkPipelineStageFlags dstStageMask;
        public VkAccessFlags srcAccessMask;
        public VkAccessFlags dstAccessMask;
        public VkDependencyFlags dependencyFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkRenderPassCreateFlags flags;
        public uint attachmentCount;
        public unsafe VkAttachmentDescription* pAttachments;
        public uint subpassCount;
        public unsafe VkSubpassDescription* pSubpasses;
        public uint dependencyCount;
        public unsafe VkSubpassDependency* pDependencies;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandPoolCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkCommandPoolCreateFlags flags;
        public uint queueFamilyIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandBufferAllocateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkCommandPool commandPool;
        public VkCommandBufferLevel level;
        public uint commandBufferCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandBufferInheritanceInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkRenderPass renderPass;
        public uint subpass;
        public VkFramebuffer framebuffer;
        public uint occlusionQueryEnable;
        public VkQueryControlFlags queryFlags;
        public VkQueryPipelineStatisticFlags pipelineStatistics;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandBufferBeginInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkCommandBufferUsageFlags flags;
        public unsafe VkCommandBufferInheritanceInfo* pInheritanceInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferCopy
    {
        public ulong srcOffset;
        public ulong dstOffset;
        public ulong size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageSubresourceLayers
    {
        public VkImageAspectFlags aspectMask;
        public uint mipLevel;
        public uint baseArrayLayer;
        public uint layerCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferImageCopy
    {
        public ulong bufferOffset;
        public uint bufferRowLength;
        public uint bufferImageHeight;
        public VkImageSubresourceLayers imageSubresource;
        public VkOffset3D imageOffset;
        public VkExtent3D imageExtent;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkClearColorValue
    {
        [FieldOffset(0)]
        public unsafe fixed float float32[4];
        [FieldOffset(0)]
        public unsafe fixed int int32[4];
        [FieldOffset(0)]
        public unsafe fixed uint uint32[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkClearDepthStencilValue
    {
        public float depth;
        public uint stencil;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkClearValue
    {
        [FieldOffset(0)]
        public VkClearColorValue color;
        [FieldOffset(0)]
        public VkClearDepthStencilValue depthStencil;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkClearAttachment
    {
        public VkImageAspectFlags aspectMask;
        public uint colorAttachment;
        public VkClearValue clearValue;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkClearRect
    {
        public VkRect2D rect;
        public uint baseArrayLayer;
        public uint layerCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageBlit
    {
        public VkImageSubresourceLayers srcSubresource;
        public VkOffset3D srcOffsets_0;
        public VkOffset3D srcOffsets_1;
        public VkImageSubresourceLayers dstSubresource;
        public VkOffset3D dstOffsets_0;
        public VkOffset3D dstOffsets_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageCopy
    {
        public VkImageSubresourceLayers srcSubresource;
        public VkOffset3D srcOffset;
        public VkImageSubresourceLayers dstSubresource;
        public VkOffset3D dstOffset;
        public VkExtent3D extent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageResolve
    {
        public VkImageSubresourceLayers srcSubresource;
        public VkOffset3D srcOffset;
        public VkImageSubresourceLayers dstSubresource;
        public VkOffset3D dstOffset;
        public VkExtent3D extent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassBeginInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkRenderPass renderPass;
        public VkFramebuffer framebuffer;
        public VkRect2D renderArea;
        public uint clearValueCount;
        public unsafe VkClearValue* pClearValues;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSubgroupProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint subgroupSize;
        public VkShaderStageFlags supportedStages;
        public VkSubgroupFeatureFlags supportedOperations;
        public uint quadOperationsInAllStages;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindBufferMemoryInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkBuffer buffer;
        public VkDeviceMemory memory;
        public ulong memoryOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindImageMemoryInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImage image;
        public VkDeviceMemory memory;
        public ulong memoryOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevice16BitStorageFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint storageBuffer16BitAccess;
        public uint uniformAndStorageBuffer16BitAccess;
        public uint storagePushConstant16;
        public uint storageInputOutput16;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryDedicatedRequirements
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint prefersDedicatedAllocation;
        public uint requiresDedicatedAllocation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryDedicatedAllocateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImage image;
        public VkBuffer buffer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryAllocateFlagsInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkMemoryAllocateFlags flags;
        public uint deviceMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceGroupRenderPassBeginInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint deviceMask;
        public uint deviceRenderAreaCount;
        public unsafe VkRect2D* pDeviceRenderAreas;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceGroupCommandBufferBeginInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint deviceMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceGroupSubmitInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint waitSemaphoreCount;
        public unsafe uint* pWaitSemaphoreDeviceIndices;
        public uint commandBufferCount;
        public unsafe uint* pCommandBufferDeviceMasks;
        public uint signalSemaphoreCount;
        public unsafe uint* pSignalSemaphoreDeviceIndices;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceGroupBindSparseInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint resourceDeviceIndex;
        public uint memoryDeviceIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindBufferMemoryDeviceGroupInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint deviceIndexCount;
        public unsafe uint* pDeviceIndices;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindImageMemoryDeviceGroupInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint deviceIndexCount;
        public unsafe uint* pDeviceIndices;
        public uint splitInstanceBindRegionCount;
        public unsafe VkRect2D* pSplitInstanceBindRegions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceGroupProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint physicalDeviceCount;
        public VkPhysicalDevice physicalDevices_0;
        public VkPhysicalDevice physicalDevices_1;
        public VkPhysicalDevice physicalDevices_2;
        public VkPhysicalDevice physicalDevices_3;
        public VkPhysicalDevice physicalDevices_4;
        public VkPhysicalDevice physicalDevices_5;
        public VkPhysicalDevice physicalDevices_6;
        public VkPhysicalDevice physicalDevices_7;
        public VkPhysicalDevice physicalDevices_8;
        public VkPhysicalDevice physicalDevices_9;
        public VkPhysicalDevice physicalDevices_10;
        public VkPhysicalDevice physicalDevices_11;
        public VkPhysicalDevice physicalDevices_12;
        public VkPhysicalDevice physicalDevices_13;
        public VkPhysicalDevice physicalDevices_14;
        public VkPhysicalDevice physicalDevices_15;
        public VkPhysicalDevice physicalDevices_16;
        public VkPhysicalDevice physicalDevices_17;
        public VkPhysicalDevice physicalDevices_18;
        public VkPhysicalDevice physicalDevices_19;
        public VkPhysicalDevice physicalDevices_20;
        public VkPhysicalDevice physicalDevices_21;
        public VkPhysicalDevice physicalDevices_22;
        public VkPhysicalDevice physicalDevices_23;
        public VkPhysicalDevice physicalDevices_24;
        public VkPhysicalDevice physicalDevices_25;
        public VkPhysicalDevice physicalDevices_26;
        public VkPhysicalDevice physicalDevices_27;
        public VkPhysicalDevice physicalDevices_28;
        public VkPhysicalDevice physicalDevices_29;
        public VkPhysicalDevice physicalDevices_30;
        public VkPhysicalDevice physicalDevices_31;
        public uint subsetAllocation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceGroupDeviceCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint physicalDeviceCount;
        public unsafe VkPhysicalDevice* pPhysicalDevices;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferMemoryRequirementsInfo2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkBuffer buffer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageMemoryRequirementsInfo2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImage image;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageSparseMemoryRequirementsInfo2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImage image;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryRequirements2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkMemoryRequirements memoryRequirements;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseImageMemoryRequirements2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSparseImageMemoryRequirements memoryRequirements;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFeatures2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPhysicalDeviceFeatures features;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceProperties2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPhysicalDeviceProperties properties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFormatProperties2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkFormatProperties formatProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageFormatProperties2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageFormatProperties imageFormatProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceImageFormatInfo2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkFormat format;
        public VkImageType type;
        public VkImageTiling tiling;
        public VkImageUsageFlags usage;
        public VkImageCreateFlags flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkQueueFamilyProperties2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkQueueFamilyProperties queueFamilyProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMemoryProperties2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPhysicalDeviceMemoryProperties memoryProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSparseImageFormatProperties2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSparseImageFormatProperties properties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSparseImageFormatInfo2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkFormat format;
        public VkImageType type;
        public VkSampleCountFlagBits samples;
        public VkImageUsageFlags usage;
        public VkImageTiling tiling;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePointClippingProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPointClippingBehavior pointClippingBehavior;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkInputAttachmentAspectReference
    {
        public uint subpass;
        public uint inputAttachmentIndex;
        public VkImageAspectFlags aspectMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassInputAttachmentAspectCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint aspectReferenceCount;
        public unsafe VkInputAttachmentAspectReference* pAspectReferences;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageViewUsageCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageUsageFlags usage;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineTessellationDomainOriginStateCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkTessellationDomainOrigin domainOrigin;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassMultiviewCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint subpassCount;
        public unsafe uint* pViewMasks;
        public uint dependencyCount;
        public unsafe int* pViewOffsets;
        public uint correlationMaskCount;
        public unsafe uint* pCorrelationMasks;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMultiviewFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint multiview;
        public uint multiviewGeometryShader;
        public uint multiviewTessellationShader;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMultiviewProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxMultiviewViewCount;
        public uint maxMultiviewInstanceIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVariablePointersFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint variablePointersStorageBuffer;
        public uint variablePointers;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceProtectedMemoryFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint protectedMemory;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceProtectedMemoryProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint protectedNoFault;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceQueueInfo2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDeviceQueueCreateFlags flags;
        public uint queueFamilyIndex;
        public uint queueIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkProtectedSubmitInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint protectedSubmit;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSamplerYcbcrConversionCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkFormat format;
        public VkSamplerYcbcrModelConversion ycbcrModel;
        public VkSamplerYcbcrRange ycbcrRange;
        public VkComponentMapping components;
        public VkChromaLocation xChromaOffset;
        public VkChromaLocation yChromaOffset;
        public VkFilter chromaFilter;
        public uint forceExplicitReconstruction;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSamplerYcbcrConversionInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSamplerYcbcrConversion conversion;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindImagePlaneMemoryInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageAspectFlagBits planeAspect;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImagePlaneMemoryRequirementsInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageAspectFlagBits planeAspect;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSamplerYcbcrConversionFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint samplerYcbcrConversion;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSamplerYcbcrConversionImageFormatProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint combinedImageSamplerDescriptorCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorUpdateTemplateEntry
    {
        public uint dstBinding;
        public uint dstArrayElement;
        public uint descriptorCount;
        public VkDescriptorType descriptorType;
        public uint offset;
        public uint stride;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorUpdateTemplateCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDescriptorUpdateTemplateCreateFlags flags;
        public uint descriptorUpdateEntryCount;
        public unsafe VkDescriptorUpdateTemplateEntry* pDescriptorUpdateEntries;
        public VkDescriptorUpdateTemplateType templateType;
        public VkDescriptorSetLayout descriptorSetLayout;
        public VkPipelineBindPoint pipelineBindPoint;
        public VkPipelineLayout pipelineLayout;
        public uint set;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalMemoryProperties
    {
        public VkExternalMemoryFeatureFlags externalMemoryFeatures;
        public VkExternalMemoryHandleTypeFlags exportFromImportedHandleTypes;
        public VkExternalMemoryHandleTypeFlags compatibleHandleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExternalImageFormatInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExternalMemoryHandleTypeFlagBits handleType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalImageFormatProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExternalMemoryProperties externalMemoryProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExternalBufferInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkBufferCreateFlags flags;
        public VkBufferUsageFlags usage;
        public VkExternalMemoryHandleTypeFlagBits handleType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalBufferProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExternalMemoryProperties externalMemoryProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceIDProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public unsafe fixed byte deviceUUID[16];
        public unsafe fixed byte driverUUID[16];
        public unsafe fixed byte deviceLUID[8];
        public uint deviceNodeMask;
        public uint deviceLUIDValid;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalMemoryImageCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExternalMemoryHandleTypeFlags handleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalMemoryBufferCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExternalMemoryHandleTypeFlags handleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExportMemoryAllocateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExternalMemoryHandleTypeFlags handleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExternalFenceInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExternalFenceHandleTypeFlagBits handleType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalFenceProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExternalFenceHandleTypeFlags exportFromImportedHandleTypes;
        public VkExternalFenceHandleTypeFlags compatibleHandleTypes;
        public VkExternalFenceFeatureFlags externalFenceFeatures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExportFenceCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExternalFenceHandleTypeFlags handleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExportSemaphoreCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExternalSemaphoreHandleTypeFlags handleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExternalSemaphoreInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExternalSemaphoreHandleTypeFlagBits handleType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalSemaphoreProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExternalSemaphoreHandleTypeFlags exportFromImportedHandleTypes;
        public VkExternalSemaphoreHandleTypeFlags compatibleHandleTypes;
        public VkExternalSemaphoreFeatureFlags externalSemaphoreFeatures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMaintenance3Properties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxPerSetDescriptors;
        public ulong maxMemoryAllocationSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorSetLayoutSupport
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint supported;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderDrawParametersFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderDrawParameters;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVulkan11Features
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint storageBuffer16BitAccess;
        public uint uniformAndStorageBuffer16BitAccess;
        public uint storagePushConstant16;
        public uint storageInputOutput16;
        public uint multiview;
        public uint multiviewGeometryShader;
        public uint multiviewTessellationShader;
        public uint variablePointersStorageBuffer;
        public uint variablePointers;
        public uint protectedMemory;
        public uint samplerYcbcrConversion;
        public uint shaderDrawParameters;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVulkan11Properties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public unsafe fixed byte deviceUUID[16];
        public unsafe fixed byte driverUUID[16];
        public unsafe fixed byte deviceLUID[8];
        public uint deviceNodeMask;
        public uint deviceLUIDValid;
        public uint subgroupSize;
        public VkShaderStageFlags subgroupSupportedStages;
        public VkSubgroupFeatureFlags subgroupSupportedOperations;
        public uint subgroupQuadOperationsInAllStages;
        public VkPointClippingBehavior pointClippingBehavior;
        public uint maxMultiviewViewCount;
        public uint maxMultiviewInstanceIndex;
        public uint protectedNoFault;
        public uint maxPerSetDescriptors;
        public ulong maxMemoryAllocationSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVulkan12Features
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint samplerMirrorClampToEdge;
        public uint drawIndirectCount;
        public uint storageBuffer8BitAccess;
        public uint uniformAndStorageBuffer8BitAccess;
        public uint storagePushConstant8;
        public uint shaderBufferInt64Atomics;
        public uint shaderSharedInt64Atomics;
        public uint shaderFloat16;
        public uint shaderInt8;
        public uint descriptorIndexing;
        public uint shaderInputAttachmentArrayDynamicIndexing;
        public uint shaderUniformTexelBufferArrayDynamicIndexing;
        public uint shaderStorageTexelBufferArrayDynamicIndexing;
        public uint shaderUniformBufferArrayNonUniformIndexing;
        public uint shaderSampledImageArrayNonUniformIndexing;
        public uint shaderStorageBufferArrayNonUniformIndexing;
        public uint shaderStorageImageArrayNonUniformIndexing;
        public uint shaderInputAttachmentArrayNonUniformIndexing;
        public uint shaderUniformTexelBufferArrayNonUniformIndexing;
        public uint shaderStorageTexelBufferArrayNonUniformIndexing;
        public uint descriptorBindingUniformBufferUpdateAfterBind;
        public uint descriptorBindingSampledImageUpdateAfterBind;
        public uint descriptorBindingStorageImageUpdateAfterBind;
        public uint descriptorBindingStorageBufferUpdateAfterBind;
        public uint descriptorBindingUniformTexelBufferUpdateAfterBind;
        public uint descriptorBindingStorageTexelBufferUpdateAfterBind;
        public uint descriptorBindingUpdateUnusedWhilePending;
        public uint descriptorBindingPartiallyBound;
        public uint descriptorBindingVariableDescriptorCount;
        public uint runtimeDescriptorArray;
        public uint samplerFilterMinmax;
        public uint scalarBlockLayout;
        public uint imagelessFramebuffer;
        public uint uniformBufferStandardLayout;
        public uint shaderSubgroupExtendedTypes;
        public uint separateDepthStencilLayouts;
        public uint hostQueryReset;
        public uint timelineSemaphore;
        public uint bufferDeviceAddress;
        public uint bufferDeviceAddressCaptureReplay;
        public uint bufferDeviceAddressMultiDevice;
        public uint vulkanMemoryModel;
        public uint vulkanMemoryModelDeviceScope;
        public uint vulkanMemoryModelAvailabilityVisibilityChains;
        public uint shaderOutputViewportIndex;
        public uint shaderOutputLayer;
        public uint subgroupBroadcastDynamicId;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkConformanceVersion
    {
        public byte major;
        public byte minor;
        public byte subminor;
        public byte patch;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVulkan12Properties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDriverId driverID;
        public unsafe fixed byte driverName[256];
        public unsafe fixed byte driverInfo[256];
        public VkConformanceVersion conformanceVersion;
        public VkShaderFloatControlsIndependence denormBehaviorIndependence;
        public VkShaderFloatControlsIndependence roundingModeIndependence;
        public uint shaderSignedZeroInfNanPreserveFloat16;
        public uint shaderSignedZeroInfNanPreserveFloat32;
        public uint shaderSignedZeroInfNanPreserveFloat64;
        public uint shaderDenormPreserveFloat16;
        public uint shaderDenormPreserveFloat32;
        public uint shaderDenormPreserveFloat64;
        public uint shaderDenormFlushToZeroFloat16;
        public uint shaderDenormFlushToZeroFloat32;
        public uint shaderDenormFlushToZeroFloat64;
        public uint shaderRoundingModeRTEFloat16;
        public uint shaderRoundingModeRTEFloat32;
        public uint shaderRoundingModeRTEFloat64;
        public uint shaderRoundingModeRTZFloat16;
        public uint shaderRoundingModeRTZFloat32;
        public uint shaderRoundingModeRTZFloat64;
        public uint maxUpdateAfterBindDescriptorsInAllPools;
        public uint shaderUniformBufferArrayNonUniformIndexingNative;
        public uint shaderSampledImageArrayNonUniformIndexingNative;
        public uint shaderStorageBufferArrayNonUniformIndexingNative;
        public uint shaderStorageImageArrayNonUniformIndexingNative;
        public uint shaderInputAttachmentArrayNonUniformIndexingNative;
        public uint robustBufferAccessUpdateAfterBind;
        public uint quadDivergentImplicitLod;
        public uint maxPerStageDescriptorUpdateAfterBindSamplers;
        public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
        public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
        public uint maxPerStageDescriptorUpdateAfterBindSampledImages;
        public uint maxPerStageDescriptorUpdateAfterBindStorageImages;
        public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
        public uint maxPerStageUpdateAfterBindResources;
        public uint maxDescriptorSetUpdateAfterBindSamplers;
        public uint maxDescriptorSetUpdateAfterBindUniformBuffers;
        public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
        public uint maxDescriptorSetUpdateAfterBindStorageBuffers;
        public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
        public uint maxDescriptorSetUpdateAfterBindSampledImages;
        public uint maxDescriptorSetUpdateAfterBindStorageImages;
        public uint maxDescriptorSetUpdateAfterBindInputAttachments;
        public VkResolveModeFlags supportedDepthResolveModes;
        public VkResolveModeFlags supportedStencilResolveModes;
        public uint independentResolveNone;
        public uint independentResolve;
        public uint filterMinmaxSingleComponentFormats;
        public uint filterMinmaxImageComponentMapping;
        public ulong maxTimelineSemaphoreValueDifference;
        public VkSampleCountFlags framebufferIntegerColorSampleCounts;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageFormatListCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint viewFormatCount;
        public unsafe VkFormat* pViewFormats;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAttachmentDescription2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkAttachmentDescriptionFlags flags;
        public VkFormat format;
        public VkSampleCountFlagBits samples;
        public VkAttachmentLoadOp loadOp;
        public VkAttachmentStoreOp storeOp;
        public VkAttachmentLoadOp stencilLoadOp;
        public VkAttachmentStoreOp stencilStoreOp;
        public VkImageLayout initialLayout;
        public VkImageLayout finalLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAttachmentReference2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint attachment;
        public VkImageLayout layout;
        public VkImageAspectFlags aspectMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassDescription2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSubpassDescriptionFlags flags;
        public VkPipelineBindPoint pipelineBindPoint;
        public uint viewMask;
        public uint inputAttachmentCount;
        public unsafe VkAttachmentReference2* pInputAttachments;
        public uint colorAttachmentCount;
        public unsafe VkAttachmentReference2* pColorAttachments;
        public unsafe VkAttachmentReference2* pResolveAttachments;
        public unsafe VkAttachmentReference2* pDepthStencilAttachment;
        public uint preserveAttachmentCount;
        public unsafe uint* pPreserveAttachments;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassDependency2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint srcSubpass;
        public uint dstSubpass;
        public VkPipelineStageFlags srcStageMask;
        public VkPipelineStageFlags dstStageMask;
        public VkAccessFlags srcAccessMask;
        public VkAccessFlags dstAccessMask;
        public VkDependencyFlags dependencyFlags;
        public int viewOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassCreateInfo2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkRenderPassCreateFlags flags;
        public uint attachmentCount;
        public unsafe VkAttachmentDescription2* pAttachments;
        public uint subpassCount;
        public unsafe VkSubpassDescription2* pSubpasses;
        public uint dependencyCount;
        public unsafe VkSubpassDependency2* pDependencies;
        public uint correlatedViewMaskCount;
        public unsafe uint* pCorrelatedViewMasks;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassBeginInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSubpassContents contents;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassEndInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevice8BitStorageFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint storageBuffer8BitAccess;
        public uint uniformAndStorageBuffer8BitAccess;
        public uint storagePushConstant8;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDriverProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDriverId driverID;
        public unsafe fixed byte driverName[256];
        public unsafe fixed byte driverInfo[256];
        public VkConformanceVersion conformanceVersion;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderAtomicInt64Features
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderBufferInt64Atomics;
        public uint shaderSharedInt64Atomics;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderFloat16Int8Features
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderFloat16;
        public uint shaderInt8;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFloatControlsProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkShaderFloatControlsIndependence denormBehaviorIndependence;
        public VkShaderFloatControlsIndependence roundingModeIndependence;
        public uint shaderSignedZeroInfNanPreserveFloat16;
        public uint shaderSignedZeroInfNanPreserveFloat32;
        public uint shaderSignedZeroInfNanPreserveFloat64;
        public uint shaderDenormPreserveFloat16;
        public uint shaderDenormPreserveFloat32;
        public uint shaderDenormPreserveFloat64;
        public uint shaderDenormFlushToZeroFloat16;
        public uint shaderDenormFlushToZeroFloat32;
        public uint shaderDenormFlushToZeroFloat64;
        public uint shaderRoundingModeRTEFloat16;
        public uint shaderRoundingModeRTEFloat32;
        public uint shaderRoundingModeRTEFloat64;
        public uint shaderRoundingModeRTZFloat16;
        public uint shaderRoundingModeRTZFloat32;
        public uint shaderRoundingModeRTZFloat64;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorSetLayoutBindingFlagsCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint bindingCount;
        public unsafe VkDescriptorBindingFlags* pBindingFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDescriptorIndexingFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderInputAttachmentArrayDynamicIndexing;
        public uint shaderUniformTexelBufferArrayDynamicIndexing;
        public uint shaderStorageTexelBufferArrayDynamicIndexing;
        public uint shaderUniformBufferArrayNonUniformIndexing;
        public uint shaderSampledImageArrayNonUniformIndexing;
        public uint shaderStorageBufferArrayNonUniformIndexing;
        public uint shaderStorageImageArrayNonUniformIndexing;
        public uint shaderInputAttachmentArrayNonUniformIndexing;
        public uint shaderUniformTexelBufferArrayNonUniformIndexing;
        public uint shaderStorageTexelBufferArrayNonUniformIndexing;
        public uint descriptorBindingUniformBufferUpdateAfterBind;
        public uint descriptorBindingSampledImageUpdateAfterBind;
        public uint descriptorBindingStorageImageUpdateAfterBind;
        public uint descriptorBindingStorageBufferUpdateAfterBind;
        public uint descriptorBindingUniformTexelBufferUpdateAfterBind;
        public uint descriptorBindingStorageTexelBufferUpdateAfterBind;
        public uint descriptorBindingUpdateUnusedWhilePending;
        public uint descriptorBindingPartiallyBound;
        public uint descriptorBindingVariableDescriptorCount;
        public uint runtimeDescriptorArray;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDescriptorIndexingProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxUpdateAfterBindDescriptorsInAllPools;
        public uint shaderUniformBufferArrayNonUniformIndexingNative;
        public uint shaderSampledImageArrayNonUniformIndexingNative;
        public uint shaderStorageBufferArrayNonUniformIndexingNative;
        public uint shaderStorageImageArrayNonUniformIndexingNative;
        public uint shaderInputAttachmentArrayNonUniformIndexingNative;
        public uint robustBufferAccessUpdateAfterBind;
        public uint quadDivergentImplicitLod;
        public uint maxPerStageDescriptorUpdateAfterBindSamplers;
        public uint maxPerStageDescriptorUpdateAfterBindUniformBuffers;
        public uint maxPerStageDescriptorUpdateAfterBindStorageBuffers;
        public uint maxPerStageDescriptorUpdateAfterBindSampledImages;
        public uint maxPerStageDescriptorUpdateAfterBindStorageImages;
        public uint maxPerStageDescriptorUpdateAfterBindInputAttachments;
        public uint maxPerStageUpdateAfterBindResources;
        public uint maxDescriptorSetUpdateAfterBindSamplers;
        public uint maxDescriptorSetUpdateAfterBindUniformBuffers;
        public uint maxDescriptorSetUpdateAfterBindUniformBuffersDynamic;
        public uint maxDescriptorSetUpdateAfterBindStorageBuffers;
        public uint maxDescriptorSetUpdateAfterBindStorageBuffersDynamic;
        public uint maxDescriptorSetUpdateAfterBindSampledImages;
        public uint maxDescriptorSetUpdateAfterBindStorageImages;
        public uint maxDescriptorSetUpdateAfterBindInputAttachments;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorSetVariableDescriptorCountAllocateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint descriptorSetCount;
        public unsafe uint* pDescriptorCounts;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorSetVariableDescriptorCountLayoutSupport
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxVariableDescriptorCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassDescriptionDepthStencilResolve
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkResolveModeFlagBits depthResolveMode;
        public VkResolveModeFlagBits stencilResolveMode;
        public unsafe VkAttachmentReference2* pDepthStencilResolveAttachment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDepthStencilResolveProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkResolveModeFlags supportedDepthResolveModes;
        public VkResolveModeFlags supportedStencilResolveModes;
        public uint independentResolveNone;
        public uint independentResolve;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceScalarBlockLayoutFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint scalarBlockLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageStencilUsageCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageUsageFlags stencilUsage;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSamplerReductionModeCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSamplerReductionMode reductionMode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSamplerFilterMinmaxProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint filterMinmaxSingleComponentFormats;
        public uint filterMinmaxImageComponentMapping;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVulkanMemoryModelFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint vulkanMemoryModel;
        public uint vulkanMemoryModelDeviceScope;
        public uint vulkanMemoryModelAvailabilityVisibilityChains;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceImagelessFramebufferFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint imagelessFramebuffer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFramebufferAttachmentImageInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageCreateFlags flags;
        public VkImageUsageFlags usage;
        public uint width;
        public uint height;
        public uint layerCount;
        public uint viewFormatCount;
        public unsafe VkFormat* pViewFormats;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFramebufferAttachmentsCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint attachmentImageInfoCount;
        public unsafe VkFramebufferAttachmentImageInfo* pAttachmentImageInfos;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassAttachmentBeginInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint attachmentCount;
        public unsafe VkImageView* pAttachments;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceUniformBufferStandardLayoutFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint uniformBufferStandardLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderSubgroupExtendedTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint separateDepthStencilLayouts;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAttachmentReferenceStencilLayout
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageLayout stencilLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAttachmentDescriptionStencilLayout
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageLayout stencilInitialLayout;
        public VkImageLayout stencilFinalLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceHostQueryResetFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint hostQueryReset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceTimelineSemaphoreFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint timelineSemaphore;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceTimelineSemaphoreProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong maxTimelineSemaphoreValueDifference;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSemaphoreTypeCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSemaphoreType semaphoreType;
        public ulong initialValue;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkTimelineSemaphoreSubmitInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint waitSemaphoreValueCount;
        public unsafe ulong* pWaitSemaphoreValues;
        public uint signalSemaphoreValueCount;
        public unsafe ulong* pSignalSemaphoreValues;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSemaphoreWaitInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSemaphoreWaitFlags flags;
        public uint semaphoreCount;
        public unsafe VkSemaphore* pSemaphores;
        public unsafe ulong* pValues;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSemaphoreSignalInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSemaphore semaphore;
        public ulong value;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceBufferDeviceAddressFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint bufferDeviceAddress;
        public uint bufferDeviceAddressCaptureReplay;
        public uint bufferDeviceAddressMultiDevice;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferDeviceAddressInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkBuffer buffer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferOpaqueCaptureAddressCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong opaqueCaptureAddress;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryOpaqueCaptureAddressAllocateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong opaqueCaptureAddress;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceMemoryOpaqueCaptureAddressInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDeviceMemory memory;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVulkan13Features
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint robustImageAccess;
        public uint inlineUniformBlock;
        public uint descriptorBindingInlineUniformBlockUpdateAfterBind;
        public uint pipelineCreationCacheControl;
        public uint privateData;
        public uint shaderDemoteToHelperInvocation;
        public uint shaderTerminateInvocation;
        public uint subgroupSizeControl;
        public uint computeFullSubgroups;
        public uint synchronization2;
        public uint textureCompressionASTC_HDR;
        public uint shaderZeroInitializeWorkgroupMemory;
        public uint dynamicRendering;
        public uint shaderIntegerDotProduct;
        public uint maintenance4;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVulkan13Properties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint minSubgroupSize;
        public uint maxSubgroupSize;
        public uint maxComputeWorkgroupSubgroups;
        public VkShaderStageFlags requiredSubgroupSizeStages;
        public uint maxInlineUniformBlockSize;
        public uint maxPerStageDescriptorInlineUniformBlocks;
        public uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
        public uint maxDescriptorSetInlineUniformBlocks;
        public uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
        public uint maxInlineUniformTotalSize;
        public uint integerDotProduct8BitUnsignedAccelerated;
        public uint integerDotProduct8BitSignedAccelerated;
        public uint integerDotProduct8BitMixedSignednessAccelerated;
        public uint integerDotProduct4x8BitPackedUnsignedAccelerated;
        public uint integerDotProduct4x8BitPackedSignedAccelerated;
        public uint integerDotProduct4x8BitPackedMixedSignednessAccelerated;
        public uint integerDotProduct16BitUnsignedAccelerated;
        public uint integerDotProduct16BitSignedAccelerated;
        public uint integerDotProduct16BitMixedSignednessAccelerated;
        public uint integerDotProduct32BitUnsignedAccelerated;
        public uint integerDotProduct32BitSignedAccelerated;
        public uint integerDotProduct32BitMixedSignednessAccelerated;
        public uint integerDotProduct64BitUnsignedAccelerated;
        public uint integerDotProduct64BitSignedAccelerated;
        public uint integerDotProduct64BitMixedSignednessAccelerated;
        public uint integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
        public uint integerDotProductAccumulatingSaturating8BitSignedAccelerated;
        public uint integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
        public uint integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
        public uint integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
        public uint integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
        public uint integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
        public uint integerDotProductAccumulatingSaturating16BitSignedAccelerated;
        public uint integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
        public uint integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
        public uint integerDotProductAccumulatingSaturating32BitSignedAccelerated;
        public uint integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
        public uint integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
        public uint integerDotProductAccumulatingSaturating64BitSignedAccelerated;
        public uint integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
        public ulong storageTexelBufferOffsetAlignmentBytes;
        public uint storageTexelBufferOffsetSingleTexelAlignment;
        public ulong uniformTexelBufferOffsetAlignmentBytes;
        public uint uniformTexelBufferOffsetSingleTexelAlignment;
        public ulong maxBufferSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineCreationFeedback
    {
        public VkPipelineCreationFeedbackFlags flags;
        public ulong duration;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineCreationFeedbackCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public unsafe VkPipelineCreationFeedback* pPipelineCreationFeedback;
        public uint pipelineStageCreationFeedbackCount;
        public unsafe VkPipelineCreationFeedback* pPipelineStageCreationFeedbacks;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderTerminateInvocationFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderTerminateInvocation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceToolProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public unsafe fixed byte name[256];
        public unsafe fixed byte version[256];
        public VkToolPurposeFlags purposes;
        public unsafe fixed byte description[256];
        public unsafe fixed byte layer[256];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderDemoteToHelperInvocation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePrivateDataFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint privateData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDevicePrivateDataCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint privateDataSlotRequestCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPrivateDataSlotCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPrivateDataSlotCreateFlags flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePipelineCreationCacheControlFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint pipelineCreationCacheControl;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryBarrier2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineStageFlags2 srcStageMask;
        public VkAccessFlags2 srcAccessMask;
        public VkPipelineStageFlags2 dstStageMask;
        public VkAccessFlags2 dstAccessMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferMemoryBarrier2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineStageFlags2 srcStageMask;
        public VkAccessFlags2 srcAccessMask;
        public VkPipelineStageFlags2 dstStageMask;
        public VkAccessFlags2 dstAccessMask;
        public uint srcQueueFamilyIndex;
        public uint dstQueueFamilyIndex;
        public VkBuffer buffer;
        public ulong offset;
        public ulong size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageMemoryBarrier2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineStageFlags2 srcStageMask;
        public VkAccessFlags2 srcAccessMask;
        public VkPipelineStageFlags2 dstStageMask;
        public VkAccessFlags2 dstAccessMask;
        public VkImageLayout oldLayout;
        public VkImageLayout newLayout;
        public uint srcQueueFamilyIndex;
        public uint dstQueueFamilyIndex;
        public VkImage image;
        public VkImageSubresourceRange subresourceRange;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDependencyInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDependencyFlags dependencyFlags;
        public uint memoryBarrierCount;
        public unsafe VkMemoryBarrier2* pMemoryBarriers;
        public uint bufferMemoryBarrierCount;
        public unsafe VkBufferMemoryBarrier2* pBufferMemoryBarriers;
        public uint imageMemoryBarrierCount;
        public unsafe VkImageMemoryBarrier2* pImageMemoryBarriers;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSemaphoreSubmitInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSemaphore semaphore;
        public ulong value;
        public VkPipelineStageFlags2 stageMask;
        public uint deviceIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandBufferSubmitInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkCommandBuffer commandBuffer;
        public uint deviceMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubmitInfo2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSubmitFlags flags;
        public uint waitSemaphoreInfoCount;
        public unsafe VkSemaphoreSubmitInfo* pWaitSemaphoreInfos;
        public uint commandBufferInfoCount;
        public unsafe VkCommandBufferSubmitInfo* pCommandBufferInfos;
        public uint signalSemaphoreInfoCount;
        public unsafe VkSemaphoreSubmitInfo* pSignalSemaphoreInfos;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSynchronization2Features
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint synchronization2;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderZeroInitializeWorkgroupMemory;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceImageRobustnessFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint robustImageAccess;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferCopy2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong srcOffset;
        public ulong dstOffset;
        public ulong size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyBufferInfo2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkBuffer srcBuffer;
        public VkBuffer dstBuffer;
        public uint regionCount;
        public unsafe VkBufferCopy2* pRegions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageCopy2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageSubresourceLayers srcSubresource;
        public VkOffset3D srcOffset;
        public VkImageSubresourceLayers dstSubresource;
        public VkOffset3D dstOffset;
        public VkExtent3D extent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyImageInfo2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImage srcImage;
        public VkImageLayout srcImageLayout;
        public VkImage dstImage;
        public VkImageLayout dstImageLayout;
        public uint regionCount;
        public unsafe VkImageCopy2* pRegions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferImageCopy2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong bufferOffset;
        public uint bufferRowLength;
        public uint bufferImageHeight;
        public VkImageSubresourceLayers imageSubresource;
        public VkOffset3D imageOffset;
        public VkExtent3D imageExtent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyBufferToImageInfo2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkBuffer srcBuffer;
        public VkImage dstImage;
        public VkImageLayout dstImageLayout;
        public uint regionCount;
        public unsafe VkBufferImageCopy2* pRegions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyImageToBufferInfo2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImage srcImage;
        public VkImageLayout srcImageLayout;
        public VkBuffer dstBuffer;
        public uint regionCount;
        public unsafe VkBufferImageCopy2* pRegions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageBlit2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageSubresourceLayers srcSubresource;
        public VkOffset3D srcOffsets_0;
        public VkOffset3D srcOffsets_1;
        public VkImageSubresourceLayers dstSubresource;
        public VkOffset3D dstOffsets_0;
        public VkOffset3D dstOffsets_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBlitImageInfo2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImage srcImage;
        public VkImageLayout srcImageLayout;
        public VkImage dstImage;
        public VkImageLayout dstImageLayout;
        public uint regionCount;
        public unsafe VkImageBlit2* pRegions;
        public VkFilter filter;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageResolve2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageSubresourceLayers srcSubresource;
        public VkOffset3D srcOffset;
        public VkImageSubresourceLayers dstSubresource;
        public VkOffset3D dstOffset;
        public VkExtent3D extent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkResolveImageInfo2
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImage srcImage;
        public VkImageLayout srcImageLayout;
        public VkImage dstImage;
        public VkImageLayout dstImageLayout;
        public uint regionCount;
        public unsafe VkImageResolve2* pRegions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSubgroupSizeControlFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint subgroupSizeControl;
        public uint computeFullSubgroups;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSubgroupSizeControlProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint minSubgroupSize;
        public uint maxSubgroupSize;
        public uint maxComputeWorkgroupSubgroups;
        public VkShaderStageFlags requiredSubgroupSizeStages;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineShaderStageRequiredSubgroupSizeCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint requiredSubgroupSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceInlineUniformBlockFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint inlineUniformBlock;
        public uint descriptorBindingInlineUniformBlockUpdateAfterBind;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceInlineUniformBlockProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxInlineUniformBlockSize;
        public uint maxPerStageDescriptorInlineUniformBlocks;
        public uint maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks;
        public uint maxDescriptorSetInlineUniformBlocks;
        public uint maxDescriptorSetUpdateAfterBindInlineUniformBlocks;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkWriteDescriptorSetInlineUniformBlock
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint dataSize;
        public unsafe void* pData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDescriptorPoolInlineUniformBlockCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxInlineUniformBlockBindings;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceTextureCompressionASTCHDRFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint textureCompressionASTC_HDR;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderingAttachmentInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageView imageView;
        public VkImageLayout imageLayout;
        public VkResolveModeFlagBits resolveMode;
        public VkImageView resolveImageView;
        public VkImageLayout resolveImageLayout;
        public VkAttachmentLoadOp loadOp;
        public VkAttachmentStoreOp storeOp;
        public VkClearValue clearValue;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderingInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkRenderingFlags flags;
        public VkRect2D renderArea;
        public uint layerCount;
        public uint viewMask;
        public uint colorAttachmentCount;
        public unsafe VkRenderingAttachmentInfo* pColorAttachments;
        public unsafe VkRenderingAttachmentInfo* pDepthAttachment;
        public unsafe VkRenderingAttachmentInfo* pStencilAttachment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRenderingCreateInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint viewMask;
        public uint colorAttachmentCount;
        public unsafe VkFormat* pColorAttachmentFormats;
        public VkFormat depthAttachmentFormat;
        public VkFormat stencilAttachmentFormat;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDynamicRenderingFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint dynamicRendering;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandBufferInheritanceRenderingInfo
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkRenderingFlags flags;
        public uint viewMask;
        public uint colorAttachmentCount;
        public unsafe VkFormat* pColorAttachmentFormats;
        public VkFormat depthAttachmentFormat;
        public VkFormat stencilAttachmentFormat;
        public VkSampleCountFlagBits rasterizationSamples;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderIntegerDotProductFeatures
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderIntegerDotProduct;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderIntegerDotProductProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint integerDotProduct8BitUnsignedAccelerated;
        public uint integerDotProduct8BitSignedAccelerated;
        public uint integerDotProduct8BitMixedSignednessAccelerated;
        public uint integerDotProduct4x8BitPackedUnsignedAccelerated;
        public uint integerDotProduct4x8BitPackedSignedAccelerated;
        public uint integerDotProduct4x8BitPackedMixedSignednessAccelerated;
        public uint integerDotProduct16BitUnsignedAccelerated;
        public uint integerDotProduct16BitSignedAccelerated;
        public uint integerDotProduct16BitMixedSignednessAccelerated;
        public uint integerDotProduct32BitUnsignedAccelerated;
        public uint integerDotProduct32BitSignedAccelerated;
        public uint integerDotProduct32BitMixedSignednessAccelerated;
        public uint integerDotProduct64BitUnsignedAccelerated;
        public uint integerDotProduct64BitSignedAccelerated;
        public uint integerDotProduct64BitMixedSignednessAccelerated;
        public uint integerDotProductAccumulatingSaturating8BitUnsignedAccelerated;
        public uint integerDotProductAccumulatingSaturating8BitSignedAccelerated;
        public uint integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated;
        public uint integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated;
        public uint integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated;
        public uint integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated;
        public uint integerDotProductAccumulatingSaturating16BitUnsignedAccelerated;
        public uint integerDotProductAccumulatingSaturating16BitSignedAccelerated;
        public uint integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated;
        public uint integerDotProductAccumulatingSaturating32BitUnsignedAccelerated;
        public uint integerDotProductAccumulatingSaturating32BitSignedAccelerated;
        public uint integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated;
        public uint integerDotProductAccumulatingSaturating64BitUnsignedAccelerated;
        public uint integerDotProductAccumulatingSaturating64BitSignedAccelerated;
        public uint integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceTexelBufferAlignmentProperties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong storageTexelBufferOffsetAlignmentBytes;
        public uint storageTexelBufferOffsetSingleTexelAlignment;
        public ulong uniformTexelBufferOffsetAlignmentBytes;
        public uint uniformTexelBufferOffsetSingleTexelAlignment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFormatProperties3
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkFormatFeatureFlags2 linearTilingFeatures;
        public VkFormatFeatureFlags2 optimalTilingFeatures;
        public VkFormatFeatureFlags2 bufferFeatures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMaintenance4Features
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maintenance4;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMaintenance4Properties
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong maxBufferSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceBufferMemoryRequirements
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public unsafe VkBufferCreateInfo* pCreateInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceImageMemoryRequirements
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public unsafe VkImageCreateInfo* pCreateInfo;
        public VkImageAspectFlagBits planeAspect;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSurfaceCapabilitiesKHR
    {
        public uint minImageCount;
        public uint maxImageCount;
        public VkExtent2D currentExtent;
        public VkExtent2D minImageExtent;
        public VkExtent2D maxImageExtent;
        public uint maxImageArrayLayers;
        public VkSurfaceTransformFlagsKHR supportedTransforms;
        public VkSurfaceTransformFlagBitsKHR currentTransform;
        public VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
        public VkImageUsageFlags supportedUsageFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSurfaceFormatKHR
    {
        public VkFormat format;
        public VkColorSpaceKHR colorSpace;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSwapchainCreateInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSwapchainCreateFlagsKHR flags;
        public VkSurfaceKHR surface;
        public uint minImageCount;
        public VkFormat imageFormat;
        public VkColorSpaceKHR imageColorSpace;
        public VkExtent2D imageExtent;
        public uint imageArrayLayers;
        public VkImageUsageFlags imageUsage;
        public VkSharingMode imageSharingMode;
        public uint queueFamilyIndexCount;
        public unsafe uint* pQueueFamilyIndices;
        public VkSurfaceTransformFlagBitsKHR preTransform;
        public VkCompositeAlphaFlagBitsKHR compositeAlpha;
        public VkPresentModeKHR presentMode;
        public uint clipped;
        public VkSwapchainKHR oldSwapchain;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPresentInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint waitSemaphoreCount;
        public unsafe VkSemaphore* pWaitSemaphores;
        public uint swapchainCount;
        public unsafe VkSwapchainKHR* pSwapchains;
        public unsafe uint* pImageIndices;
        public unsafe VkResult* pResults;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageSwapchainCreateInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSwapchainKHR swapchain;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindImageMemorySwapchainInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSwapchainKHR swapchain;
        public uint imageIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAcquireNextImageInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSwapchainKHR swapchain;
        public ulong timeout;
        public VkSemaphore semaphore;
        public VkFence fence;
        public uint deviceMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceGroupPresentCapabilitiesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public unsafe fixed uint presentMask[32];
        public VkDeviceGroupPresentModeFlagsKHR modes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceGroupPresentInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint swapchainCount;
        public unsafe uint* pDeviceMasks;
        public VkDeviceGroupPresentModeFlagBitsKHR mode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceGroupSwapchainCreateInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDeviceGroupPresentModeFlagsKHR modes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayModeParametersKHR
    {
        public VkExtent2D visibleRegion;
        public uint refreshRate;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayModeCreateInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDisplayModeCreateFlagsKHR flags;
        public VkDisplayModeParametersKHR parameters;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayModePropertiesKHR
    {
        public VkDisplayModeKHR displayMode;
        public VkDisplayModeParametersKHR parameters;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayPlaneCapabilitiesKHR
    {
        public VkDisplayPlaneAlphaFlagsKHR supportedAlpha;
        public VkOffset2D minSrcPosition;
        public VkOffset2D maxSrcPosition;
        public VkExtent2D minSrcExtent;
        public VkExtent2D maxSrcExtent;
        public VkOffset2D minDstPosition;
        public VkOffset2D maxDstPosition;
        public VkExtent2D minDstExtent;
        public VkExtent2D maxDstExtent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayPlanePropertiesKHR
    {
        public VkDisplayKHR currentDisplay;
        public uint currentStackIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayPropertiesKHR
    {
        public VkDisplayKHR display;
        public unsafe byte* displayName;
        public VkExtent2D physicalDimensions;
        public VkExtent2D physicalResolution;
        public VkSurfaceTransformFlagsKHR supportedTransforms;
        public uint planeReorderPossible;
        public uint persistentContent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplaySurfaceCreateInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDisplaySurfaceCreateFlagsKHR flags;
        public VkDisplayModeKHR displayMode;
        public uint planeIndex;
        public uint planeStackIndex;
        public VkSurfaceTransformFlagBitsKHR transform;
        public float globalAlpha;
        public VkDisplayPlaneAlphaFlagBitsKHR alphaMode;
        public VkExtent2D imageExtent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayPresentInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkRect2D srcRect;
        public VkRect2D dstRect;
        public uint persistent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderingFragmentShadingRateAttachmentInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageView imageView;
        public VkImageLayout imageLayout;
        public VkExtent2D shadingRateAttachmentTexelSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderingFragmentDensityMapAttachmentInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageView imageView;
        public VkImageLayout imageLayout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAttachmentSampleCountInfoAMD
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint colorAttachmentCount;
        public unsafe VkSampleCountFlagBits* pColorAttachmentSamples;
        public VkSampleCountFlagBits depthStencilAttachmentSamples;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMultiviewPerViewAttributesInfoNVX
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint perViewAttributes;
        public uint perViewAttributesPositionXOnly;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImportMemoryFdInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExternalMemoryHandleTypeFlagBits handleType;
        public int fd;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryFdPropertiesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint memoryTypeBits;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryGetFdInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDeviceMemory memory;
        public VkExternalMemoryHandleTypeFlagBits handleType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImportSemaphoreFdInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSemaphore semaphore;
        public VkSemaphoreImportFlags flags;
        public VkExternalSemaphoreHandleTypeFlagBits handleType;
        public int fd;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSemaphoreGetFdInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSemaphore semaphore;
        public VkExternalSemaphoreHandleTypeFlagBits handleType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePushDescriptorPropertiesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxPushDescriptors;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRectLayerKHR
    {
        public VkOffset2D offset;
        public VkExtent2D extent;
        public uint layer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPresentRegionKHR
    {
        public uint rectangleCount;
        public unsafe VkRectLayerKHR* pRectangles;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPresentRegionsKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint swapchainCount;
        public unsafe VkPresentRegionKHR* pRegions;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSharedPresentSurfaceCapabilitiesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageUsageFlags sharedPresentSupportedUsageFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImportFenceFdInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkFence fence;
        public VkFenceImportFlags flags;
        public VkExternalFenceHandleTypeFlagBits handleType;
        public int fd;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFenceGetFdInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkFence fence;
        public VkExternalFenceHandleTypeFlagBits handleType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePerformanceQueryFeaturesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint performanceCounterQueryPools;
        public uint performanceCounterMultipleQueryPools;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePerformanceQueryPropertiesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint allowCommandBufferQueryCopies;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPerformanceCounterKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPerformanceCounterUnitKHR unit;
        public VkPerformanceCounterScopeKHR scope;
        public VkPerformanceCounterStorageKHR storage;
        public unsafe fixed byte uuid[16];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPerformanceCounterDescriptionKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPerformanceCounterDescriptionFlagsKHR flags;
        public unsafe fixed byte name[256];
        public unsafe fixed byte category[256];
        public unsafe fixed byte description[256];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkQueryPoolPerformanceCreateInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint queueFamilyIndex;
        public uint counterIndexCount;
        public unsafe uint* pCounterIndices;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkPerformanceCounterResultKHR
    {
        [FieldOffset(0)]
        public int int32;
        [FieldOffset(0)]
        public long int64;
        [FieldOffset(0)]
        public uint uint32;
        [FieldOffset(0)]
        public ulong uint64;
        [FieldOffset(0)]
        public float float32;
        [FieldOffset(0)]
        public double float64;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAcquireProfilingLockInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkAcquireProfilingLockFlagsKHR flags;
        public ulong timeout;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPerformanceQuerySubmitInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint counterPassIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSurfaceInfo2KHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSurfaceKHR surface;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSurfaceCapabilities2KHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSurfaceCapabilitiesKHR surfaceCapabilities;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSurfaceFormat2KHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSurfaceFormatKHR surfaceFormat;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayProperties2KHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDisplayPropertiesKHR displayProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayPlaneProperties2KHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDisplayPlanePropertiesKHR displayPlaneProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayModeProperties2KHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDisplayModePropertiesKHR displayModeProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayPlaneInfo2KHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDisplayModeKHR mode;
        public uint planeIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayPlaneCapabilities2KHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDisplayPlaneCapabilitiesKHR capabilities;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderClockFeaturesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderSubgroupClock;
        public uint shaderDeviceClock;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceQueueGlobalPriorityCreateInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkQueueGlobalPriorityKHR globalPriority;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint globalPriorityQuery;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkQueueFamilyGlobalPriorityPropertiesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint priorityCount;
        public VkQueueGlobalPriorityKHR priorities_0;
        public VkQueueGlobalPriorityKHR priorities_1;
        public VkQueueGlobalPriorityKHR priorities_2;
        public VkQueueGlobalPriorityKHR priorities_3;
        public VkQueueGlobalPriorityKHR priorities_4;
        public VkQueueGlobalPriorityKHR priorities_5;
        public VkQueueGlobalPriorityKHR priorities_6;
        public VkQueueGlobalPriorityKHR priorities_7;
        public VkQueueGlobalPriorityKHR priorities_8;
        public VkQueueGlobalPriorityKHR priorities_9;
        public VkQueueGlobalPriorityKHR priorities_10;
        public VkQueueGlobalPriorityKHR priorities_11;
        public VkQueueGlobalPriorityKHR priorities_12;
        public VkQueueGlobalPriorityKHR priorities_13;
        public VkQueueGlobalPriorityKHR priorities_14;
        public VkQueueGlobalPriorityKHR priorities_15;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFragmentShadingRateAttachmentInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public unsafe VkAttachmentReference2* pFragmentShadingRateAttachment;
        public VkExtent2D shadingRateAttachmentTexelSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineFragmentShadingRateStateCreateInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExtent2D fragmentSize;
        public VkFragmentShadingRateCombinerOpKHR combinerOps_0;
        public VkFragmentShadingRateCombinerOpKHR combinerOps_1;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentShadingRateFeaturesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint pipelineFragmentShadingRate;
        public uint primitiveFragmentShadingRate;
        public uint attachmentFragmentShadingRate;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentShadingRatePropertiesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExtent2D minFragmentShadingRateAttachmentTexelSize;
        public VkExtent2D maxFragmentShadingRateAttachmentTexelSize;
        public uint maxFragmentShadingRateAttachmentTexelSizeAspectRatio;
        public uint primitiveFragmentShadingRateWithMultipleViewports;
        public uint layeredShadingRateAttachments;
        public uint fragmentShadingRateNonTrivialCombinerOps;
        public VkExtent2D maxFragmentSize;
        public uint maxFragmentSizeAspectRatio;
        public uint maxFragmentShadingRateCoverageSamples;
        public VkSampleCountFlagBits maxFragmentShadingRateRasterizationSamples;
        public uint fragmentShadingRateWithShaderDepthStencilWrites;
        public uint fragmentShadingRateWithSampleMask;
        public uint fragmentShadingRateWithShaderSampleMask;
        public uint fragmentShadingRateWithConservativeRasterization;
        public uint fragmentShadingRateWithFragmentShaderInterlock;
        public uint fragmentShadingRateWithCustomSampleLocations;
        public uint fragmentShadingRateStrictMultiplyCombiner;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentShadingRateKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSampleCountFlags sampleCounts;
        public VkExtent2D fragmentSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSurfaceProtectedCapabilitiesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint supportsProtected;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePresentWaitFeaturesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint presentWait;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint pipelineExecutableInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipeline pipeline;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineExecutablePropertiesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkShaderStageFlags stages;
        public unsafe fixed byte name[256];
        public unsafe fixed byte description[256];
        public uint subgroupSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineExecutableInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipeline pipeline;
        public uint executableIndex;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkPipelineExecutableStatisticValueKHR
    {
        [FieldOffset(0)]
        public uint b32;
        [FieldOffset(0)]
        public long i64;
        [FieldOffset(0)]
        public ulong u64;
        [FieldOffset(0)]
        public double f64;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineExecutableStatisticKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public unsafe fixed byte name[256];
        public unsafe fixed byte description[256];
        public VkPipelineExecutableStatisticFormatKHR format;
        public VkPipelineExecutableStatisticValueKHR value;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineExecutableInternalRepresentationKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public unsafe fixed byte name[256];
        public unsafe fixed byte description[256];
        public uint isText;
        public uint dataSize;
        public unsafe void* pData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineLibraryCreateInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint libraryCount;
        public unsafe VkPipeline* pLibraries;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPresentIdKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint swapchainCount;
        public unsafe ulong* pPresentIds;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePresentIdFeaturesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint presentId;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkQueueFamilyCheckpointProperties2NV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineStageFlags2 checkpointExecutionStageMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCheckpointData2NV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineStageFlags2 stage;
        public unsafe void* pCheckpointMarker;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderSubgroupUniformControlFlow;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint workgroupMemoryExplicitLayout;
        public uint workgroupMemoryExplicitLayoutScalarBlockLayout;
        public uint workgroupMemoryExplicitLayout8BitAccess;
        public uint workgroupMemoryExplicitLayout16BitAccess;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugReportCallbackCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDebugReportFlagsEXT flags;
        public unsafe delegate* unmanaged<VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, uint, int, byte*, byte*, void*, uint> pfnCallback;
        public unsafe void* pUserData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRasterizationStateRasterizationOrderAMD
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkRasterizationOrderAMD rasterizationOrder;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugMarkerObjectNameInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDebugReportObjectTypeEXT objectType;
        public ulong @object;
        public unsafe byte* pObjectName;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugMarkerObjectTagInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDebugReportObjectTypeEXT objectType;
        public ulong @object;
        public ulong tagName;
        public uint tagSize;
        public unsafe void* pTag;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugMarkerMarkerInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public unsafe byte* pMarkerName;
        public unsafe fixed float color[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDedicatedAllocationImageCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint dedicatedAllocation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDedicatedAllocationBufferCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint dedicatedAllocation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDedicatedAllocationMemoryAllocateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImage image;
        public VkBuffer buffer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceTransformFeedbackFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint transformFeedback;
        public uint geometryStreams;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceTransformFeedbackPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxTransformFeedbackStreams;
        public uint maxTransformFeedbackBuffers;
        public ulong maxTransformFeedbackBufferSize;
        public uint maxTransformFeedbackStreamDataSize;
        public uint maxTransformFeedbackBufferDataSize;
        public uint maxTransformFeedbackBufferDataStride;
        public uint transformFeedbackQueries;
        public uint transformFeedbackStreamsLinesTriangles;
        public uint transformFeedbackRasterizationStreamSelect;
        public uint transformFeedbackDraw;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRasterizationStateStreamCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineRasterizationStateStreamCreateFlagsEXT flags;
        public uint rasterizationStream;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCuModuleCreateInfoNVX
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint dataSize;
        public unsafe void* pData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCuFunctionCreateInfoNVX
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkCuModuleNVX module;
        public unsafe byte* pName;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCuLaunchInfoNVX
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkCuFunctionNVX function;
        public uint gridDimX;
        public uint gridDimY;
        public uint gridDimZ;
        public uint blockDimX;
        public uint blockDimY;
        public uint blockDimZ;
        public uint sharedMemBytes;
        public uint paramCount;
        public unsafe void** pParams;
        public uint extraCount;
        public unsafe void** pExtras;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageViewHandleInfoNVX
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageView imageView;
        public VkDescriptorType descriptorType;
        public VkSampler sampler;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageViewAddressPropertiesNVX
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong deviceAddress;
        public ulong size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkTextureLODGatherFormatPropertiesAMD
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint supportsTextureGatherLODBiasAMD;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkShaderResourceUsageAMD
    {
        public uint numUsedVgprs;
        public uint numUsedSgprs;
        public uint ldsSizePerLocalWorkGroup;
        public uint ldsUsageSizeInBytes;
        public uint scratchMemUsageInBytes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkShaderStatisticsInfoAMD
    {
        public VkShaderStageFlags shaderStageMask;
        public VkShaderResourceUsageAMD resourceUsage;
        public uint numPhysicalVgprs;
        public uint numPhysicalSgprs;
        public uint numAvailableVgprs;
        public uint numAvailableSgprs;
        public unsafe fixed uint computeWorkGroupSize[3];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceCornerSampledImageFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint cornerSampledImage;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalImageFormatPropertiesNV
    {
        public VkImageFormatProperties imageFormatProperties;
        public VkExternalMemoryFeatureFlagsNV externalMemoryFeatures;
        public VkExternalMemoryHandleTypeFlagsNV exportFromImportedHandleTypes;
        public VkExternalMemoryHandleTypeFlagsNV compatibleHandleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExternalMemoryImageCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExternalMemoryHandleTypeFlagsNV handleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkExportMemoryAllocateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExternalMemoryHandleTypeFlagsNV handleTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkValidationFlagsEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint disabledValidationCheckCount;
        public unsafe VkValidationCheckEXT* pDisabledValidationChecks;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageViewASTCDecodeModeEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkFormat decodeMode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceASTCDecodeFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint decodeModeSharedExponent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkConditionalRenderingBeginInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkBuffer buffer;
        public ulong offset;
        public VkConditionalRenderingFlagsEXT flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceConditionalRenderingFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint conditionalRendering;
        public uint inheritedConditionalRendering;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandBufferInheritanceConditionalRenderingInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint conditionalRenderingEnable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkViewportWScalingNV
    {
        public float xcoeff;
        public float ycoeff;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineViewportWScalingStateCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint viewportWScalingEnable;
        public uint viewportCount;
        public unsafe VkViewportWScalingNV* pViewportWScalings;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSurfaceCapabilities2EXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint minImageCount;
        public uint maxImageCount;
        public VkExtent2D currentExtent;
        public VkExtent2D minImageExtent;
        public VkExtent2D maxImageExtent;
        public uint maxImageArrayLayers;
        public VkSurfaceTransformFlagsKHR supportedTransforms;
        public VkSurfaceTransformFlagBitsKHR currentTransform;
        public VkCompositeAlphaFlagsKHR supportedCompositeAlpha;
        public VkImageUsageFlags supportedUsageFlags;
        public VkSurfaceCounterFlagsEXT supportedSurfaceCounters;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayPowerInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDisplayPowerStateEXT powerState;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceEventInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDeviceEventTypeEXT deviceEvent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayEventInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDisplayEventTypeEXT displayEvent;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSwapchainCounterCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSurfaceCounterFlagsEXT surfaceCounters;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRefreshCycleDurationGOOGLE
    {
        public ulong refreshDuration;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPastPresentationTimingGOOGLE
    {
        public uint presentID;
        public ulong desiredPresentTime;
        public ulong actualPresentTime;
        public ulong earliestPresentTime;
        public ulong presentMargin;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPresentTimeGOOGLE
    {
        public uint presentID;
        public ulong desiredPresentTime;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPresentTimesInfoGOOGLE
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint swapchainCount;
        public unsafe VkPresentTimeGOOGLE* pTimes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint perViewPositionAllComponents;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkViewportSwizzleNV
    {
        public VkViewportCoordinateSwizzleNV x;
        public VkViewportCoordinateSwizzleNV y;
        public VkViewportCoordinateSwizzleNV z;
        public VkViewportCoordinateSwizzleNV w;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineViewportSwizzleStateCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineViewportSwizzleStateCreateFlagsNV flags;
        public uint viewportCount;
        public unsafe VkViewportSwizzleNV* pViewportSwizzles;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDiscardRectanglePropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxDiscardRectangles;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineDiscardRectangleStateCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineDiscardRectangleStateCreateFlagsEXT flags;
        public VkDiscardRectangleModeEXT discardRectangleMode;
        public uint discardRectangleCount;
        public unsafe VkRect2D* pDiscardRectangles;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceConservativeRasterizationPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public float primitiveOverestimationSize;
        public float maxExtraPrimitiveOverestimationSize;
        public float extraPrimitiveOverestimationSizeGranularity;
        public uint primitiveUnderestimation;
        public uint conservativePointAndLineRasterization;
        public uint degenerateTrianglesRasterized;
        public uint degenerateLinesRasterized;
        public uint fullyCoveredFragmentShaderInputVariable;
        public uint conservativeRasterizationPostDepthCoverage;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRasterizationConservativeStateCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineRasterizationConservativeStateCreateFlagsEXT flags;
        public VkConservativeRasterizationModeEXT conservativeRasterizationMode;
        public float extraPrimitiveOverestimationSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDepthClipEnableFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint depthClipEnable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRasterizationDepthClipStateCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineRasterizationDepthClipStateCreateFlagsEXT flags;
        public uint depthClipEnable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkXYColorEXT
    {
        public float x;
        public float y;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkHdrMetadataEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkXYColorEXT displayPrimaryRed;
        public VkXYColorEXT displayPrimaryGreen;
        public VkXYColorEXT displayPrimaryBlue;
        public VkXYColorEXT whitePoint;
        public float maxLuminance;
        public float minLuminance;
        public float maxContentLightLevel;
        public float maxFrameAverageLightLevel;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugUtilsLabelEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public unsafe byte* pLabelName;
        public unsafe fixed float color[4];
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugUtilsObjectNameInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkObjectType objectType;
        public ulong objectHandle;
        public unsafe byte* pObjectName;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugUtilsMessengerCallbackDataEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDebugUtilsMessengerCallbackDataFlagsEXT flags;
        public unsafe byte* pMessageIdName;
        public int messageIdNumber;
        public unsafe byte* pMessage;
        public uint queueLabelCount;
        public unsafe VkDebugUtilsLabelEXT* pQueueLabels;
        public uint cmdBufLabelCount;
        public unsafe VkDebugUtilsLabelEXT* pCmdBufLabels;
        public uint objectCount;
        public unsafe VkDebugUtilsObjectNameInfoEXT* pObjects;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugUtilsMessengerCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDebugUtilsMessengerCreateFlagsEXT flags;
        public VkDebugUtilsMessageSeverityFlagsEXT messageSeverity;
        public VkDebugUtilsMessageTypeFlagsEXT messageType;
        public unsafe delegate* unmanaged<VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void*, uint> pfnUserCallback;
        public unsafe void* pUserData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDebugUtilsObjectTagInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkObjectType objectType;
        public ulong objectHandle;
        public ulong tagName;
        public uint tagSize;
        public unsafe void* pTag;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSampleLocationEXT
    {
        public float x;
        public float y;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSampleLocationsInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSampleCountFlagBits sampleLocationsPerPixel;
        public VkExtent2D sampleLocationGridSize;
        public uint sampleLocationsCount;
        public unsafe VkSampleLocationEXT* pSampleLocations;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAttachmentSampleLocationsEXT
    {
        public uint attachmentIndex;
        public VkSampleLocationsInfoEXT sampleLocationsInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassSampleLocationsEXT
    {
        public uint subpassIndex;
        public VkSampleLocationsInfoEXT sampleLocationsInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassSampleLocationsBeginInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint attachmentInitialSampleLocationsCount;
        public unsafe VkAttachmentSampleLocationsEXT* pAttachmentInitialSampleLocations;
        public uint postSubpassSampleLocationsCount;
        public unsafe VkSubpassSampleLocationsEXT* pPostSubpassSampleLocations;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineSampleLocationsStateCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint sampleLocationsEnable;
        public VkSampleLocationsInfoEXT sampleLocationsInfo;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSampleLocationsPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSampleCountFlags sampleLocationSampleCounts;
        public VkExtent2D maxSampleLocationGridSize;
        public unsafe fixed float sampleLocationCoordinateRange[2];
        public uint sampleLocationSubPixelBits;
        public uint variableSampleLocations;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMultisamplePropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExtent2D maxSampleLocationGridSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint advancedBlendCoherentOperations;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint advancedBlendMaxColorAttachments;
        public uint advancedBlendIndependentBlend;
        public uint advancedBlendNonPremultipliedSrcColor;
        public uint advancedBlendNonPremultipliedDstColor;
        public uint advancedBlendCorrelatedOverlap;
        public uint advancedBlendAllOperations;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineColorBlendAdvancedStateCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint srcPremultiplied;
        public uint dstPremultiplied;
        public VkBlendOverlapEXT blendOverlap;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineCoverageToColorStateCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineCoverageToColorStateCreateFlagsNV flags;
        public uint coverageToColorEnable;
        public uint coverageToColorLocation;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineCoverageModulationStateCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineCoverageModulationStateCreateFlagsNV flags;
        public VkCoverageModulationModeNV coverageModulationMode;
        public uint coverageModulationTableEnable;
        public uint coverageModulationTableCount;
        public unsafe float* pCoverageModulationTable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderSMBuiltinsPropertiesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderSMCount;
        public uint shaderWarpsPerSM;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderSMBuiltinsFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderSMBuiltins;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDrmFormatModifierPropertiesEXT
    {
        public ulong drmFormatModifier;
        public uint drmFormatModifierPlaneCount;
        public VkFormatFeatureFlags drmFormatModifierTilingFeatures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDrmFormatModifierPropertiesListEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint drmFormatModifierCount;
        public unsafe VkDrmFormatModifierPropertiesEXT* pDrmFormatModifierProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceImageDrmFormatModifierInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong drmFormatModifier;
        public VkSharingMode sharingMode;
        public uint queueFamilyIndexCount;
        public unsafe uint* pQueueFamilyIndices;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageDrmFormatModifierListCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint drmFormatModifierCount;
        public unsafe ulong* pDrmFormatModifiers;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageDrmFormatModifierExplicitCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong drmFormatModifier;
        public uint drmFormatModifierPlaneCount;
        public unsafe VkSubresourceLayout* pPlaneLayouts;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageDrmFormatModifierPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong drmFormatModifier;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDrmFormatModifierProperties2EXT
    {
        public ulong drmFormatModifier;
        public uint drmFormatModifierPlaneCount;
        public VkFormatFeatureFlags2 drmFormatModifierTilingFeatures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDrmFormatModifierPropertiesList2EXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint drmFormatModifierCount;
        public unsafe VkDrmFormatModifierProperties2EXT* pDrmFormatModifierProperties;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkValidationCacheCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkValidationCacheCreateFlagsEXT flags;
        public uint initialDataSize;
        public unsafe void* pInitialData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkShaderModuleValidationCacheCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkValidationCacheEXT validationCache;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkShadingRatePaletteNV
    {
        public uint shadingRatePaletteEntryCount;
        public unsafe VkShadingRatePaletteEntryNV* pShadingRatePaletteEntries;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineViewportShadingRateImageStateCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shadingRateImageEnable;
        public uint viewportCount;
        public unsafe VkShadingRatePaletteNV* pShadingRatePalettes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShadingRateImageFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shadingRateImage;
        public uint shadingRateCoarseSampleOrder;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShadingRateImagePropertiesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExtent2D shadingRateTexelSize;
        public uint shadingRatePaletteSize;
        public uint shadingRateMaxCoarseSamples;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCoarseSampleLocationNV
    {
        public uint pixelX;
        public uint pixelY;
        public uint sample;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCoarseSampleOrderCustomNV
    {
        public VkShadingRatePaletteEntryNV shadingRate;
        public uint sampleCount;
        public uint sampleLocationCount;
        public unsafe VkCoarseSampleLocationNV* pSampleLocations;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineViewportCoarseSampleOrderStateCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkCoarseSampleOrderTypeNV sampleOrderType;
        public uint customSampleOrderCount;
        public unsafe VkCoarseSampleOrderCustomNV* pCustomSampleOrders;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRayTracingShaderGroupCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkRayTracingShaderGroupTypeKHR type;
        public uint generalShader;
        public uint closestHitShader;
        public uint anyHitShader;
        public uint intersectionShader;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRayTracingPipelineCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineCreateFlags flags;
        public uint stageCount;
        public unsafe VkPipelineShaderStageCreateInfo* pStages;
        public uint groupCount;
        public unsafe VkRayTracingShaderGroupCreateInfoNV* pGroups;
        public uint maxRecursionDepth;
        public VkPipelineLayout layout;
        public VkPipeline basePipelineHandle;
        public int basePipelineIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGeometryTrianglesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkBuffer vertexData;
        public ulong vertexOffset;
        public uint vertexCount;
        public ulong vertexStride;
        public VkFormat vertexFormat;
        public VkBuffer indexData;
        public ulong indexOffset;
        public uint indexCount;
        public VkIndexType indexType;
        public VkBuffer transformData;
        public ulong transformOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGeometryAABBNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkBuffer aabbData;
        public uint numAABBs;
        public uint stride;
        public ulong offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGeometryDataNV
    {
        public VkGeometryTrianglesNV triangles;
        public VkGeometryAABBNV aabbs;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGeometryNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkGeometryTypeKHR geometryType;
        public VkGeometryDataNV geometry;
        public VkGeometryFlagsKHR flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkAccelerationStructureTypeKHR type;
        public VkBuildAccelerationStructureFlagsNV flags;
        public uint instanceCount;
        public uint geometryCount;
        public unsafe VkGeometryNV* pGeometries;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong compactedSize;
        public VkAccelerationStructureInfoNV info;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindAccelerationStructureMemoryInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkAccelerationStructureNV accelerationStructure;
        public VkDeviceMemory memory;
        public ulong memoryOffset;
        public uint deviceIndexCount;
        public unsafe uint* pDeviceIndices;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkWriteDescriptorSetAccelerationStructureNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint accelerationStructureCount;
        public unsafe VkAccelerationStructureNV* pAccelerationStructures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureMemoryRequirementsInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkAccelerationStructureMemoryRequirementsTypeNV type;
        public VkAccelerationStructureNV accelerationStructure;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRayTracingPropertiesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderGroupHandleSize;
        public uint maxRecursionDepth;
        public uint maxShaderGroupStride;
        public uint shaderGroupBaseAlignment;
        public ulong maxGeometryCount;
        public ulong maxInstanceCount;
        public ulong maxTriangleCount;
        public uint maxDescriptorSetAccelerationStructures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkTransformMatrixKHR
    {
        public unsafe float* matrix_0;
        public unsafe float* matrix_1;
        public unsafe float* matrix_2;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAabbPositionsKHR
    {
        public float minX;
        public float minY;
        public float minZ;
        public float maxX;
        public float maxY;
        public float maxZ;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureInstanceKHR
    {
        public VkTransformMatrixKHR transform;
        public uint instanceCustomIndex;
        public uint mask;
        public uint instanceShaderBindingTableRecordOffset;
        public VkGeometryInstanceFlagsKHR flags;
        public ulong accelerationStructureReference;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint representativeFragmentTest;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRepresentativeFragmentTestStateCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint representativeFragmentTestEnable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceImageViewImageFormatInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkImageViewType imageViewType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFilterCubicImageViewImageFormatPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint filterCubic;
        public uint filterCubicMinmax;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImportMemoryHostPointerInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExternalMemoryHandleTypeFlagBits handleType;
        public unsafe void* pHostPointer;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryHostPointerPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint memoryTypeBits;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExternalMemoryHostPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong minImportedHostPointerAlignment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineCompilerControlCreateInfoAMD
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineCompilerControlFlagsAMD compilerControlFlags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCalibratedTimestampInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkTimeDomainEXT timeDomain;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderCorePropertiesAMD
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderEngineCount;
        public uint shaderArraysPerEngineCount;
        public uint computeUnitsPerShaderArray;
        public uint simdPerComputeUnit;
        public uint wavefrontsPerSimd;
        public uint wavefrontSize;
        public uint sgprsPerSimd;
        public uint minSgprAllocation;
        public uint maxSgprAllocation;
        public uint sgprAllocationGranularity;
        public uint vgprsPerSimd;
        public uint minVgprAllocation;
        public uint maxVgprAllocation;
        public uint vgprAllocationGranularity;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceMemoryOverallocationCreateInfoAMD
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkMemoryOverallocationBehaviorAMD overallocationBehavior;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxVertexAttribDivisor;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkVertexInputBindingDivisorDescriptionEXT
    {
        public uint binding;
        public uint divisor;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineVertexInputDivisorStateCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint vertexBindingDivisorCount;
        public unsafe VkVertexInputBindingDivisorDescriptionEXT* pVertexBindingDivisors;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint vertexAttributeInstanceRateDivisor;
        public uint vertexAttributeInstanceRateZeroDivisor;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceComputeShaderDerivativesFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint computeDerivativeGroupQuads;
        public uint computeDerivativeGroupLinear;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMeshShaderFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint taskShader;
        public uint meshShader;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMeshShaderPropertiesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxDrawMeshTasksCount;
        public uint maxTaskWorkGroupInvocations;
        public unsafe fixed uint maxTaskWorkGroupSize[3];
        public uint maxTaskTotalMemorySize;
        public uint maxTaskOutputCount;
        public uint maxMeshWorkGroupInvocations;
        public unsafe fixed uint maxMeshWorkGroupSize[3];
        public uint maxMeshTotalMemorySize;
        public uint maxMeshOutputVertices;
        public uint maxMeshOutputPrimitives;
        public uint maxMeshMultiviewViewCount;
        public uint meshOutputPerVertexGranularity;
        public uint meshOutputPerPrimitiveGranularity;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDrawMeshTasksIndirectCommandNV
    {
        public uint taskCount;
        public uint firstTask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint fragmentShaderBarycentric;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderImageFootprintFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint imageFootprint;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineViewportExclusiveScissorStateCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint exclusiveScissorCount;
        public unsafe VkRect2D* pExclusiveScissors;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExclusiveScissorFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint exclusiveScissor;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkQueueFamilyCheckpointPropertiesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineStageFlags checkpointExecutionStageMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCheckpointDataNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineStageFlagBits stage;
        public unsafe void* pCheckpointMarker;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderIntegerFunctions2;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkPerformanceValueDataINTEL
    {
        [FieldOffset(0)]
        public uint value32;
        [FieldOffset(0)]
        public ulong value64;
        [FieldOffset(0)]
        public float valueFloat;
        [FieldOffset(0)]
        public uint valueBool;
        [FieldOffset(0)]
        public unsafe byte* valueString;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPerformanceValueINTEL
    {
        public VkPerformanceValueTypeINTEL type;
        public VkPerformanceValueDataINTEL data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkInitializePerformanceApiInfoINTEL
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public unsafe void* pUserData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkQueryPoolPerformanceQueryCreateInfoINTEL
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkQueryPoolSamplingModeINTEL performanceCountersSampling;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPerformanceMarkerInfoINTEL
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong marker;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPerformanceStreamMarkerInfoINTEL
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint marker;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPerformanceOverrideInfoINTEL
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPerformanceOverrideTypeINTEL type;
        public uint enable;
        public ulong parameter;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPerformanceConfigurationAcquireInfoINTEL
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPerformanceConfigurationTypeINTEL type;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePCIBusInfoPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint pciDomain;
        public uint pciBus;
        public uint pciDevice;
        public uint pciFunction;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDisplayNativeHdrSurfaceCapabilitiesAMD
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint localDimmingSupport;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSwapchainDisplayNativeHdrCreateInfoAMD
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint localDimmingEnable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentDensityMapFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint fragmentDensityMap;
        public uint fragmentDensityMapDynamic;
        public uint fragmentDensityMapNonSubsampledImages;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentDensityMapPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExtent2D minFragmentDensityTexelSize;
        public VkExtent2D maxFragmentDensityTexelSize;
        public uint fragmentDensityInvocations;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassFragmentDensityMapCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkAttachmentReference fragmentDensityMapAttachment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderCoreProperties2AMD
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkShaderCorePropertiesFlagsAMD shaderCoreFeatures;
        public uint activeComputeUnitCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceCoherentMemoryFeaturesAMD
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint deviceCoherentMemory;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderImageInt64Atomics;
        public uint sparseImageInt64Atomics;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMemoryBudgetPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong heapBudget_0;
        public ulong heapBudget_1;
        public ulong heapBudget_2;
        public ulong heapBudget_3;
        public ulong heapBudget_4;
        public ulong heapBudget_5;
        public ulong heapBudget_6;
        public ulong heapBudget_7;
        public ulong heapBudget_8;
        public ulong heapBudget_9;
        public ulong heapBudget_10;
        public ulong heapBudget_11;
        public ulong heapBudget_12;
        public ulong heapBudget_13;
        public ulong heapBudget_14;
        public ulong heapBudget_15;
        public ulong heapUsage_0;
        public ulong heapUsage_1;
        public ulong heapUsage_2;
        public ulong heapUsage_3;
        public ulong heapUsage_4;
        public ulong heapUsage_5;
        public ulong heapUsage_6;
        public ulong heapUsage_7;
        public ulong heapUsage_8;
        public ulong heapUsage_9;
        public ulong heapUsage_10;
        public ulong heapUsage_11;
        public ulong heapUsage_12;
        public ulong heapUsage_13;
        public ulong heapUsage_14;
        public ulong heapUsage_15;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMemoryPriorityFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint memoryPriority;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryPriorityAllocateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public float priority;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint dedicatedAllocationImageAliasing;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceBufferDeviceAddressFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint bufferDeviceAddress;
        public uint bufferDeviceAddressCaptureReplay;
        public uint bufferDeviceAddressMultiDevice;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBufferDeviceAddressCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong deviceAddress;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkValidationFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint enabledValidationFeatureCount;
        public unsafe VkValidationFeatureEnableEXT* pEnabledValidationFeatures;
        public uint disabledValidationFeatureCount;
        public unsafe VkValidationFeatureDisableEXT* pDisabledValidationFeatures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCooperativeMatrixPropertiesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint MSize;
        public uint NSize;
        public uint KSize;
        public VkComponentTypeNV AType;
        public VkComponentTypeNV BType;
        public VkComponentTypeNV CType;
        public VkComponentTypeNV DType;
        public VkScopeNV scope;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceCooperativeMatrixFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint cooperativeMatrix;
        public uint cooperativeMatrixRobustBufferAccess;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceCooperativeMatrixPropertiesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkShaderStageFlags cooperativeMatrixSupportedStages;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceCoverageReductionModeFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint coverageReductionMode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineCoverageReductionStateCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineCoverageReductionStateCreateFlagsNV flags;
        public VkCoverageReductionModeNV coverageReductionMode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkFramebufferMixedSamplesCombinationNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkCoverageReductionModeNV coverageReductionMode;
        public VkSampleCountFlagBits rasterizationSamples;
        public VkSampleCountFlags depthStencilSamples;
        public VkSampleCountFlags colorSamples;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint fragmentShaderSampleInterlock;
        public uint fragmentShaderPixelInterlock;
        public uint fragmentShaderShadingRateInterlock;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceYcbcrImageArraysFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint ycbcrImageArrays;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceProvokingVertexFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint provokingVertexLast;
        public uint transformFeedbackPreservesProvokingVertex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceProvokingVertexPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint provokingVertexModePerPipeline;
        public uint transformFeedbackPreservesTriangleFanProvokingVertex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRasterizationProvokingVertexStateCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkProvokingVertexModeEXT provokingVertexMode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkHeadlessSurfaceCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkHeadlessSurfaceCreateFlagsEXT flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceLineRasterizationFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint rectangularLines;
        public uint bresenhamLines;
        public uint smoothLines;
        public uint stippledRectangularLines;
        public uint stippledBresenhamLines;
        public uint stippledSmoothLines;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceLineRasterizationPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint lineSubPixelPrecisionBits;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineRasterizationLineStateCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkLineRasterizationModeEXT lineRasterizationMode;
        public uint stippledLineEnable;
        public uint lineStippleFactor;
        public ushort lineStipplePattern;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderAtomicFloatFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderBufferFloat32Atomics;
        public uint shaderBufferFloat32AtomicAdd;
        public uint shaderBufferFloat64Atomics;
        public uint shaderBufferFloat64AtomicAdd;
        public uint shaderSharedFloat32Atomics;
        public uint shaderSharedFloat32AtomicAdd;
        public uint shaderSharedFloat64Atomics;
        public uint shaderSharedFloat64AtomicAdd;
        public uint shaderImageFloat32Atomics;
        public uint shaderImageFloat32AtomicAdd;
        public uint sparseImageFloat32Atomics;
        public uint sparseImageFloat32AtomicAdd;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceIndexTypeUint8FeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint indexTypeUint8;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExtendedDynamicStateFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint extendedDynamicState;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderBufferFloat16Atomics;
        public uint shaderBufferFloat16AtomicAdd;
        public uint shaderBufferFloat16AtomicMinMax;
        public uint shaderBufferFloat32AtomicMinMax;
        public uint shaderBufferFloat64AtomicMinMax;
        public uint shaderSharedFloat16Atomics;
        public uint shaderSharedFloat16AtomicAdd;
        public uint shaderSharedFloat16AtomicMinMax;
        public uint shaderSharedFloat32AtomicMinMax;
        public uint shaderSharedFloat64AtomicMinMax;
        public uint shaderImageFloat32AtomicMinMax;
        public uint sparseImageFloat32AtomicMinMax;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxGraphicsShaderGroupCount;
        public uint maxIndirectSequenceCount;
        public uint maxIndirectCommandsTokenCount;
        public uint maxIndirectCommandsStreamCount;
        public uint maxIndirectCommandsTokenOffset;
        public uint maxIndirectCommandsStreamStride;
        public uint minSequencesCountBufferOffsetAlignment;
        public uint minSequencesIndexBufferOffsetAlignment;
        public uint minIndirectCommandsBufferOffsetAlignment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint deviceGeneratedCommands;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGraphicsShaderGroupCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint stageCount;
        public unsafe VkPipelineShaderStageCreateInfo* pStages;
        public unsafe VkPipelineVertexInputStateCreateInfo* pVertexInputState;
        public unsafe VkPipelineTessellationStateCreateInfo* pTessellationState;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGraphicsPipelineShaderGroupsCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint groupCount;
        public unsafe VkGraphicsShaderGroupCreateInfoNV* pGroups;
        public uint pipelineCount;
        public unsafe VkPipeline* pPipelines;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindShaderGroupIndirectCommandNV
    {
        public uint groupIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindIndexBufferIndirectCommandNV
    {
        public ulong bufferAddress;
        public uint size;
        public VkIndexType indexType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkBindVertexBufferIndirectCommandNV
    {
        public ulong bufferAddress;
        public uint size;
        public uint stride;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSetStateFlagsIndirectCommandNV
    {
        public uint data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkIndirectCommandsStreamNV
    {
        public VkBuffer buffer;
        public ulong offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkIndirectCommandsLayoutTokenNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkIndirectCommandsTokenTypeNV tokenType;
        public uint stream;
        public uint offset;
        public uint vertexBindingUnit;
        public uint vertexDynamicStride;
        public VkPipelineLayout pushconstantPipelineLayout;
        public VkShaderStageFlags pushconstantShaderStageFlags;
        public uint pushconstantOffset;
        public uint pushconstantSize;
        public VkIndirectStateFlagsNV indirectStateFlags;
        public uint indexTypeCount;
        public unsafe VkIndexType* pIndexTypes;
        public unsafe uint* pIndexTypeValues;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkIndirectCommandsLayoutCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkIndirectCommandsLayoutUsageFlagsNV flags;
        public VkPipelineBindPoint pipelineBindPoint;
        public uint tokenCount;
        public unsafe VkIndirectCommandsLayoutTokenNV* pTokens;
        public uint streamCount;
        public unsafe uint* pStreamStrides;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGeneratedCommandsInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineBindPoint pipelineBindPoint;
        public VkPipeline pipeline;
        public VkIndirectCommandsLayoutNV indirectCommandsLayout;
        public uint streamCount;
        public unsafe VkIndirectCommandsStreamNV* pStreams;
        public uint sequencesCount;
        public VkBuffer preprocessBuffer;
        public ulong preprocessOffset;
        public ulong preprocessSize;
        public VkBuffer sequencesCountBuffer;
        public ulong sequencesCountOffset;
        public VkBuffer sequencesIndexBuffer;
        public ulong sequencesIndexOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkGeneratedCommandsMemoryRequirementsInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineBindPoint pipelineBindPoint;
        public VkPipeline pipeline;
        public VkIndirectCommandsLayoutNV indirectCommandsLayout;
        public uint maxSequencesCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceInheritedViewportScissorFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint inheritedViewportScissor2D;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandBufferInheritanceViewportScissorInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint viewportScissor2D;
        public uint viewportDepthCount;
        public unsafe VkViewport* pViewportDepths;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint texelBufferAlignment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRenderPassTransformBeginInfoQCOM
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSurfaceTransformFlagBitsKHR transform;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCommandBufferInheritanceRenderPassTransformInfoQCOM
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSurfaceTransformFlagBitsKHR transform;
        public VkRect2D renderArea;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDeviceMemoryReportFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint deviceMemoryReport;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceMemoryReportCallbackDataEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDeviceMemoryReportFlagsEXT flags;
        public VkDeviceMemoryReportEventTypeEXT type;
        public ulong memoryObjectId;
        public ulong size;
        public VkObjectType objectType;
        public ulong objectHandle;
        public uint heapIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceDeviceMemoryReportCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDeviceMemoryReportFlagsEXT flags;
        public unsafe delegate* unmanaged<VkDeviceMemoryReportCallbackDataEXT*, void*, void> pfnUserCallback;
        public unsafe void* pUserData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRobustness2FeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint robustBufferAccess2;
        public uint robustImageAccess2;
        public uint nullDescriptor;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRobustness2PropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong robustStorageBufferAccessSizeAlignment;
        public ulong robustUniformBufferAccessSizeAlignment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSamplerCustomBorderColorCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkClearColorValue customBorderColor;
        public VkFormat format;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceCustomBorderColorPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxCustomBorderColorSamplers;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceCustomBorderColorFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint customBorderColors;
        public uint customBorderColorWithoutFormat;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDiagnosticsConfigFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint diagnosticsConfig;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkDeviceDiagnosticsConfigCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDeviceDiagnosticsConfigFlagsNV flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint fragmentShadingRateEnums;
        public uint supersampleFragmentShadingRates;
        public uint noInvocationFragmentShadingRates;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSampleCountFlagBits maxFragmentShadingRateInvocationCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineFragmentShadingRateEnumStateCreateInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkFragmentShadingRateTypeNV shadingRateType;
        public VkFragmentShadingRateNV shadingRate;
        public VkFragmentShadingRateCombinerOpKHR combinerOps_0;
        public VkFragmentShadingRateCombinerOpKHR combinerOps_1;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkDeviceOrHostAddressConstKHR
    {
        [FieldOffset(0)]
        public ulong deviceAddress;
        [FieldOffset(0)]
        public unsafe void* hostAddress;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureGeometryMotionTrianglesDataNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDeviceOrHostAddressConstKHR vertexData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureMotionInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxInstances;
        public VkAccelerationStructureMotionInfoFlagsNV flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureMatrixMotionInstanceNV
    {
        public VkTransformMatrixKHR transformT0;
        public VkTransformMatrixKHR transformT1;
        public uint instanceCustomIndex;
        public uint mask;
        public uint instanceShaderBindingTableRecordOffset;
        public VkGeometryInstanceFlagsKHR flags;
        public ulong accelerationStructureReference;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSRTDataNV
    {
        public float sx;
        public float a;
        public float b;
        public float pvx;
        public float sy;
        public float c;
        public float pvy;
        public float sz;
        public float pvz;
        public float qx;
        public float qy;
        public float qz;
        public float qw;
        public float tx;
        public float ty;
        public float tz;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureSRTMotionInstanceNV
    {
        public VkSRTDataNV transformT0;
        public VkSRTDataNV transformT1;
        public uint instanceCustomIndex;
        public uint mask;
        public uint instanceShaderBindingTableRecordOffset;
        public VkGeometryInstanceFlagsKHR flags;
        public ulong accelerationStructureReference;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkAccelerationStructureMotionInstanceDataNV
    {
        [FieldOffset(0)]
        public VkAccelerationStructureInstanceKHR staticInstance;
        [FieldOffset(0)]
        public VkAccelerationStructureMatrixMotionInstanceNV matrixMotionInstance;
        [FieldOffset(0)]
        public VkAccelerationStructureSRTMotionInstanceNV srtMotionInstance;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureMotionInstanceNV
    {
        public VkAccelerationStructureMotionInstanceTypeNV type;
        public VkAccelerationStructureMotionInstanceFlagsNV flags;
        public VkAccelerationStructureMotionInstanceDataNV data;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRayTracingMotionBlurFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint rayTracingMotionBlur;
        public uint rayTracingMotionBlurPipelineTraceRaysIndirect;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint ycbcr2plane444Formats;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentDensityMap2FeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint fragmentDensityMapDeferred;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentDensityMap2PropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint subsampledLoads;
        public uint subsampledCoarseReconstructionEarlyAccess;
        public uint maxSubsampledArrayLayers;
        public uint maxDescriptorSetSubsampledSamplers;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyCommandTransformInfoQCOM
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkSurfaceTransformFlagBitsKHR transform;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevice4444FormatsFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint formatA4R4G4B4;
        public uint formatA4B4G4R4;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint rasterizationOrderColorAttachmentAccess;
        public uint rasterizationOrderDepthAttachmentAccess;
        public uint rasterizationOrderStencilAttachmentAccess;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint formatRgba10x6WithoutYCbCrSampler;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint mutableDescriptorType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMutableDescriptorTypeListVALVE
    {
        public uint descriptorTypeCount;
        public unsafe VkDescriptorType* pDescriptorTypes;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMutableDescriptorTypeCreateInfoVALVE
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint mutableDescriptorTypeListCount;
        public unsafe VkMutableDescriptorTypeListVALVE* pMutableDescriptorTypeLists;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint vertexInputDynamicState;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkVertexInputBindingDescription2EXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint binding;
        public uint stride;
        public VkVertexInputRate inputRate;
        public uint divisor;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkVertexInputAttributeDescription2EXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint location;
        public uint binding;
        public VkFormat format;
        public uint offset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDrmPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint hasPrimary;
        public uint hasRender;
        public long primaryMajor;
        public long primaryMinor;
        public long renderMajor;
        public long renderMinor;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceDepthClipControlFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint depthClipControl;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineViewportDepthClipControlCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint negativeOneToOne;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint primitiveTopologyListRestart;
        public uint primitiveTopologyPatchListRestart;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassShadingPipelineCreateInfoHUAWEI
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkRenderPass renderPass;
        public uint subpass;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSubpassShadingFeaturesHUAWEI
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint subpassShading;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceSubpassShadingPropertiesHUAWEI
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxSubpassShadingWorkgroupSizeAspectRatio;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceInvocationMaskFeaturesHUAWEI
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint invocationMask;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMemoryGetRemoteAddressInfoNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDeviceMemory memory;
        public VkExternalMemoryHandleTypeFlagBits handleType;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExternalMemoryRDMAFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint externalMemoryRDMA;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceExtendedDynamicState2FeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint extendedDynamicState2;
        public uint extendedDynamicState2LogicOp;
        public uint extendedDynamicState2PatchControlPoints;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceColorWriteEnableFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint colorWriteEnable;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPipelineColorWriteCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint attachmentCount;
        public unsafe uint* pColorWriteEnables;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceImageViewMinLodFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint minLod;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkImageViewMinLodCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public float minLod;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMultiDrawFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint multiDraw;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceMultiDrawPropertiesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxMultiDrawCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMultiDrawInfoEXT
    {
        public uint firstVertex;
        public uint vertexCount;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkMultiDrawIndexedInfoEXT
    {
        public uint firstIndex;
        public uint indexCount;
        public int vertexOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceBorderColorSwizzleFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint borderColorSwizzle;
        public uint borderColorSwizzleFromImage;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSamplerBorderColorComponentMappingCreateInfoEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkComponentMapping components;
        public uint srgb;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint pageableDeviceLocalMemory;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint fragmentDensityMapOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkExtent2D fragmentDensityOffsetGranularity;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkSubpassFragmentDensityMapOffsetEndInfoQCOM
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint fragmentDensityOffsetCount;
        public unsafe VkOffset2D* pFragmentDensityOffsets;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceLinearColorAttachmentFeaturesNV
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint linearColorAttachment;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkDeviceOrHostAddressKHR
    {
        [FieldOffset(0)]
        public ulong deviceAddress;
        [FieldOffset(0)]
        public unsafe void* hostAddress;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureBuildRangeInfoKHR
    {
        public uint primitiveCount;
        public uint primitiveOffset;
        public uint firstVertex;
        public uint transformOffset;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureGeometryTrianglesDataKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkFormat vertexFormat;
        public VkDeviceOrHostAddressConstKHR vertexData;
        public ulong vertexStride;
        public uint maxVertex;
        public VkIndexType indexType;
        public VkDeviceOrHostAddressConstKHR indexData;
        public VkDeviceOrHostAddressConstKHR transformData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureGeometryAabbsDataKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDeviceOrHostAddressConstKHR data;
        public ulong stride;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureGeometryInstancesDataKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint arrayOfPointers;
        public VkDeviceOrHostAddressConstKHR data;
    }

    [StructLayout(LayoutKind.Explicit)]
    internal partial struct VkAccelerationStructureGeometryDataKHR
    {
        [FieldOffset(0)]
        public VkAccelerationStructureGeometryTrianglesDataKHR triangles;
        [FieldOffset(0)]
        public VkAccelerationStructureGeometryAabbsDataKHR aabbs;
        [FieldOffset(0)]
        public VkAccelerationStructureGeometryInstancesDataKHR instances;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureGeometryKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkGeometryTypeKHR geometryType;
        public VkAccelerationStructureGeometryDataKHR geometry;
        public VkGeometryFlagsKHR flags;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureBuildGeometryInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkAccelerationStructureTypeKHR type;
        public VkBuildAccelerationStructureFlagsKHR flags;
        public VkBuildAccelerationStructureModeKHR mode;
        public VkAccelerationStructureKHR srcAccelerationStructure;
        public VkAccelerationStructureKHR dstAccelerationStructure;
        public uint geometryCount;
        public unsafe VkAccelerationStructureGeometryKHR* pGeometries;
        public unsafe VkAccelerationStructureGeometryKHR** ppGeometries;
        public VkDeviceOrHostAddressKHR scratchData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureCreateInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkAccelerationStructureCreateFlagsKHR createFlags;
        public VkBuffer buffer;
        public ulong offset;
        public ulong size;
        public VkAccelerationStructureTypeKHR type;
        public ulong deviceAddress;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkWriteDescriptorSetAccelerationStructureKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint accelerationStructureCount;
        public unsafe VkAccelerationStructureKHR* pAccelerationStructures;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceAccelerationStructureFeaturesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint accelerationStructure;
        public uint accelerationStructureCaptureReplay;
        public uint accelerationStructureIndirectBuild;
        public uint accelerationStructureHostCommands;
        public uint descriptorBindingAccelerationStructureUpdateAfterBind;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceAccelerationStructurePropertiesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong maxGeometryCount;
        public ulong maxInstanceCount;
        public ulong maxPrimitiveCount;
        public uint maxPerStageDescriptorAccelerationStructures;
        public uint maxPerStageDescriptorUpdateAfterBindAccelerationStructures;
        public uint maxDescriptorSetAccelerationStructures;
        public uint maxDescriptorSetUpdateAfterBindAccelerationStructures;
        public uint minAccelerationStructureScratchOffsetAlignment;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureDeviceAddressInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkAccelerationStructureKHR accelerationStructure;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureVersionInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public unsafe byte* pVersionData;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyAccelerationStructureToMemoryInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkAccelerationStructureKHR src;
        public VkDeviceOrHostAddressKHR dst;
        public VkCopyAccelerationStructureModeKHR mode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyMemoryToAccelerationStructureInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkDeviceOrHostAddressConstKHR src;
        public VkAccelerationStructureKHR dst;
        public VkCopyAccelerationStructureModeKHR mode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkCopyAccelerationStructureInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkAccelerationStructureKHR src;
        public VkAccelerationStructureKHR dst;
        public VkCopyAccelerationStructureModeKHR mode;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkAccelerationStructureBuildSizesInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public ulong accelerationStructureSize;
        public ulong updateScratchSize;
        public ulong buildScratchSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRayTracingShaderGroupCreateInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkRayTracingShaderGroupTypeKHR type;
        public uint generalShader;
        public uint closestHitShader;
        public uint anyHitShader;
        public uint intersectionShader;
        public unsafe void* pShaderGroupCaptureReplayHandle;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRayTracingPipelineInterfaceCreateInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint maxPipelineRayPayloadSize;
        public uint maxPipelineRayHitAttributeSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkRayTracingPipelineCreateInfoKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public VkPipelineCreateFlags flags;
        public uint stageCount;
        public unsafe VkPipelineShaderStageCreateInfo* pStages;
        public uint groupCount;
        public unsafe VkRayTracingShaderGroupCreateInfoKHR* pGroups;
        public uint maxPipelineRayRecursionDepth;
        public unsafe VkPipelineLibraryCreateInfoKHR* pLibraryInfo;
        public unsafe VkRayTracingPipelineInterfaceCreateInfoKHR* pLibraryInterface;
        public unsafe VkPipelineDynamicStateCreateInfo* pDynamicState;
        public VkPipelineLayout layout;
        public VkPipeline basePipelineHandle;
        public int basePipelineIndex;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRayTracingPipelineFeaturesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint rayTracingPipeline;
        public uint rayTracingPipelineShaderGroupHandleCaptureReplay;
        public uint rayTracingPipelineShaderGroupHandleCaptureReplayMixed;
        public uint rayTracingPipelineTraceRaysIndirect;
        public uint rayTraversalPrimitiveCulling;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRayTracingPipelinePropertiesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint shaderGroupHandleSize;
        public uint maxRayRecursionDepth;
        public uint maxShaderGroupStride;
        public uint shaderGroupBaseAlignment;
        public uint shaderGroupHandleCaptureReplaySize;
        public uint maxRayDispatchInvocationCount;
        public uint shaderGroupHandleAlignment;
        public uint maxRayHitAttributeSize;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkStridedDeviceAddressRegionKHR
    {
        public ulong deviceAddress;
        public ulong stride;
        public ulong size;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkTraceRaysIndirectCommandKHR
    {
        public uint width;
        public uint height;
        public uint depth;
    }

    [StructLayout(LayoutKind.Sequential)]
    internal partial struct VkPhysicalDeviceRayQueryFeaturesKHR
    {
        public VkStructureType sType;
        public unsafe void* pNext;
        public uint rayQuery;
    }

}
