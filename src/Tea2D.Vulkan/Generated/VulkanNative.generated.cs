// ============================================================================ 
// This file is generated by Tea2D.Vulkan.Generator tool. 
// ============================================================================ 


using System.Diagnostics;
using System.Runtime.InteropServices;

namespace Tea2D.Vulkan;

unsafe partial class VulkanNative
{
    private static unsafe delegate* unmanaged<VkInstanceCreateInfo*, VkAllocationCallbacks*, VkInstance*, VkResult> __vkCreateInstance;
    internal static VkResult vkCreateInstance(VkInstanceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkInstance* pInstance)
    {
        return __vkCreateInstance(pCreateInfo, pAllocator, pInstance);
    }

    private static unsafe delegate* unmanaged<VkInstance, VkAllocationCallbacks*, void> __vkDestroyInstance;
    internal static void vkDestroyInstance(VkInstance instance, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyInstance(instance, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkInstance, uint*, VkPhysicalDevice*, VkResult> __vkEnumeratePhysicalDevices;
    internal static VkResult vkEnumeratePhysicalDevices(VkInstance instance, uint* pPhysicalDeviceCount, VkPhysicalDevice* pPhysicalDevices)
    {
        return __vkEnumeratePhysicalDevices(instance, pPhysicalDeviceCount, pPhysicalDevices);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceFeatures*, void> __vkGetPhysicalDeviceFeatures;
    internal static void vkGetPhysicalDeviceFeatures(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures* pFeatures)
    {
        __vkGetPhysicalDeviceFeatures(physicalDevice, pFeatures);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkFormat, VkFormatProperties*, void> __vkGetPhysicalDeviceFormatProperties;
    internal static void vkGetPhysicalDeviceFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties* pFormatProperties)
    {
        __vkGetPhysicalDeviceFormatProperties(physicalDevice, format, pFormatProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkImageFormatProperties*, VkResult> __vkGetPhysicalDeviceImageFormatProperties;
    internal static VkResult vkGetPhysicalDeviceImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkImageFormatProperties* pImageFormatProperties)
    {
        return __vkGetPhysicalDeviceImageFormatProperties(physicalDevice, format, type, tiling, usage, flags, pImageFormatProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceProperties*, void> __vkGetPhysicalDeviceProperties;
    internal static void vkGetPhysicalDeviceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties* pProperties)
    {
        __vkGetPhysicalDeviceProperties(physicalDevice, pProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties*, void> __vkGetPhysicalDeviceQueueFamilyProperties;
    internal static void vkGetPhysicalDeviceQueueFamilyProperties(VkPhysicalDevice physicalDevice, uint* pQueueFamilyPropertyCount, VkQueueFamilyProperties* pQueueFamilyProperties)
    {
        __vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceMemoryProperties*, void> __vkGetPhysicalDeviceMemoryProperties;
    internal static void vkGetPhysicalDeviceMemoryProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties* pMemoryProperties)
    {
        __vkGetPhysicalDeviceMemoryProperties(physicalDevice, pMemoryProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkDeviceCreateInfo*, VkAllocationCallbacks*, VkDevice*, VkResult> __vkCreateDevice;
    internal static VkResult vkCreateDevice(VkPhysicalDevice physicalDevice, VkDeviceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDevice* pDevice)
    {
        return __vkCreateDevice(physicalDevice, pCreateInfo, pAllocator, pDevice);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkAllocationCallbacks*, void> __vkDestroyDevice;
    internal static void vkDestroyDevice(VkDevice device, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyDevice(device, pAllocator);
    }

    private static unsafe delegate* unmanaged<byte*, uint*, VkExtensionProperties*, VkResult> __vkEnumerateInstanceExtensionProperties;
    internal static VkResult vkEnumerateInstanceExtensionProperties(byte* pLayerName, uint* pPropertyCount, VkExtensionProperties* pProperties)
    {
        return __vkEnumerateInstanceExtensionProperties(pLayerName, pPropertyCount, pProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, byte*, uint*, VkExtensionProperties*, VkResult> __vkEnumerateDeviceExtensionProperties;
    internal static VkResult vkEnumerateDeviceExtensionProperties(VkPhysicalDevice physicalDevice, byte* pLayerName, uint* pPropertyCount, VkExtensionProperties* pProperties)
    {
        return __vkEnumerateDeviceExtensionProperties(physicalDevice, pLayerName, pPropertyCount, pProperties);
    }

    private static unsafe delegate* unmanaged<uint*, VkLayerProperties*, VkResult> __vkEnumerateInstanceLayerProperties;
    internal static VkResult vkEnumerateInstanceLayerProperties(uint* pPropertyCount, VkLayerProperties* pProperties)
    {
        return __vkEnumerateInstanceLayerProperties(pPropertyCount, pProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint*, VkLayerProperties*, VkResult> __vkEnumerateDeviceLayerProperties;
    internal static VkResult vkEnumerateDeviceLayerProperties(VkPhysicalDevice physicalDevice, uint* pPropertyCount, VkLayerProperties* pProperties)
    {
        return __vkEnumerateDeviceLayerProperties(physicalDevice, pPropertyCount, pProperties);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, uint, VkQueue*, void> __vkGetDeviceQueue;
    internal static void vkGetDeviceQueue(VkDevice device, uint queueFamilyIndex, uint queueIndex, VkQueue* pQueue)
    {
        __vkGetDeviceQueue(device, queueFamilyIndex, queueIndex, pQueue);
    }

    private static unsafe delegate* unmanaged<VkQueue, uint, VkSubmitInfo*, VkFence, VkResult> __vkQueueSubmit;
    internal static VkResult vkQueueSubmit(VkQueue queue, uint submitCount, VkSubmitInfo* pSubmits, VkFence fence)
    {
        return __vkQueueSubmit(queue, submitCount, pSubmits, fence);
    }

    private static unsafe delegate* unmanaged<VkQueue, VkResult> __vkQueueWaitIdle;
    internal static VkResult vkQueueWaitIdle(VkQueue queue)
    {
        return __vkQueueWaitIdle(queue);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkResult> __vkDeviceWaitIdle;
    internal static VkResult vkDeviceWaitIdle(VkDevice device)
    {
        return __vkDeviceWaitIdle(device);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkMemoryAllocateInfo*, VkAllocationCallbacks*, VkDeviceMemory*, VkResult> __vkAllocateMemory;
    internal static VkResult vkAllocateMemory(VkDevice device, VkMemoryAllocateInfo* pAllocateInfo, VkAllocationCallbacks* pAllocator, VkDeviceMemory* pMemory)
    {
        return __vkAllocateMemory(device, pAllocateInfo, pAllocator, pMemory);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeviceMemory, VkAllocationCallbacks*, void> __vkFreeMemory;
    internal static void vkFreeMemory(VkDevice device, VkDeviceMemory memory, VkAllocationCallbacks* pAllocator)
    {
        __vkFreeMemory(device, memory, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, void*, VkResult> __vkMapMemory;
    internal static VkResult vkMapMemory(VkDevice device, VkDeviceMemory memory, VkDeviceSize offset, VkDeviceSize size, VkMemoryMapFlags flags, void* ppData)
    {
        return __vkMapMemory(device, memory, offset, size, flags, ppData);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeviceMemory, void> __vkUnmapMemory;
    internal static void vkUnmapMemory(VkDevice device, VkDeviceMemory memory)
    {
        __vkUnmapMemory(device, memory);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, VkMappedMemoryRange*, VkResult> __vkFlushMappedMemoryRanges;
    internal static VkResult vkFlushMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)
    {
        return __vkFlushMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, VkMappedMemoryRange*, VkResult> __vkInvalidateMappedMemoryRanges;
    internal static VkResult vkInvalidateMappedMemoryRanges(VkDevice device, uint memoryRangeCount, VkMappedMemoryRange* pMemoryRanges)
    {
        return __vkInvalidateMappedMemoryRanges(device, memoryRangeCount, pMemoryRanges);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeviceMemory, VkDeviceSize*, void> __vkGetDeviceMemoryCommitment;
    internal static void vkGetDeviceMemoryCommitment(VkDevice device, VkDeviceMemory memory, VkDeviceSize* pCommittedMemoryInBytes)
    {
        __vkGetDeviceMemoryCommitment(device, memory, pCommittedMemoryInBytes);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize, VkResult> __vkBindBufferMemory;
    internal static VkResult vkBindBufferMemory(VkDevice device, VkBuffer buffer, VkDeviceMemory memory, VkDeviceSize memoryOffset)
    {
        return __vkBindBufferMemory(device, buffer, memory, memoryOffset);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImage, VkDeviceMemory, VkDeviceSize, VkResult> __vkBindImageMemory;
    internal static VkResult vkBindImageMemory(VkDevice device, VkImage image, VkDeviceMemory memory, VkDeviceSize memoryOffset)
    {
        return __vkBindImageMemory(device, image, memory, memoryOffset);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkBuffer, VkMemoryRequirements*, void> __vkGetBufferMemoryRequirements;
    internal static void vkGetBufferMemoryRequirements(VkDevice device, VkBuffer buffer, VkMemoryRequirements* pMemoryRequirements)
    {
        __vkGetBufferMemoryRequirements(device, buffer, pMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImage, VkMemoryRequirements*, void> __vkGetImageMemoryRequirements;
    internal static void vkGetImageMemoryRequirements(VkDevice device, VkImage image, VkMemoryRequirements* pMemoryRequirements)
    {
        __vkGetImageMemoryRequirements(device, image, pMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImage, uint*, VkSparseImageMemoryRequirements*, void> __vkGetImageSparseMemoryRequirements;
    internal static void vkGetImageSparseMemoryRequirements(VkDevice device, VkImage image, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements* pSparseMemoryRequirements)
    {
        __vkGetImageSparseMemoryRequirements(device, image, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlagBits, VkImageUsageFlags, VkImageTiling, uint*, VkSparseImageFormatProperties*, void> __vkGetPhysicalDeviceSparseImageFormatProperties;
    internal static void vkGetPhysicalDeviceSparseImageFormatProperties(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkSampleCountFlagBits samples, VkImageUsageFlags usage, VkImageTiling tiling, uint* pPropertyCount, VkSparseImageFormatProperties* pProperties)
    {
        __vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice, format, type, samples, usage, tiling, pPropertyCount, pProperties);
    }

    private static unsafe delegate* unmanaged<VkQueue, uint, VkBindSparseInfo*, VkFence, VkResult> __vkQueueBindSparse;
    internal static VkResult vkQueueBindSparse(VkQueue queue, uint bindInfoCount, VkBindSparseInfo* pBindInfo, VkFence fence)
    {
        return __vkQueueBindSparse(queue, bindInfoCount, pBindInfo, fence);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, VkFence*, VkResult> __vkCreateFence;
    internal static VkResult vkCreateFence(VkDevice device, VkFenceCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence)
    {
        return __vkCreateFence(device, pCreateInfo, pAllocator, pFence);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkFence, VkAllocationCallbacks*, void> __vkDestroyFence;
    internal static void vkDestroyFence(VkDevice device, VkFence fence, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyFence(device, fence, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, VkFence*, VkResult> __vkResetFences;
    internal static VkResult vkResetFences(VkDevice device, uint fenceCount, VkFence* pFences)
    {
        return __vkResetFences(device, fenceCount, pFences);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkFence, VkResult> __vkGetFenceStatus;
    internal static VkResult vkGetFenceStatus(VkDevice device, VkFence fence)
    {
        return __vkGetFenceStatus(device, fence);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, VkFence*, VkBool32, ulong, VkResult> __vkWaitForFences;
    internal static VkResult vkWaitForFences(VkDevice device, uint fenceCount, VkFence* pFences, VkBool32 waitAll, ulong timeout)
    {
        return __vkWaitForFences(device, fenceCount, pFences, waitAll, timeout);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, VkSemaphore*, VkResult> __vkCreateSemaphore;
    internal static VkResult vkCreateSemaphore(VkDevice device, VkSemaphoreCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSemaphore* pSemaphore)
    {
        return __vkCreateSemaphore(device, pCreateInfo, pAllocator, pSemaphore);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSemaphore, VkAllocationCallbacks*, void> __vkDestroySemaphore;
    internal static void vkDestroySemaphore(VkDevice device, VkSemaphore semaphore, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroySemaphore(device, semaphore, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, VkEvent*, VkResult> __vkCreateEvent;
    internal static VkResult vkCreateEvent(VkDevice device, VkEventCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkEvent* pEvent)
    {
        return __vkCreateEvent(device, pCreateInfo, pAllocator, pEvent);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkEvent, VkAllocationCallbacks*, void> __vkDestroyEvent;
    internal static void vkDestroyEvent(VkDevice device, VkEvent @event, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyEvent(device, @event, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkEvent, VkResult> __vkGetEventStatus;
    internal static VkResult vkGetEventStatus(VkDevice device, VkEvent @event)
    {
        return __vkGetEventStatus(device, @event);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkEvent, VkResult> __vkSetEvent;
    internal static VkResult vkSetEvent(VkDevice device, VkEvent @event)
    {
        return __vkSetEvent(device, @event);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkEvent, VkResult> __vkResetEvent;
    internal static VkResult vkResetEvent(VkDevice device, VkEvent @event)
    {
        return __vkResetEvent(device, @event);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, VkQueryPool*, VkResult> __vkCreateQueryPool;
    internal static VkResult vkCreateQueryPool(VkDevice device, VkQueryPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkQueryPool* pQueryPool)
    {
        return __vkCreateQueryPool(device, pCreateInfo, pAllocator, pQueryPool);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkQueryPool, VkAllocationCallbacks*, void> __vkDestroyQueryPool;
    internal static void vkDestroyQueryPool(VkDevice device, VkQueryPool queryPool, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyQueryPool(device, queryPool, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkQueryPool, uint, uint, uint, void*, VkDeviceSize, VkQueryResultFlags, VkResult> __vkGetQueryPoolResults;
    internal static VkResult vkGetQueryPoolResults(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount, uint dataSize, void* pData, VkDeviceSize stride, VkQueryResultFlags flags)
    {
        return __vkGetQueryPoolResults(device, queryPool, firstQuery, queryCount, dataSize, pData, stride, flags);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, VkBuffer*, VkResult> __vkCreateBuffer;
    internal static VkResult vkCreateBuffer(VkDevice device, VkBufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBuffer* pBuffer)
    {
        return __vkCreateBuffer(device, pCreateInfo, pAllocator, pBuffer);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkBuffer, VkAllocationCallbacks*, void> __vkDestroyBuffer;
    internal static void vkDestroyBuffer(VkDevice device, VkBuffer buffer, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyBuffer(device, buffer, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, VkBufferView*, VkResult> __vkCreateBufferView;
    internal static VkResult vkCreateBufferView(VkDevice device, VkBufferViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkBufferView* pView)
    {
        return __vkCreateBufferView(device, pCreateInfo, pAllocator, pView);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkBufferView, VkAllocationCallbacks*, void> __vkDestroyBufferView;
    internal static void vkDestroyBufferView(VkDevice device, VkBufferView bufferView, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyBufferView(device, bufferView, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, VkImage*, VkResult> __vkCreateImage;
    internal static VkResult vkCreateImage(VkDevice device, VkImageCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImage* pImage)
    {
        return __vkCreateImage(device, pCreateInfo, pAllocator, pImage);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImage, VkAllocationCallbacks*, void> __vkDestroyImage;
    internal static void vkDestroyImage(VkDevice device, VkImage image, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyImage(device, image, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImage, VkImageSubresource*, VkSubresourceLayout*, void> __vkGetImageSubresourceLayout;
    internal static void vkGetImageSubresourceLayout(VkDevice device, VkImage image, VkImageSubresource* pSubresource, VkSubresourceLayout* pLayout)
    {
        __vkGetImageSubresourceLayout(device, image, pSubresource, pLayout);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, VkImageView*, VkResult> __vkCreateImageView;
    internal static VkResult vkCreateImageView(VkDevice device, VkImageViewCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkImageView* pView)
    {
        return __vkCreateImageView(device, pCreateInfo, pAllocator, pView);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImageView, VkAllocationCallbacks*, void> __vkDestroyImageView;
    internal static void vkDestroyImageView(VkDevice device, VkImageView imageView, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyImageView(device, imageView, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, VkShaderModule*, VkResult> __vkCreateShaderModule;
    internal static VkResult vkCreateShaderModule(VkDevice device, VkShaderModuleCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkShaderModule* pShaderModule)
    {
        return __vkCreateShaderModule(device, pCreateInfo, pAllocator, pShaderModule);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkShaderModule, VkAllocationCallbacks*, void> __vkDestroyShaderModule;
    internal static void vkDestroyShaderModule(VkDevice device, VkShaderModule shaderModule, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyShaderModule(device, shaderModule, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, VkPipelineCache*, VkResult> __vkCreatePipelineCache;
    internal static VkResult vkCreatePipelineCache(VkDevice device, VkPipelineCacheCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineCache* pPipelineCache)
    {
        return __vkCreatePipelineCache(device, pCreateInfo, pAllocator, pPipelineCache);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipelineCache, VkAllocationCallbacks*, void> __vkDestroyPipelineCache;
    internal static void vkDestroyPipelineCache(VkDevice device, VkPipelineCache pipelineCache, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyPipelineCache(device, pipelineCache, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipelineCache, uint*, void*, VkResult> __vkGetPipelineCacheData;
    internal static VkResult vkGetPipelineCacheData(VkDevice device, VkPipelineCache pipelineCache, uint* pDataSize, void* pData)
    {
        return __vkGetPipelineCacheData(device, pipelineCache, pDataSize, pData);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkPipelineCache*, VkResult> __vkMergePipelineCaches;
    internal static VkResult vkMergePipelineCaches(VkDevice device, VkPipelineCache dstCache, uint srcCacheCount, VkPipelineCache* pSrcCaches)
    {
        return __vkMergePipelineCaches(device, dstCache, srcCacheCount, pSrcCaches);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkGraphicsPipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*, VkResult> __vkCreateGraphicsPipelines;
    internal static VkResult vkCreateGraphicsPipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkGraphicsPipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)
    {
        return __vkCreateGraphicsPipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkComputePipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*, VkResult> __vkCreateComputePipelines;
    internal static VkResult vkCreateComputePipelines(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkComputePipelineCreateInfo* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)
    {
        return __vkCreateComputePipelines(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipeline, VkAllocationCallbacks*, void> __vkDestroyPipeline;
    internal static void vkDestroyPipeline(VkDevice device, VkPipeline pipeline, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyPipeline(device, pipeline, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, VkPipelineLayout*, VkResult> __vkCreatePipelineLayout;
    internal static VkResult vkCreatePipelineLayout(VkDevice device, VkPipelineLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPipelineLayout* pPipelineLayout)
    {
        return __vkCreatePipelineLayout(device, pCreateInfo, pAllocator, pPipelineLayout);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipelineLayout, VkAllocationCallbacks*, void> __vkDestroyPipelineLayout;
    internal static void vkDestroyPipelineLayout(VkDevice device, VkPipelineLayout pipelineLayout, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyPipelineLayout(device, pipelineLayout, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, VkSampler*, VkResult> __vkCreateSampler;
    internal static VkResult vkCreateSampler(VkDevice device, VkSamplerCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSampler* pSampler)
    {
        return __vkCreateSampler(device, pCreateInfo, pAllocator, pSampler);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSampler, VkAllocationCallbacks*, void> __vkDestroySampler;
    internal static void vkDestroySampler(VkDevice device, VkSampler sampler, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroySampler(device, sampler, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, VkDescriptorSetLayout*, VkResult> __vkCreateDescriptorSetLayout;
    internal static VkResult vkCreateDescriptorSetLayout(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorSetLayout* pSetLayout)
    {
        return __vkCreateDescriptorSetLayout(device, pCreateInfo, pAllocator, pSetLayout);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDescriptorSetLayout, VkAllocationCallbacks*, void> __vkDestroyDescriptorSetLayout;
    internal static void vkDestroyDescriptorSetLayout(VkDevice device, VkDescriptorSetLayout descriptorSetLayout, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyDescriptorSetLayout(device, descriptorSetLayout, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, VkDescriptorPool*, VkResult> __vkCreateDescriptorPool;
    internal static VkResult vkCreateDescriptorPool(VkDevice device, VkDescriptorPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorPool* pDescriptorPool)
    {
        return __vkCreateDescriptorPool(device, pCreateInfo, pAllocator, pDescriptorPool);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDescriptorPool, VkAllocationCallbacks*, void> __vkDestroyDescriptorPool;
    internal static void vkDestroyDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyDescriptorPool(device, descriptorPool, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags, VkResult> __vkResetDescriptorPool;
    internal static VkResult vkResetDescriptorPool(VkDevice device, VkDescriptorPool descriptorPool, VkDescriptorPoolResetFlags flags)
    {
        return __vkResetDescriptorPool(device, descriptorPool, flags);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDescriptorSetAllocateInfo*, VkDescriptorSet*, VkResult> __vkAllocateDescriptorSets;
    internal static VkResult vkAllocateDescriptorSets(VkDevice device, VkDescriptorSetAllocateInfo* pAllocateInfo, VkDescriptorSet* pDescriptorSets)
    {
        return __vkAllocateDescriptorSets(device, pAllocateInfo, pDescriptorSets);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDescriptorPool, uint, VkDescriptorSet*, VkResult> __vkFreeDescriptorSets;
    internal static VkResult vkFreeDescriptorSets(VkDevice device, VkDescriptorPool descriptorPool, uint descriptorSetCount, VkDescriptorSet* pDescriptorSets)
    {
        return __vkFreeDescriptorSets(device, descriptorPool, descriptorSetCount, pDescriptorSets);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, VkWriteDescriptorSet*, uint, VkCopyDescriptorSet*, void> __vkUpdateDescriptorSets;
    internal static void vkUpdateDescriptorSets(VkDevice device, uint descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites, uint descriptorCopyCount, VkCopyDescriptorSet* pDescriptorCopies)
    {
        __vkUpdateDescriptorSets(device, descriptorWriteCount, pDescriptorWrites, descriptorCopyCount, pDescriptorCopies);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, VkFramebuffer*, VkResult> __vkCreateFramebuffer;
    internal static VkResult vkCreateFramebuffer(VkDevice device, VkFramebufferCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkFramebuffer* pFramebuffer)
    {
        return __vkCreateFramebuffer(device, pCreateInfo, pAllocator, pFramebuffer);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkFramebuffer, VkAllocationCallbacks*, void> __vkDestroyFramebuffer;
    internal static void vkDestroyFramebuffer(VkDevice device, VkFramebuffer framebuffer, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyFramebuffer(device, framebuffer, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, VkRenderPass*, VkResult> __vkCreateRenderPass;
    internal static VkResult vkCreateRenderPass(VkDevice device, VkRenderPassCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)
    {
        return __vkCreateRenderPass(device, pCreateInfo, pAllocator, pRenderPass);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkRenderPass, VkAllocationCallbacks*, void> __vkDestroyRenderPass;
    internal static void vkDestroyRenderPass(VkDevice device, VkRenderPass renderPass, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyRenderPass(device, renderPass, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkRenderPass, VkExtent2D*, void> __vkGetRenderAreaGranularity;
    internal static void vkGetRenderAreaGranularity(VkDevice device, VkRenderPass renderPass, VkExtent2D* pGranularity)
    {
        __vkGetRenderAreaGranularity(device, renderPass, pGranularity);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, VkCommandPool*, VkResult> __vkCreateCommandPool;
    internal static VkResult vkCreateCommandPool(VkDevice device, VkCommandPoolCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCommandPool* pCommandPool)
    {
        return __vkCreateCommandPool(device, pCreateInfo, pAllocator, pCommandPool);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkCommandPool, VkAllocationCallbacks*, void> __vkDestroyCommandPool;
    internal static void vkDestroyCommandPool(VkDevice device, VkCommandPool commandPool, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyCommandPool(device, commandPool, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkCommandPool, VkCommandPoolResetFlags, VkResult> __vkResetCommandPool;
    internal static VkResult vkResetCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolResetFlags flags)
    {
        return __vkResetCommandPool(device, commandPool, flags);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkCommandBufferAllocateInfo*, VkCommandBuffer*, VkResult> __vkAllocateCommandBuffers;
    internal static VkResult vkAllocateCommandBuffers(VkDevice device, VkCommandBufferAllocateInfo* pAllocateInfo, VkCommandBuffer* pCommandBuffers)
    {
        return __vkAllocateCommandBuffers(device, pAllocateInfo, pCommandBuffers);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkCommandPool, uint, VkCommandBuffer*, void> __vkFreeCommandBuffers;
    internal static void vkFreeCommandBuffers(VkDevice device, VkCommandPool commandPool, uint commandBufferCount, VkCommandBuffer* pCommandBuffers)
    {
        __vkFreeCommandBuffers(device, commandPool, commandBufferCount, pCommandBuffers);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCommandBufferBeginInfo*, VkResult> __vkBeginCommandBuffer;
    internal static VkResult vkBeginCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferBeginInfo* pBeginInfo)
    {
        return __vkBeginCommandBuffer(commandBuffer, pBeginInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkResult> __vkEndCommandBuffer;
    internal static VkResult vkEndCommandBuffer(VkCommandBuffer commandBuffer)
    {
        return __vkEndCommandBuffer(commandBuffer);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCommandBufferResetFlags, VkResult> __vkResetCommandBuffer;
    internal static VkResult vkResetCommandBuffer(VkCommandBuffer commandBuffer, VkCommandBufferResetFlags flags)
    {
        return __vkResetCommandBuffer(commandBuffer, flags);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, void> __vkCmdBindPipeline;
    internal static void vkCmdBindPipeline(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline)
    {
        __vkCmdBindPipeline(commandBuffer, pipelineBindPoint, pipeline);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, VkViewport*, void> __vkCmdSetViewport;
    internal static void vkCmdSetViewport(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewport* pViewports)
    {
        __vkCmdSetViewport(commandBuffer, firstViewport, viewportCount, pViewports);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, VkRect2D*, void> __vkCmdSetScissor;
    internal static void vkCmdSetScissor(VkCommandBuffer commandBuffer, uint firstScissor, uint scissorCount, VkRect2D* pScissors)
    {
        __vkCmdSetScissor(commandBuffer, firstScissor, scissorCount, pScissors);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, float, void> __vkCmdSetLineWidth;
    internal static void vkCmdSetLineWidth(VkCommandBuffer commandBuffer, float lineWidth)
    {
        __vkCmdSetLineWidth(commandBuffer, lineWidth);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, float, float, float, void> __vkCmdSetDepthBias;
    internal static void vkCmdSetDepthBias(VkCommandBuffer commandBuffer, float depthBiasConstantFactor, float depthBiasClamp, float depthBiasSlopeFactor)
    {
        __vkCmdSetDepthBias(commandBuffer, depthBiasConstantFactor, depthBiasClamp, depthBiasSlopeFactor);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, float*, void> __vkCmdSetBlendConstants;
    internal static void vkCmdSetBlendConstants(VkCommandBuffer commandBuffer, float* blendConstants)
    {
        __vkCmdSetBlendConstants(commandBuffer, blendConstants);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, float, float, void> __vkCmdSetDepthBounds;
    internal static void vkCmdSetDepthBounds(VkCommandBuffer commandBuffer, float minDepthBounds, float maxDepthBounds)
    {
        __vkCmdSetDepthBounds(commandBuffer, minDepthBounds, maxDepthBounds);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, uint, void> __vkCmdSetStencilCompareMask;
    internal static void vkCmdSetStencilCompareMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint compareMask)
    {
        __vkCmdSetStencilCompareMask(commandBuffer, faceMask, compareMask);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, uint, void> __vkCmdSetStencilWriteMask;
    internal static void vkCmdSetStencilWriteMask(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint writeMask)
    {
        __vkCmdSetStencilWriteMask(commandBuffer, faceMask, writeMask);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, uint, void> __vkCmdSetStencilReference;
    internal static void vkCmdSetStencilReference(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, uint reference)
    {
        __vkCmdSetStencilReference(commandBuffer, faceMask, reference);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkDescriptorSet*, uint, uint*, void> __vkCmdBindDescriptorSets;
    internal static void vkCmdBindDescriptorSets(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint firstSet, uint descriptorSetCount, VkDescriptorSet* pDescriptorSets, uint dynamicOffsetCount, uint* pDynamicOffsets)
    {
        __vkCmdBindDescriptorSets(commandBuffer, pipelineBindPoint, layout, firstSet, descriptorSetCount, pDescriptorSets, dynamicOffsetCount, pDynamicOffsets);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType, void> __vkCmdBindIndexBuffer;
    internal static void vkCmdBindIndexBuffer(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkIndexType indexType)
    {
        __vkCmdBindIndexBuffer(commandBuffer, buffer, offset, indexType);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, void> __vkCmdBindVertexBuffers;
    internal static void vkCmdBindVertexBuffers(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets)
    {
        __vkCmdBindVertexBuffers(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, uint, uint, void> __vkCmdDraw;
    internal static void vkCmdDraw(VkCommandBuffer commandBuffer, uint vertexCount, uint instanceCount, uint firstVertex, uint firstInstance)
    {
        __vkCmdDraw(commandBuffer, vertexCount, instanceCount, firstVertex, firstInstance);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, uint, int, uint, void> __vkCmdDrawIndexed;
    internal static void vkCmdDrawIndexed(VkCommandBuffer commandBuffer, uint indexCount, uint instanceCount, uint firstIndex, int vertexOffset, uint firstInstance)
    {
        __vkCmdDrawIndexed(commandBuffer, indexCount, instanceCount, firstIndex, vertexOffset, firstInstance);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void> __vkCmdDrawIndirect;
    internal static void vkCmdDrawIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride)
    {
        __vkCmdDrawIndirect(commandBuffer, buffer, offset, drawCount, stride);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void> __vkCmdDrawIndexedIndirect;
    internal static void vkCmdDrawIndexedIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride)
    {
        __vkCmdDrawIndexedIndirect(commandBuffer, buffer, offset, drawCount, stride);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, uint, void> __vkCmdDispatch;
    internal static void vkCmdDispatch(VkCommandBuffer commandBuffer, uint groupCountX, uint groupCountY, uint groupCountZ)
    {
        __vkCmdDispatch(commandBuffer, groupCountX, groupCountY, groupCountZ);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, void> __vkCmdDispatchIndirect;
    internal static void vkCmdDispatchIndirect(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset)
    {
        __vkCmdDispatchIndirect(commandBuffer, buffer, offset);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkBuffer, uint, VkBufferCopy*, void> __vkCmdCopyBuffer;
    internal static void vkCmdCopyBuffer(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkBuffer dstBuffer, uint regionCount, VkBufferCopy* pRegions)
    {
        __vkCmdCopyBuffer(commandBuffer, srcBuffer, dstBuffer, regionCount, pRegions);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageCopy*, void> __vkCmdCopyImage;
    internal static void vkCmdCopyImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageCopy* pRegions)
    {
        __vkCmdCopyImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageBlit*, VkFilter, void> __vkCmdBlitImage;
    internal static void vkCmdBlitImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageBlit* pRegions, VkFilter filter)
    {
        __vkCmdBlitImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions, filter);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint, VkBufferImageCopy*, void> __vkCmdCopyBufferToImage;
    internal static void vkCmdCopyBufferToImage(VkCommandBuffer commandBuffer, VkBuffer srcBuffer, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkBufferImageCopy* pRegions)
    {
        __vkCmdCopyBufferToImage(commandBuffer, srcBuffer, dstImage, dstImageLayout, regionCount, pRegions);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint, VkBufferImageCopy*, void> __vkCmdCopyImageToBuffer;
    internal static void vkCmdCopyImageToBuffer(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkBuffer dstBuffer, uint regionCount, VkBufferImageCopy* pRegions)
    {
        __vkCmdCopyImageToBuffer(commandBuffer, srcImage, srcImageLayout, dstBuffer, regionCount, pRegions);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, void*, void> __vkCmdUpdateBuffer;
    internal static void vkCmdUpdateBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize dataSize, void* pData)
    {
        __vkCmdUpdateBuffer(commandBuffer, dstBuffer, dstOffset, dataSize, pData);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, uint, void> __vkCmdFillBuffer;
    internal static void vkCmdFillBuffer(VkCommandBuffer commandBuffer, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize size, uint data)
    {
        __vkCmdFillBuffer(commandBuffer, dstBuffer, dstOffset, size, data);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkClearColorValue*, uint, VkImageSubresourceRange*, void> __vkCmdClearColorImage;
    internal static void vkCmdClearColorImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearColorValue* pColor, uint rangeCount, VkImageSubresourceRange* pRanges)
    {
        __vkCmdClearColorImage(commandBuffer, image, imageLayout, pColor, rangeCount, pRanges);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkClearDepthStencilValue*, uint, VkImageSubresourceRange*, void> __vkCmdClearDepthStencilImage;
    internal static void vkCmdClearDepthStencilImage(VkCommandBuffer commandBuffer, VkImage image, VkImageLayout imageLayout, VkClearDepthStencilValue* pDepthStencil, uint rangeCount, VkImageSubresourceRange* pRanges)
    {
        __vkCmdClearDepthStencilImage(commandBuffer, image, imageLayout, pDepthStencil, rangeCount, pRanges);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkClearAttachment*, uint, VkClearRect*, void> __vkCmdClearAttachments;
    internal static void vkCmdClearAttachments(VkCommandBuffer commandBuffer, uint attachmentCount, VkClearAttachment* pAttachments, uint rectCount, VkClearRect* pRects)
    {
        __vkCmdClearAttachments(commandBuffer, attachmentCount, pAttachments, rectCount, pRects);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageResolve*, void> __vkCmdResolveImage;
    internal static void vkCmdResolveImage(VkCommandBuffer commandBuffer, VkImage srcImage, VkImageLayout srcImageLayout, VkImage dstImage, VkImageLayout dstImageLayout, uint regionCount, VkImageResolve* pRegions)
    {
        __vkCmdResolveImage(commandBuffer, srcImage, srcImageLayout, dstImage, dstImageLayout, regionCount, pRegions);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void> __vkCmdSetEvent;
    internal static void vkCmdSetEvent(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags stageMask)
    {
        __vkCmdSetEvent(commandBuffer, @event, stageMask);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void> __vkCmdResetEvent;
    internal static void vkCmdResetEvent(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags stageMask)
    {
        __vkCmdResetEvent(commandBuffer, @event, stageMask);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkEvent*, VkPipelineStageFlags, VkPipelineStageFlags, uint, VkMemoryBarrier*, uint, VkBufferMemoryBarrier*, uint, VkImageMemoryBarrier*, void> __vkCmdWaitEvents;
    internal static void vkCmdWaitEvents(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
    {
        __vkCmdWaitEvents(commandBuffer, eventCount, pEvents, srcStageMask, dstStageMask, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint, VkMemoryBarrier*, uint, VkBufferMemoryBarrier*, uint, VkImageMemoryBarrier*, void> __vkCmdPipelineBarrier;
    internal static void vkCmdPipelineBarrier(VkCommandBuffer commandBuffer, VkPipelineStageFlags srcStageMask, VkPipelineStageFlags dstStageMask, VkDependencyFlags dependencyFlags, uint memoryBarrierCount, VkMemoryBarrier* pMemoryBarriers, uint bufferMemoryBarrierCount, VkBufferMemoryBarrier* pBufferMemoryBarriers, uint imageMemoryBarrierCount, VkImageMemoryBarrier* pImageMemoryBarriers)
    {
        __vkCmdPipelineBarrier(commandBuffer, srcStageMask, dstStageMask, dependencyFlags, memoryBarrierCount, pMemoryBarriers, bufferMemoryBarrierCount, pBufferMemoryBarriers, imageMemoryBarrierCount, pImageMemoryBarriers);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, VkQueryControlFlags, void> __vkCmdBeginQuery;
    internal static void vkCmdBeginQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags)
    {
        __vkCmdBeginQuery(commandBuffer, queryPool, query, flags);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, void> __vkCmdEndQuery;
    internal static void vkCmdEndQuery(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query)
    {
        __vkCmdEndQuery(commandBuffer, queryPool, query);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, uint, void> __vkCmdResetQueryPool;
    internal static void vkCmdResetQueryPool(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount)
    {
        __vkCmdResetQueryPool(commandBuffer, queryPool, firstQuery, queryCount);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlagBits, VkQueryPool, uint, void> __vkCmdWriteTimestamp;
    internal static void vkCmdWriteTimestamp(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkQueryPool queryPool, uint query)
    {
        __vkCmdWriteTimestamp(commandBuffer, pipelineStage, queryPool, query);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, uint, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags, void> __vkCmdCopyQueryPoolResults;
    internal static void vkCmdCopyQueryPoolResults(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint firstQuery, uint queryCount, VkBuffer dstBuffer, VkDeviceSize dstOffset, VkDeviceSize stride, VkQueryResultFlags flags)
    {
        __vkCmdCopyQueryPoolResults(commandBuffer, queryPool, firstQuery, queryCount, dstBuffer, dstOffset, stride, flags);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint, uint, void*, void> __vkCmdPushConstants;
    internal static void vkCmdPushConstants(VkCommandBuffer commandBuffer, VkPipelineLayout layout, VkShaderStageFlags stageFlags, uint offset, uint size, void* pValues)
    {
        __vkCmdPushConstants(commandBuffer, layout, stageFlags, offset, size, pValues);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassContents, void> __vkCmdBeginRenderPass;
    internal static void vkCmdBeginRenderPass(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassContents contents)
    {
        __vkCmdBeginRenderPass(commandBuffer, pRenderPassBegin, contents);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkSubpassContents, void> __vkCmdNextSubpass;
    internal static void vkCmdNextSubpass(VkCommandBuffer commandBuffer, VkSubpassContents contents)
    {
        __vkCmdNextSubpass(commandBuffer, contents);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, void> __vkCmdEndRenderPass;
    internal static void vkCmdEndRenderPass(VkCommandBuffer commandBuffer)
    {
        __vkCmdEndRenderPass(commandBuffer);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkCommandBuffer*, void> __vkCmdExecuteCommands;
    internal static void vkCmdExecuteCommands(VkCommandBuffer commandBuffer, uint commandBufferCount, VkCommandBuffer* pCommandBuffers)
    {
        __vkCmdExecuteCommands(commandBuffer, commandBufferCount, pCommandBuffers);
    }

    private static unsafe delegate* unmanaged<uint*, VkResult> __vkEnumerateInstanceVersion;
    internal static VkResult vkEnumerateInstanceVersion(uint* pApiVersion)
    {
        return __vkEnumerateInstanceVersion(pApiVersion);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, VkBindBufferMemoryInfo*, VkResult> __vkBindBufferMemory2;
    internal static VkResult vkBindBufferMemory2(VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfo* pBindInfos)
    {
        return __vkBindBufferMemory2(device, bindInfoCount, pBindInfos);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, VkBindImageMemoryInfo*, VkResult> __vkBindImageMemory2;
    internal static VkResult vkBindImageMemory2(VkDevice device, uint bindInfoCount, VkBindImageMemoryInfo* pBindInfos)
    {
        return __vkBindImageMemory2(device, bindInfoCount, pBindInfos);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, uint, uint, VkPeerMemoryFeatureFlags*, void> __vkGetDeviceGroupPeerMemoryFeatures;
    internal static void vkGetDeviceGroupPeerMemoryFeatures(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
    {
        __vkGetDeviceGroupPeerMemoryFeatures(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, void> __vkCmdSetDeviceMask;
    internal static void vkCmdSetDeviceMask(VkCommandBuffer commandBuffer, uint deviceMask)
    {
        __vkCmdSetDeviceMask(commandBuffer, deviceMask);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, uint, uint, uint, uint, void> __vkCmdDispatchBase;
    internal static void vkCmdDispatchBase(VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
    {
        __vkCmdDispatchBase(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
    }

    private static unsafe delegate* unmanaged<VkInstance, uint*, VkPhysicalDeviceGroupProperties*, VkResult> __vkEnumeratePhysicalDeviceGroups;
    internal static VkResult vkEnumeratePhysicalDeviceGroups(VkInstance instance, uint* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
    {
        return __vkEnumeratePhysicalDeviceGroups(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*, void> __vkGetImageMemoryRequirements2;
    internal static void vkGetImageMemoryRequirements2(VkDevice device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
    {
        __vkGetImageMemoryRequirements2(device, pInfo, pMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*, void> __vkGetBufferMemoryRequirements2;
    internal static void vkGetBufferMemoryRequirements2(VkDevice device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
    {
        __vkGetBufferMemoryRequirements2(device, pInfo, pMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2*, void> __vkGetImageSparseMemoryRequirements2;
    internal static void vkGetImageSparseMemoryRequirements2(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
    {
        __vkGetImageSparseMemoryRequirements2(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceFeatures2*, void> __vkGetPhysicalDeviceFeatures2;
    internal static void vkGetPhysicalDeviceFeatures2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)
    {
        __vkGetPhysicalDeviceFeatures2(physicalDevice, pFeatures);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceProperties2*, void> __vkGetPhysicalDeviceProperties2;
    internal static void vkGetPhysicalDeviceProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties)
    {
        __vkGetPhysicalDeviceProperties2(physicalDevice, pProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkFormat, VkFormatProperties2*, void> __vkGetPhysicalDeviceFormatProperties2;
    internal static void vkGetPhysicalDeviceFormatProperties2(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)
    {
        __vkGetPhysicalDeviceFormatProperties2(physicalDevice, format, pFormatProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult> __vkGetPhysicalDeviceImageFormatProperties2;
    internal static VkResult vkGetPhysicalDeviceImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)
    {
        return __vkGetPhysicalDeviceImageFormatProperties2(physicalDevice, pImageFormatInfo, pImageFormatProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties2*, void> __vkGetPhysicalDeviceQueueFamilyProperties2;
    internal static void vkGetPhysicalDeviceQueueFamilyProperties2(VkPhysicalDevice physicalDevice, uint* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)
    {
        __vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceMemoryProperties2*, void> __vkGetPhysicalDeviceMemoryProperties2;
    internal static void vkGetPhysicalDeviceMemoryProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
    {
        __vkGetPhysicalDeviceMemoryProperties2(physicalDevice, pMemoryProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void> __vkGetPhysicalDeviceSparseImageFormatProperties2;
    internal static void vkGetPhysicalDeviceSparseImageFormatProperties2(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, VkSparseImageFormatProperties2* pProperties)
    {
        __vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkCommandPool, VkCommandPoolTrimFlags, void> __vkTrimCommandPool;
    internal static void vkTrimCommandPool(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)
    {
        __vkTrimCommandPool(device, commandPool, flags);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeviceQueueInfo2*, VkQueue*, void> __vkGetDeviceQueue2;
    internal static void vkGetDeviceQueue2(VkDevice device, VkDeviceQueueInfo2* pQueueInfo, VkQueue* pQueue)
    {
        __vkGetDeviceQueue2(device, pQueueInfo, pQueue);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult> __vkCreateSamplerYcbcrConversion;
    internal static VkResult vkCreateSamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)
    {
        return __vkCreateSamplerYcbcrConversion(device, pCreateInfo, pAllocator, pYcbcrConversion);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSamplerYcbcrConversion, VkAllocationCallbacks*, void> __vkDestroySamplerYcbcrConversion;
    internal static void vkDestroySamplerYcbcrConversion(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroySamplerYcbcrConversion(device, ycbcrConversion, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult> __vkCreateDescriptorUpdateTemplate;
    internal static VkResult vkCreateDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
    {
        return __vkCreateDescriptorUpdateTemplate(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplate, VkAllocationCallbacks*, void> __vkDestroyDescriptorUpdateTemplate;
    internal static void vkDestroyDescriptorUpdateTemplate(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyDescriptorUpdateTemplate(device, descriptorUpdateTemplate, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, void*, void> __vkUpdateDescriptorSetWithTemplate;
    internal static void vkUpdateDescriptorSetWithTemplate(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)
    {
        __vkUpdateDescriptorSetWithTemplate(device, descriptorSet, descriptorUpdateTemplate, pData);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void> __vkGetPhysicalDeviceExternalBufferProperties;
    internal static void vkGetPhysicalDeviceExternalBufferProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)
    {
        __vkGetPhysicalDeviceExternalBufferProperties(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void> __vkGetPhysicalDeviceExternalFenceProperties;
    internal static void vkGetPhysicalDeviceExternalFenceProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)
    {
        __vkGetPhysicalDeviceExternalFenceProperties(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void> __vkGetPhysicalDeviceExternalSemaphoreProperties;
    internal static void vkGetPhysicalDeviceExternalSemaphoreProperties(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
    {
        __vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkDescriptorSetLayoutSupport*, void> __vkGetDescriptorSetLayoutSupport;
    internal static void vkGetDescriptorSetLayoutSupport(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)
    {
        __vkGetDescriptorSetLayoutSupport(device, pCreateInfo, pSupport);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> __vkCmdDrawIndirectCount;
    internal static void vkCmdDrawIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
    {
        __vkCmdDrawIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> __vkCmdDrawIndexedIndirectCount;
    internal static void vkCmdDrawIndexedIndirectCount(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
    {
        __vkCmdDrawIndexedIndirectCount(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult> __vkCreateRenderPass2;
    internal static VkResult vkCreateRenderPass2(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)
    {
        return __vkCreateRenderPass2(device, pCreateInfo, pAllocator, pRenderPass);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void> __vkCmdBeginRenderPass2;
    internal static void vkCmdBeginRenderPass2(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo)
    {
        __vkCmdBeginRenderPass2(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkSubpassBeginInfo*, VkSubpassEndInfo*, void> __vkCmdNextSubpass2;
    internal static void vkCmdNextSubpass2(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo)
    {
        __vkCmdNextSubpass2(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkSubpassEndInfo*, void> __vkCmdEndRenderPass2;
    internal static void vkCmdEndRenderPass2(VkCommandBuffer commandBuffer, VkSubpassEndInfo* pSubpassEndInfo)
    {
        __vkCmdEndRenderPass2(commandBuffer, pSubpassEndInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkQueryPool, uint, uint, void> __vkResetQueryPool;
    internal static void vkResetQueryPool(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount)
    {
        __vkResetQueryPool(device, queryPool, firstQuery, queryCount);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSemaphore, ulong*, VkResult> __vkGetSemaphoreCounterValue;
    internal static VkResult vkGetSemaphoreCounterValue(VkDevice device, VkSemaphore semaphore, ulong* pValue)
    {
        return __vkGetSemaphoreCounterValue(device, semaphore, pValue);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSemaphoreWaitInfo*, ulong, VkResult> __vkWaitSemaphores;
    internal static VkResult vkWaitSemaphores(VkDevice device, VkSemaphoreWaitInfo* pWaitInfo, ulong timeout)
    {
        return __vkWaitSemaphores(device, pWaitInfo, timeout);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSemaphoreSignalInfo*, VkResult> __vkSignalSemaphore;
    internal static VkResult vkSignalSemaphore(VkDevice device, VkSemaphoreSignalInfo* pSignalInfo)
    {
        return __vkSignalSemaphore(device, pSignalInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, VkDeviceAddress> __vkGetBufferDeviceAddress;
    internal static VkDeviceAddress vkGetBufferDeviceAddress(VkDevice device, VkBufferDeviceAddressInfo* pInfo)
    {
        return __vkGetBufferDeviceAddress(device, pInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, ulong> __vkGetBufferOpaqueCaptureAddress;
    internal static ulong vkGetBufferOpaqueCaptureAddress(VkDevice device, VkBufferDeviceAddressInfo* pInfo)
    {
        return __vkGetBufferOpaqueCaptureAddress(device, pInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong> __vkGetDeviceMemoryOpaqueCaptureAddress;
    internal static ulong vkGetDeviceMemoryOpaqueCaptureAddress(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)
    {
        return __vkGetDeviceMemoryOpaqueCaptureAddress(device, pInfo);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint*, VkPhysicalDeviceToolProperties*, VkResult> __vkGetPhysicalDeviceToolProperties;
    internal static VkResult vkGetPhysicalDeviceToolProperties(VkPhysicalDevice physicalDevice, uint* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties)
    {
        return __vkGetPhysicalDeviceToolProperties(physicalDevice, pToolCount, pToolProperties);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, VkPrivateDataSlot*, VkResult> __vkCreatePrivateDataSlot;
    internal static VkResult vkCreatePrivateDataSlot(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot)
    {
        return __vkCreatePrivateDataSlot(device, pCreateInfo, pAllocator, pPrivateDataSlot);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPrivateDataSlot, VkAllocationCallbacks*, void> __vkDestroyPrivateDataSlot;
    internal static void vkDestroyPrivateDataSlot(VkDevice device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyPrivateDataSlot(device, privateDataSlot, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong, VkResult> __vkSetPrivateData;
    internal static VkResult vkSetPrivateData(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong data)
    {
        return __vkSetPrivateData(device, objectType, objectHandle, privateDataSlot, data);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong*, void> __vkGetPrivateData;
    internal static void vkGetPrivateData(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong* pData)
    {
        __vkGetPrivateData(device, objectType, objectHandle, privateDataSlot, pData);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkEvent, VkDependencyInfo*, void> __vkCmdSetEvent2;
    internal static void vkCmdSetEvent2(VkCommandBuffer commandBuffer, VkEvent @event, VkDependencyInfo* pDependencyInfo)
    {
        __vkCmdSetEvent2(commandBuffer, @event, pDependencyInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkEvent, VkPipelineStageFlags2, void> __vkCmdResetEvent2;
    internal static void vkCmdResetEvent2(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags2 stageMask)
    {
        __vkCmdResetEvent2(commandBuffer, @event, stageMask);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkEvent*, VkDependencyInfo*, void> __vkCmdWaitEvents2;
    internal static void vkCmdWaitEvents2(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkDependencyInfo* pDependencyInfos)
    {
        __vkCmdWaitEvents2(commandBuffer, eventCount, pEvents, pDependencyInfos);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkDependencyInfo*, void> __vkCmdPipelineBarrier2;
    internal static void vkCmdPipelineBarrier2(VkCommandBuffer commandBuffer, VkDependencyInfo* pDependencyInfo)
    {
        __vkCmdPipelineBarrier2(commandBuffer, pDependencyInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint, void> __vkCmdWriteTimestamp2;
    internal static void vkCmdWriteTimestamp2(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint query)
    {
        __vkCmdWriteTimestamp2(commandBuffer, stage, queryPool, query);
    }

    private static unsafe delegate* unmanaged<VkQueue, uint, VkSubmitInfo2*, VkFence, VkResult> __vkQueueSubmit2;
    internal static VkResult vkQueueSubmit2(VkQueue queue, uint submitCount, VkSubmitInfo2* pSubmits, VkFence fence)
    {
        return __vkQueueSubmit2(queue, submitCount, pSubmits, fence);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCopyBufferInfo2*, void> __vkCmdCopyBuffer2;
    internal static void vkCmdCopyBuffer2(VkCommandBuffer commandBuffer, VkCopyBufferInfo2* pCopyBufferInfo)
    {
        __vkCmdCopyBuffer2(commandBuffer, pCopyBufferInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCopyImageInfo2*, void> __vkCmdCopyImage2;
    internal static void vkCmdCopyImage2(VkCommandBuffer commandBuffer, VkCopyImageInfo2* pCopyImageInfo)
    {
        __vkCmdCopyImage2(commandBuffer, pCopyImageInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCopyBufferToImageInfo2*, void> __vkCmdCopyBufferToImage2;
    internal static void vkCmdCopyBufferToImage2(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* pCopyBufferToImageInfo)
    {
        __vkCmdCopyBufferToImage2(commandBuffer, pCopyBufferToImageInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCopyImageToBufferInfo2*, void> __vkCmdCopyImageToBuffer2;
    internal static void vkCmdCopyImageToBuffer2(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* pCopyImageToBufferInfo)
    {
        __vkCmdCopyImageToBuffer2(commandBuffer, pCopyImageToBufferInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBlitImageInfo2*, void> __vkCmdBlitImage2;
    internal static void vkCmdBlitImage2(VkCommandBuffer commandBuffer, VkBlitImageInfo2* pBlitImageInfo)
    {
        __vkCmdBlitImage2(commandBuffer, pBlitImageInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkResolveImageInfo2*, void> __vkCmdResolveImage2;
    internal static void vkCmdResolveImage2(VkCommandBuffer commandBuffer, VkResolveImageInfo2* pResolveImageInfo)
    {
        __vkCmdResolveImage2(commandBuffer, pResolveImageInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkRenderingInfo*, void> __vkCmdBeginRendering;
    internal static void vkCmdBeginRendering(VkCommandBuffer commandBuffer, VkRenderingInfo* pRenderingInfo)
    {
        __vkCmdBeginRendering(commandBuffer, pRenderingInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, void> __vkCmdEndRendering;
    internal static void vkCmdEndRendering(VkCommandBuffer commandBuffer)
    {
        __vkCmdEndRendering(commandBuffer);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCullModeFlags, void> __vkCmdSetCullMode;
    internal static void vkCmdSetCullMode(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
    {
        __vkCmdSetCullMode(commandBuffer, cullMode);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkFrontFace, void> __vkCmdSetFrontFace;
    internal static void vkCmdSetFrontFace(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
    {
        __vkCmdSetFrontFace(commandBuffer, frontFace);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkPrimitiveTopology, void> __vkCmdSetPrimitiveTopology;
    internal static void vkCmdSetPrimitiveTopology(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
    {
        __vkCmdSetPrimitiveTopology(commandBuffer, primitiveTopology);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkViewport*, void> __vkCmdSetViewportWithCount;
    internal static void vkCmdSetViewportWithCount(VkCommandBuffer commandBuffer, uint viewportCount, VkViewport* pViewports)
    {
        __vkCmdSetViewportWithCount(commandBuffer, viewportCount, pViewports);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkRect2D*, void> __vkCmdSetScissorWithCount;
    internal static void vkCmdSetScissorWithCount(VkCommandBuffer commandBuffer, uint scissorCount, VkRect2D* pScissors)
    {
        __vkCmdSetScissorWithCount(commandBuffer, scissorCount, pScissors);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, VkDeviceSize*, void> __vkCmdBindVertexBuffers2;
    internal static void vkCmdBindVertexBuffers2(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides)
    {
        __vkCmdBindVertexBuffers2(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBool32, void> __vkCmdSetDepthTestEnable;
    internal static void vkCmdSetDepthTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
    {
        __vkCmdSetDepthTestEnable(commandBuffer, depthTestEnable);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBool32, void> __vkCmdSetDepthWriteEnable;
    internal static void vkCmdSetDepthWriteEnable(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
    {
        __vkCmdSetDepthWriteEnable(commandBuffer, depthWriteEnable);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCompareOp, void> __vkCmdSetDepthCompareOp;
    internal static void vkCmdSetDepthCompareOp(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
    {
        __vkCmdSetDepthCompareOp(commandBuffer, depthCompareOp);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBool32, void> __vkCmdSetDepthBoundsTestEnable;
    internal static void vkCmdSetDepthBoundsTestEnable(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
    {
        __vkCmdSetDepthBoundsTestEnable(commandBuffer, depthBoundsTestEnable);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBool32, void> __vkCmdSetStencilTestEnable;
    internal static void vkCmdSetStencilTestEnable(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
    {
        __vkCmdSetStencilTestEnable(commandBuffer, stencilTestEnable);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp, void> __vkCmdSetStencilOp;
    internal static void vkCmdSetStencilOp(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
    {
        __vkCmdSetStencilOp(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBool32, void> __vkCmdSetRasterizerDiscardEnable;
    internal static void vkCmdSetRasterizerDiscardEnable(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
    {
        __vkCmdSetRasterizerDiscardEnable(commandBuffer, rasterizerDiscardEnable);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBool32, void> __vkCmdSetDepthBiasEnable;
    internal static void vkCmdSetDepthBiasEnable(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
    {
        __vkCmdSetDepthBiasEnable(commandBuffer, depthBiasEnable);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBool32, void> __vkCmdSetPrimitiveRestartEnable;
    internal static void vkCmdSetPrimitiveRestartEnable(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
    {
        __vkCmdSetPrimitiveRestartEnable(commandBuffer, primitiveRestartEnable);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeviceBufferMemoryRequirements*, VkMemoryRequirements2*, void> __vkGetDeviceBufferMemoryRequirements;
    internal static void vkGetDeviceBufferMemoryRequirements(VkDevice device, VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)
    {
        __vkGetDeviceBufferMemoryRequirements(device, pInfo, pMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeviceImageMemoryRequirements*, VkMemoryRequirements2*, void> __vkGetDeviceImageMemoryRequirements;
    internal static void vkGetDeviceImageMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)
    {
        __vkGetDeviceImageMemoryRequirements(device, pInfo, pMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeviceImageMemoryRequirements*, uint*, VkSparseImageMemoryRequirements2*, void> __vkGetDeviceImageSparseMemoryRequirements;
    internal static void vkGetDeviceImageSparseMemoryRequirements(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
    {
        __vkGetDeviceImageSparseMemoryRequirements(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkInstance, VkSurfaceKHR, VkAllocationCallbacks*, void> __vkDestroySurfaceKHR;
    internal static void vkDestroySurfaceKHR(VkInstance instance, VkSurfaceKHR surface, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroySurfaceKHR(instance, surface, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint, VkSurfaceKHR, VkBool32*, VkResult> __vkGetPhysicalDeviceSurfaceSupportKHR;
    internal static VkResult vkGetPhysicalDeviceSurfaceSupportKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, VkSurfaceKHR surface, VkBool32* pSupported)
    {
        return __vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice, queueFamilyIndex, surface, pSupported);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, VkSurfaceCapabilitiesKHR*, VkResult> __vkGetPhysicalDeviceSurfaceCapabilitiesKHR;
    internal static VkResult vkGetPhysicalDeviceSurfaceCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilitiesKHR* pSurfaceCapabilities)
    {
        return __vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice, surface, pSurfaceCapabilities);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkSurfaceFormatKHR*, VkResult> __vkGetPhysicalDeviceSurfaceFormatsKHR;
    internal static VkResult vkGetPhysicalDeviceSurfaceFormatsKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* pSurfaceFormatCount, VkSurfaceFormatKHR* pSurfaceFormats)
    {
        return __vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice, surface, pSurfaceFormatCount, pSurfaceFormats);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkPresentModeKHR*, VkResult> __vkGetPhysicalDeviceSurfacePresentModesKHR;
    internal static VkResult vkGetPhysicalDeviceSurfacePresentModesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* pPresentModeCount, VkPresentModeKHR* pPresentModes)
    {
        return __vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice, surface, pPresentModeCount, pPresentModes);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult> __vkCreateSwapchainKHR;
    internal static VkResult vkCreateSwapchainKHR(VkDevice device, VkSwapchainCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchain)
    {
        return __vkCreateSwapchainKHR(device, pCreateInfo, pAllocator, pSwapchain);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSwapchainKHR, VkAllocationCallbacks*, void> __vkDestroySwapchainKHR;
    internal static void vkDestroySwapchainKHR(VkDevice device, VkSwapchainKHR swapchain, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroySwapchainKHR(device, swapchain, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSwapchainKHR, uint*, VkImage*, VkResult> __vkGetSwapchainImagesKHR;
    internal static VkResult vkGetSwapchainImagesKHR(VkDevice device, VkSwapchainKHR swapchain, uint* pSwapchainImageCount, VkImage* pSwapchainImages)
    {
        return __vkGetSwapchainImagesKHR(device, swapchain, pSwapchainImageCount, pSwapchainImages);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSwapchainKHR, ulong, VkSemaphore, VkFence, uint*, VkResult> __vkAcquireNextImageKHR;
    internal static VkResult vkAcquireNextImageKHR(VkDevice device, VkSwapchainKHR swapchain, ulong timeout, VkSemaphore semaphore, VkFence fence, uint* pImageIndex)
    {
        return __vkAcquireNextImageKHR(device, swapchain, timeout, semaphore, fence, pImageIndex);
    }

    private static unsafe delegate* unmanaged<VkQueue, VkPresentInfoKHR*, VkResult> __vkQueuePresentKHR;
    internal static VkResult vkQueuePresentKHR(VkQueue queue, VkPresentInfoKHR* pPresentInfo)
    {
        return __vkQueuePresentKHR(queue, pPresentInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeviceGroupPresentCapabilitiesKHR*, VkResult> __vkGetDeviceGroupPresentCapabilitiesKHR;
    internal static VkResult vkGetDeviceGroupPresentCapabilitiesKHR(VkDevice device, VkDeviceGroupPresentCapabilitiesKHR* pDeviceGroupPresentCapabilities)
    {
        return __vkGetDeviceGroupPresentCapabilitiesKHR(device, pDeviceGroupPresentCapabilities);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSurfaceKHR, VkDeviceGroupPresentModeFlagsKHR*, VkResult> __vkGetDeviceGroupSurfacePresentModesKHR;
    internal static VkResult vkGetDeviceGroupSurfacePresentModesKHR(VkDevice device, VkSurfaceKHR surface, VkDeviceGroupPresentModeFlagsKHR* pModes)
    {
        return __vkGetDeviceGroupSurfacePresentModesKHR(device, surface, pModes);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkRect2D*, VkResult> __vkGetPhysicalDevicePresentRectanglesKHR;
    internal static VkResult vkGetPhysicalDevicePresentRectanglesKHR(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, uint* pRectCount, VkRect2D* pRects)
    {
        return __vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice, surface, pRectCount, pRects);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkAcquireNextImageInfoKHR*, uint*, VkResult> __vkAcquireNextImage2KHR;
    internal static VkResult vkAcquireNextImage2KHR(VkDevice device, VkAcquireNextImageInfoKHR* pAcquireInfo, uint* pImageIndex)
    {
        return __vkAcquireNextImage2KHR(device, pAcquireInfo, pImageIndex);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayPropertiesKHR*, VkResult> __vkGetPhysicalDeviceDisplayPropertiesKHR;
    internal static VkResult vkGetPhysicalDeviceDisplayPropertiesKHR(VkPhysicalDevice physicalDevice, uint* pPropertyCount, VkDisplayPropertiesKHR* pProperties)
    {
        return __vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice, pPropertyCount, pProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayPlanePropertiesKHR*, VkResult> __vkGetPhysicalDeviceDisplayPlanePropertiesKHR;
    internal static VkResult vkGetPhysicalDeviceDisplayPlanePropertiesKHR(VkPhysicalDevice physicalDevice, uint* pPropertyCount, VkDisplayPlanePropertiesKHR* pProperties)
    {
        return __vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice, pPropertyCount, pProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint, uint*, VkDisplayKHR*, VkResult> __vkGetDisplayPlaneSupportedDisplaysKHR;
    internal static VkResult vkGetDisplayPlaneSupportedDisplaysKHR(VkPhysicalDevice physicalDevice, uint planeIndex, uint* pDisplayCount, VkDisplayKHR* pDisplays)
    {
        return __vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice, planeIndex, pDisplayCount, pDisplays);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, uint*, VkDisplayModePropertiesKHR*, VkResult> __vkGetDisplayModePropertiesKHR;
    internal static VkResult vkGetDisplayModePropertiesKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint* pPropertyCount, VkDisplayModePropertiesKHR* pProperties)
    {
        return __vkGetDisplayModePropertiesKHR(physicalDevice, display, pPropertyCount, pProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, VkDisplayModeKHR*, VkResult> __vkCreateDisplayModeKHR;
    internal static VkResult vkCreateDisplayModeKHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, VkDisplayModeCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDisplayModeKHR* pMode)
    {
        return __vkCreateDisplayModeKHR(physicalDevice, display, pCreateInfo, pAllocator, pMode);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkDisplayModeKHR, uint, VkDisplayPlaneCapabilitiesKHR*, VkResult> __vkGetDisplayPlaneCapabilitiesKHR;
    internal static VkResult vkGetDisplayPlaneCapabilitiesKHR(VkPhysicalDevice physicalDevice, VkDisplayModeKHR mode, uint planeIndex, VkDisplayPlaneCapabilitiesKHR* pCapabilities)
    {
        return __vkGetDisplayPlaneCapabilitiesKHR(physicalDevice, mode, planeIndex, pCapabilities);
    }

    private static unsafe delegate* unmanaged<VkInstance, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult> __vkCreateDisplayPlaneSurfaceKHR;
    internal static VkResult vkCreateDisplayPlaneSurfaceKHR(VkInstance instance, VkDisplaySurfaceCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)
    {
        return __vkCreateDisplayPlaneSurfaceKHR(instance, pCreateInfo, pAllocator, pSurface);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult> __vkCreateSharedSwapchainsKHR;
    internal static VkResult vkCreateSharedSwapchainsKHR(VkDevice device, uint swapchainCount, VkSwapchainCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, VkSwapchainKHR* pSwapchains)
    {
        return __vkCreateSharedSwapchainsKHR(device, swapchainCount, pCreateInfos, pAllocator, pSwapchains);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkRenderingInfo*, void> __vkCmdBeginRenderingKHR;
    internal static void vkCmdBeginRenderingKHR(VkCommandBuffer commandBuffer, VkRenderingInfo* pRenderingInfo)
    {
        __vkCmdBeginRenderingKHR(commandBuffer, pRenderingInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, void> __vkCmdEndRenderingKHR;
    internal static void vkCmdEndRenderingKHR(VkCommandBuffer commandBuffer)
    {
        __vkCmdEndRenderingKHR(commandBuffer);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceFeatures2*, void> __vkGetPhysicalDeviceFeatures2KHR;
    internal static void vkGetPhysicalDeviceFeatures2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceFeatures2* pFeatures)
    {
        __vkGetPhysicalDeviceFeatures2KHR(physicalDevice, pFeatures);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceProperties2*, void> __vkGetPhysicalDeviceProperties2KHR;
    internal static void vkGetPhysicalDeviceProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceProperties2* pProperties)
    {
        __vkGetPhysicalDeviceProperties2KHR(physicalDevice, pProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkFormat, VkFormatProperties2*, void> __vkGetPhysicalDeviceFormatProperties2KHR;
    internal static void vkGetPhysicalDeviceFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkFormat format, VkFormatProperties2* pFormatProperties)
    {
        __vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice, format, pFormatProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult> __vkGetPhysicalDeviceImageFormatProperties2KHR;
    internal static VkResult vkGetPhysicalDeviceImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceImageFormatInfo2* pImageFormatInfo, VkImageFormatProperties2* pImageFormatProperties)
    {
        return __vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice, pImageFormatInfo, pImageFormatProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties2*, void> __vkGetPhysicalDeviceQueueFamilyProperties2KHR;
    internal static void vkGetPhysicalDeviceQueueFamilyProperties2KHR(VkPhysicalDevice physicalDevice, uint* pQueueFamilyPropertyCount, VkQueueFamilyProperties2* pQueueFamilyProperties)
    {
        __vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice, pQueueFamilyPropertyCount, pQueueFamilyProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceMemoryProperties2*, void> __vkGetPhysicalDeviceMemoryProperties2KHR;
    internal static void vkGetPhysicalDeviceMemoryProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceMemoryProperties2* pMemoryProperties)
    {
        __vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice, pMemoryProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void> __vkGetPhysicalDeviceSparseImageFormatProperties2KHR;
    internal static void vkGetPhysicalDeviceSparseImageFormatProperties2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSparseImageFormatInfo2* pFormatInfo, uint* pPropertyCount, VkSparseImageFormatProperties2* pProperties)
    {
        __vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice, pFormatInfo, pPropertyCount, pProperties);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, uint, uint, VkPeerMemoryFeatureFlags*, void> __vkGetDeviceGroupPeerMemoryFeaturesKHR;
    internal static void vkGetDeviceGroupPeerMemoryFeaturesKHR(VkDevice device, uint heapIndex, uint localDeviceIndex, uint remoteDeviceIndex, VkPeerMemoryFeatureFlags* pPeerMemoryFeatures)
    {
        __vkGetDeviceGroupPeerMemoryFeaturesKHR(device, heapIndex, localDeviceIndex, remoteDeviceIndex, pPeerMemoryFeatures);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, void> __vkCmdSetDeviceMaskKHR;
    internal static void vkCmdSetDeviceMaskKHR(VkCommandBuffer commandBuffer, uint deviceMask)
    {
        __vkCmdSetDeviceMaskKHR(commandBuffer, deviceMask);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, uint, uint, uint, uint, void> __vkCmdDispatchBaseKHR;
    internal static void vkCmdDispatchBaseKHR(VkCommandBuffer commandBuffer, uint baseGroupX, uint baseGroupY, uint baseGroupZ, uint groupCountX, uint groupCountY, uint groupCountZ)
    {
        __vkCmdDispatchBaseKHR(commandBuffer, baseGroupX, baseGroupY, baseGroupZ, groupCountX, groupCountY, groupCountZ);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkCommandPool, VkCommandPoolTrimFlags, void> __vkTrimCommandPoolKHR;
    internal static void vkTrimCommandPoolKHR(VkDevice device, VkCommandPool commandPool, VkCommandPoolTrimFlags flags)
    {
        __vkTrimCommandPoolKHR(device, commandPool, flags);
    }

    private static unsafe delegate* unmanaged<VkInstance, uint*, VkPhysicalDeviceGroupProperties*, VkResult> __vkEnumeratePhysicalDeviceGroupsKHR;
    internal static VkResult vkEnumeratePhysicalDeviceGroupsKHR(VkInstance instance, uint* pPhysicalDeviceGroupCount, VkPhysicalDeviceGroupProperties* pPhysicalDeviceGroupProperties)
    {
        return __vkEnumeratePhysicalDeviceGroupsKHR(instance, pPhysicalDeviceGroupCount, pPhysicalDeviceGroupProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void> __vkGetPhysicalDeviceExternalBufferPropertiesKHR;
    internal static void vkGetPhysicalDeviceExternalBufferPropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalBufferInfo* pExternalBufferInfo, VkExternalBufferProperties* pExternalBufferProperties)
    {
        __vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice, pExternalBufferInfo, pExternalBufferProperties);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkMemoryGetFdInfoKHR*, int*, VkResult> __vkGetMemoryFdKHR;
    internal static VkResult vkGetMemoryFdKHR(VkDevice device, VkMemoryGetFdInfoKHR* pGetFdInfo, int* pFd)
    {
        return __vkGetMemoryFdKHR(device, pGetFdInfo, pFd);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkExternalMemoryHandleTypeFlagBits, int, VkMemoryFdPropertiesKHR*, VkResult> __vkGetMemoryFdPropertiesKHR;
    internal static VkResult vkGetMemoryFdPropertiesKHR(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, int fd, VkMemoryFdPropertiesKHR* pMemoryFdProperties)
    {
        return __vkGetMemoryFdPropertiesKHR(device, handleType, fd, pMemoryFdProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void> __vkGetPhysicalDeviceExternalSemaphorePropertiesKHR;
    internal static void vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalSemaphoreInfo* pExternalSemaphoreInfo, VkExternalSemaphoreProperties* pExternalSemaphoreProperties)
    {
        __vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice, pExternalSemaphoreInfo, pExternalSemaphoreProperties);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImportSemaphoreFdInfoKHR*, VkResult> __vkImportSemaphoreFdKHR;
    internal static VkResult vkImportSemaphoreFdKHR(VkDevice device, VkImportSemaphoreFdInfoKHR* pImportSemaphoreFdInfo)
    {
        return __vkImportSemaphoreFdKHR(device, pImportSemaphoreFdInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSemaphoreGetFdInfoKHR*, int*, VkResult> __vkGetSemaphoreFdKHR;
    internal static VkResult vkGetSemaphoreFdKHR(VkDevice device, VkSemaphoreGetFdInfoKHR* pGetFdInfo, int* pFd)
    {
        return __vkGetSemaphoreFdKHR(device, pGetFdInfo, pFd);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkWriteDescriptorSet*, void> __vkCmdPushDescriptorSetKHR;
    internal static void vkCmdPushDescriptorSetKHR(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipelineLayout layout, uint set, uint descriptorWriteCount, VkWriteDescriptorSet* pDescriptorWrites)
    {
        __vkCmdPushDescriptorSetKHR(commandBuffer, pipelineBindPoint, layout, set, descriptorWriteCount, pDescriptorWrites);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint, void*, void> __vkCmdPushDescriptorSetWithTemplateKHR;
    internal static void vkCmdPushDescriptorSetWithTemplateKHR(VkCommandBuffer commandBuffer, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkPipelineLayout layout, uint set, void* pData)
    {
        __vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer, descriptorUpdateTemplate, layout, set, pData);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult> __vkCreateDescriptorUpdateTemplateKHR;
    internal static VkResult vkCreateDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplateCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDescriptorUpdateTemplate* pDescriptorUpdateTemplate)
    {
        return __vkCreateDescriptorUpdateTemplateKHR(device, pCreateInfo, pAllocator, pDescriptorUpdateTemplate);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplate, VkAllocationCallbacks*, void> __vkDestroyDescriptorUpdateTemplateKHR;
    internal static void vkDestroyDescriptorUpdateTemplateKHR(VkDevice device, VkDescriptorUpdateTemplate descriptorUpdateTemplate, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyDescriptorUpdateTemplateKHR(device, descriptorUpdateTemplate, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, void*, void> __vkUpdateDescriptorSetWithTemplateKHR;
    internal static void vkUpdateDescriptorSetWithTemplateKHR(VkDevice device, VkDescriptorSet descriptorSet, VkDescriptorUpdateTemplate descriptorUpdateTemplate, void* pData)
    {
        __vkUpdateDescriptorSetWithTemplateKHR(device, descriptorSet, descriptorUpdateTemplate, pData);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult> __vkCreateRenderPass2KHR;
    internal static VkResult vkCreateRenderPass2KHR(VkDevice device, VkRenderPassCreateInfo2* pCreateInfo, VkAllocationCallbacks* pAllocator, VkRenderPass* pRenderPass)
    {
        return __vkCreateRenderPass2KHR(device, pCreateInfo, pAllocator, pRenderPass);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void> __vkCmdBeginRenderPass2KHR;
    internal static void vkCmdBeginRenderPass2KHR(VkCommandBuffer commandBuffer, VkRenderPassBeginInfo* pRenderPassBegin, VkSubpassBeginInfo* pSubpassBeginInfo)
    {
        __vkCmdBeginRenderPass2KHR(commandBuffer, pRenderPassBegin, pSubpassBeginInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkSubpassBeginInfo*, VkSubpassEndInfo*, void> __vkCmdNextSubpass2KHR;
    internal static void vkCmdNextSubpass2KHR(VkCommandBuffer commandBuffer, VkSubpassBeginInfo* pSubpassBeginInfo, VkSubpassEndInfo* pSubpassEndInfo)
    {
        __vkCmdNextSubpass2KHR(commandBuffer, pSubpassBeginInfo, pSubpassEndInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkSubpassEndInfo*, void> __vkCmdEndRenderPass2KHR;
    internal static void vkCmdEndRenderPass2KHR(VkCommandBuffer commandBuffer, VkSubpassEndInfo* pSubpassEndInfo)
    {
        __vkCmdEndRenderPass2KHR(commandBuffer, pSubpassEndInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSwapchainKHR, VkResult> __vkGetSwapchainStatusKHR;
    internal static VkResult vkGetSwapchainStatusKHR(VkDevice device, VkSwapchainKHR swapchain)
    {
        return __vkGetSwapchainStatusKHR(device, swapchain);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void> __vkGetPhysicalDeviceExternalFencePropertiesKHR;
    internal static void vkGetPhysicalDeviceExternalFencePropertiesKHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceExternalFenceInfo* pExternalFenceInfo, VkExternalFenceProperties* pExternalFenceProperties)
    {
        __vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice, pExternalFenceInfo, pExternalFenceProperties);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImportFenceFdInfoKHR*, VkResult> __vkImportFenceFdKHR;
    internal static VkResult vkImportFenceFdKHR(VkDevice device, VkImportFenceFdInfoKHR* pImportFenceFdInfo)
    {
        return __vkImportFenceFdKHR(device, pImportFenceFdInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkFenceGetFdInfoKHR*, int*, VkResult> __vkGetFenceFdKHR;
    internal static VkResult vkGetFenceFdKHR(VkDevice device, VkFenceGetFdInfoKHR* pGetFdInfo, int* pFd)
    {
        return __vkGetFenceFdKHR(device, pGetFdInfo, pFd);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint, uint*, VkPerformanceCounterKHR*, VkPerformanceCounterDescriptionKHR*, VkResult> __vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR;
    internal static VkResult vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(VkPhysicalDevice physicalDevice, uint queueFamilyIndex, uint* pCounterCount, VkPerformanceCounterKHR* pCounters, VkPerformanceCounterDescriptionKHR* pCounterDescriptions)
    {
        return __vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice, queueFamilyIndex, pCounterCount, pCounters, pCounterDescriptions);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkQueryPoolPerformanceCreateInfoKHR*, uint*, void> __vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR;
    internal static void vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(VkPhysicalDevice physicalDevice, VkQueryPoolPerformanceCreateInfoKHR* pPerformanceQueryCreateInfo, uint* pNumPasses)
    {
        __vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice, pPerformanceQueryCreateInfo, pNumPasses);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkAcquireProfilingLockInfoKHR*, VkResult> __vkAcquireProfilingLockKHR;
    internal static VkResult vkAcquireProfilingLockKHR(VkDevice device, VkAcquireProfilingLockInfoKHR* pInfo)
    {
        return __vkAcquireProfilingLockKHR(device, pInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, void> __vkReleaseProfilingLockKHR;
    internal static void vkReleaseProfilingLockKHR(VkDevice device)
    {
        __vkReleaseProfilingLockKHR(device);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, VkSurfaceCapabilities2KHR*, VkResult> __vkGetPhysicalDeviceSurfaceCapabilities2KHR;
    internal static VkResult vkGetPhysicalDeviceSurfaceCapabilities2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, VkSurfaceCapabilities2KHR* pSurfaceCapabilities)
    {
        return __vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice, pSurfaceInfo, pSurfaceCapabilities);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkSurfaceFormat2KHR*, VkResult> __vkGetPhysicalDeviceSurfaceFormats2KHR;
    internal static VkResult vkGetPhysicalDeviceSurfaceFormats2KHR(VkPhysicalDevice physicalDevice, VkPhysicalDeviceSurfaceInfo2KHR* pSurfaceInfo, uint* pSurfaceFormatCount, VkSurfaceFormat2KHR* pSurfaceFormats)
    {
        return __vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice, pSurfaceInfo, pSurfaceFormatCount, pSurfaceFormats);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayProperties2KHR*, VkResult> __vkGetPhysicalDeviceDisplayProperties2KHR;
    internal static VkResult vkGetPhysicalDeviceDisplayProperties2KHR(VkPhysicalDevice physicalDevice, uint* pPropertyCount, VkDisplayProperties2KHR* pProperties)
    {
        return __vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice, pPropertyCount, pProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayPlaneProperties2KHR*, VkResult> __vkGetPhysicalDeviceDisplayPlaneProperties2KHR;
    internal static VkResult vkGetPhysicalDeviceDisplayPlaneProperties2KHR(VkPhysicalDevice physicalDevice, uint* pPropertyCount, VkDisplayPlaneProperties2KHR* pProperties)
    {
        return __vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice, pPropertyCount, pProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, uint*, VkDisplayModeProperties2KHR*, VkResult> __vkGetDisplayModeProperties2KHR;
    internal static VkResult vkGetDisplayModeProperties2KHR(VkPhysicalDevice physicalDevice, VkDisplayKHR display, uint* pPropertyCount, VkDisplayModeProperties2KHR* pProperties)
    {
        return __vkGetDisplayModeProperties2KHR(physicalDevice, display, pPropertyCount, pProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkDisplayPlaneInfo2KHR*, VkDisplayPlaneCapabilities2KHR*, VkResult> __vkGetDisplayPlaneCapabilities2KHR;
    internal static VkResult vkGetDisplayPlaneCapabilities2KHR(VkPhysicalDevice physicalDevice, VkDisplayPlaneInfo2KHR* pDisplayPlaneInfo, VkDisplayPlaneCapabilities2KHR* pCapabilities)
    {
        return __vkGetDisplayPlaneCapabilities2KHR(physicalDevice, pDisplayPlaneInfo, pCapabilities);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*, void> __vkGetImageMemoryRequirements2KHR;
    internal static void vkGetImageMemoryRequirements2KHR(VkDevice device, VkImageMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
    {
        __vkGetImageMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*, void> __vkGetBufferMemoryRequirements2KHR;
    internal static void vkGetBufferMemoryRequirements2KHR(VkDevice device, VkBufferMemoryRequirementsInfo2* pInfo, VkMemoryRequirements2* pMemoryRequirements)
    {
        __vkGetBufferMemoryRequirements2KHR(device, pInfo, pMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2*, void> __vkGetImageSparseMemoryRequirements2KHR;
    internal static void vkGetImageSparseMemoryRequirements2KHR(VkDevice device, VkImageSparseMemoryRequirementsInfo2* pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
    {
        __vkGetImageSparseMemoryRequirements2KHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult> __vkCreateSamplerYcbcrConversionKHR;
    internal static VkResult vkCreateSamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversionCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSamplerYcbcrConversion* pYcbcrConversion)
    {
        return __vkCreateSamplerYcbcrConversionKHR(device, pCreateInfo, pAllocator, pYcbcrConversion);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSamplerYcbcrConversion, VkAllocationCallbacks*, void> __vkDestroySamplerYcbcrConversionKHR;
    internal static void vkDestroySamplerYcbcrConversionKHR(VkDevice device, VkSamplerYcbcrConversion ycbcrConversion, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroySamplerYcbcrConversionKHR(device, ycbcrConversion, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, VkBindBufferMemoryInfo*, VkResult> __vkBindBufferMemory2KHR;
    internal static VkResult vkBindBufferMemory2KHR(VkDevice device, uint bindInfoCount, VkBindBufferMemoryInfo* pBindInfos)
    {
        return __vkBindBufferMemory2KHR(device, bindInfoCount, pBindInfos);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, VkBindImageMemoryInfo*, VkResult> __vkBindImageMemory2KHR;
    internal static VkResult vkBindImageMemory2KHR(VkDevice device, uint bindInfoCount, VkBindImageMemoryInfo* pBindInfos)
    {
        return __vkBindImageMemory2KHR(device, bindInfoCount, pBindInfos);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkDescriptorSetLayoutSupport*, void> __vkGetDescriptorSetLayoutSupportKHR;
    internal static void vkGetDescriptorSetLayoutSupportKHR(VkDevice device, VkDescriptorSetLayoutCreateInfo* pCreateInfo, VkDescriptorSetLayoutSupport* pSupport)
    {
        __vkGetDescriptorSetLayoutSupportKHR(device, pCreateInfo, pSupport);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> __vkCmdDrawIndirectCountKHR;
    internal static void vkCmdDrawIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
    {
        __vkCmdDrawIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> __vkCmdDrawIndexedIndirectCountKHR;
    internal static void vkCmdDrawIndexedIndirectCountKHR(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
    {
        __vkCmdDrawIndexedIndirectCountKHR(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSemaphore, ulong*, VkResult> __vkGetSemaphoreCounterValueKHR;
    internal static VkResult vkGetSemaphoreCounterValueKHR(VkDevice device, VkSemaphore semaphore, ulong* pValue)
    {
        return __vkGetSemaphoreCounterValueKHR(device, semaphore, pValue);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSemaphoreWaitInfo*, ulong, VkResult> __vkWaitSemaphoresKHR;
    internal static VkResult vkWaitSemaphoresKHR(VkDevice device, VkSemaphoreWaitInfo* pWaitInfo, ulong timeout)
    {
        return __vkWaitSemaphoresKHR(device, pWaitInfo, timeout);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSemaphoreSignalInfo*, VkResult> __vkSignalSemaphoreKHR;
    internal static VkResult vkSignalSemaphoreKHR(VkDevice device, VkSemaphoreSignalInfo* pSignalInfo)
    {
        return __vkSignalSemaphoreKHR(device, pSignalInfo);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint*, VkPhysicalDeviceFragmentShadingRateKHR*, VkResult> __vkGetPhysicalDeviceFragmentShadingRatesKHR;
    internal static VkResult vkGetPhysicalDeviceFragmentShadingRatesKHR(VkPhysicalDevice physicalDevice, uint* pFragmentShadingRateCount, VkPhysicalDeviceFragmentShadingRateKHR* pFragmentShadingRates)
    {
        return __vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice, pFragmentShadingRateCount, pFragmentShadingRates);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkExtent2D*, VkFragmentShadingRateCombinerOpKHR*, void> __vkCmdSetFragmentShadingRateKHR;
    internal static void vkCmdSetFragmentShadingRateKHR(VkCommandBuffer commandBuffer, VkExtent2D* pFragmentSize, VkFragmentShadingRateCombinerOpKHR* combinerOps)
    {
        __vkCmdSetFragmentShadingRateKHR(commandBuffer, pFragmentSize, combinerOps);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSwapchainKHR, ulong, ulong, VkResult> __vkWaitForPresentKHR;
    internal static VkResult vkWaitForPresentKHR(VkDevice device, VkSwapchainKHR swapchain, ulong presentId, ulong timeout)
    {
        return __vkWaitForPresentKHR(device, swapchain, presentId, timeout);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, VkDeviceAddress> __vkGetBufferDeviceAddressKHR;
    internal static VkDeviceAddress vkGetBufferDeviceAddressKHR(VkDevice device, VkBufferDeviceAddressInfo* pInfo)
    {
        return __vkGetBufferDeviceAddressKHR(device, pInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, ulong> __vkGetBufferOpaqueCaptureAddressKHR;
    internal static ulong vkGetBufferOpaqueCaptureAddressKHR(VkDevice device, VkBufferDeviceAddressInfo* pInfo)
    {
        return __vkGetBufferOpaqueCaptureAddressKHR(device, pInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong> __vkGetDeviceMemoryOpaqueCaptureAddressKHR;
    internal static ulong vkGetDeviceMemoryOpaqueCaptureAddressKHR(VkDevice device, VkDeviceMemoryOpaqueCaptureAddressInfo* pInfo)
    {
        return __vkGetDeviceMemoryOpaqueCaptureAddressKHR(device, pInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkAllocationCallbacks*, VkDeferredOperationKHR*, VkResult> __vkCreateDeferredOperationKHR;
    internal static VkResult vkCreateDeferredOperationKHR(VkDevice device, VkAllocationCallbacks* pAllocator, VkDeferredOperationKHR* pDeferredOperation)
    {
        return __vkCreateDeferredOperationKHR(device, pAllocator, pDeferredOperation);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkAllocationCallbacks*, void> __vkDestroyDeferredOperationKHR;
    internal static void vkDestroyDeferredOperationKHR(VkDevice device, VkDeferredOperationKHR operation, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyDeferredOperationKHR(device, operation, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeferredOperationKHR, uint> __vkGetDeferredOperationMaxConcurrencyKHR;
    internal static uint vkGetDeferredOperationMaxConcurrencyKHR(VkDevice device, VkDeferredOperationKHR operation)
    {
        return __vkGetDeferredOperationMaxConcurrencyKHR(device, operation);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkResult> __vkGetDeferredOperationResultKHR;
    internal static VkResult vkGetDeferredOperationResultKHR(VkDevice device, VkDeferredOperationKHR operation)
    {
        return __vkGetDeferredOperationResultKHR(device, operation);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkResult> __vkDeferredOperationJoinKHR;
    internal static VkResult vkDeferredOperationJoinKHR(VkDevice device, VkDeferredOperationKHR operation)
    {
        return __vkDeferredOperationJoinKHR(device, operation);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipelineInfoKHR*, uint*, VkPipelineExecutablePropertiesKHR*, VkResult> __vkGetPipelineExecutablePropertiesKHR;
    internal static VkResult vkGetPipelineExecutablePropertiesKHR(VkDevice device, VkPipelineInfoKHR* pPipelineInfo, uint* pExecutableCount, VkPipelineExecutablePropertiesKHR* pProperties)
    {
        return __vkGetPipelineExecutablePropertiesKHR(device, pPipelineInfo, pExecutableCount, pProperties);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableStatisticKHR*, VkResult> __vkGetPipelineExecutableStatisticsKHR;
    internal static VkResult vkGetPipelineExecutableStatisticsKHR(VkDevice device, VkPipelineExecutableInfoKHR* pExecutableInfo, uint* pStatisticCount, VkPipelineExecutableStatisticKHR* pStatistics)
    {
        return __vkGetPipelineExecutableStatisticsKHR(device, pExecutableInfo, pStatisticCount, pStatistics);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableInternalRepresentationKHR*, VkResult> __vkGetPipelineExecutableInternalRepresentationsKHR;
    internal static VkResult vkGetPipelineExecutableInternalRepresentationsKHR(VkDevice device, VkPipelineExecutableInfoKHR* pExecutableInfo, uint* pInternalRepresentationCount, VkPipelineExecutableInternalRepresentationKHR* pInternalRepresentations)
    {
        return __vkGetPipelineExecutableInternalRepresentationsKHR(device, pExecutableInfo, pInternalRepresentationCount, pInternalRepresentations);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkEvent, VkDependencyInfo*, void> __vkCmdSetEvent2KHR;
    internal static void vkCmdSetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent @event, VkDependencyInfo* pDependencyInfo)
    {
        __vkCmdSetEvent2KHR(commandBuffer, @event, pDependencyInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkEvent, VkPipelineStageFlags2, void> __vkCmdResetEvent2KHR;
    internal static void vkCmdResetEvent2KHR(VkCommandBuffer commandBuffer, VkEvent @event, VkPipelineStageFlags2 stageMask)
    {
        __vkCmdResetEvent2KHR(commandBuffer, @event, stageMask);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkEvent*, VkDependencyInfo*, void> __vkCmdWaitEvents2KHR;
    internal static void vkCmdWaitEvents2KHR(VkCommandBuffer commandBuffer, uint eventCount, VkEvent* pEvents, VkDependencyInfo* pDependencyInfos)
    {
        __vkCmdWaitEvents2KHR(commandBuffer, eventCount, pEvents, pDependencyInfos);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkDependencyInfo*, void> __vkCmdPipelineBarrier2KHR;
    internal static void vkCmdPipelineBarrier2KHR(VkCommandBuffer commandBuffer, VkDependencyInfo* pDependencyInfo)
    {
        __vkCmdPipelineBarrier2KHR(commandBuffer, pDependencyInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint, void> __vkCmdWriteTimestamp2KHR;
    internal static void vkCmdWriteTimestamp2KHR(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkQueryPool queryPool, uint query)
    {
        __vkCmdWriteTimestamp2KHR(commandBuffer, stage, queryPool, query);
    }

    private static unsafe delegate* unmanaged<VkQueue, uint, VkSubmitInfo2*, VkFence, VkResult> __vkQueueSubmit2KHR;
    internal static VkResult vkQueueSubmit2KHR(VkQueue queue, uint submitCount, VkSubmitInfo2* pSubmits, VkFence fence)
    {
        return __vkQueueSubmit2KHR(queue, submitCount, pSubmits, fence);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags2, VkBuffer, VkDeviceSize, uint, void> __vkCmdWriteBufferMarker2AMD;
    internal static void vkCmdWriteBufferMarker2AMD(VkCommandBuffer commandBuffer, VkPipelineStageFlags2 stage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint marker)
    {
        __vkCmdWriteBufferMarker2AMD(commandBuffer, stage, dstBuffer, dstOffset, marker);
    }

    private static unsafe delegate* unmanaged<VkQueue, uint*, VkCheckpointData2NV*, void> __vkGetQueueCheckpointData2NV;
    internal static void vkGetQueueCheckpointData2NV(VkQueue queue, uint* pCheckpointDataCount, VkCheckpointData2NV* pCheckpointData)
    {
        __vkGetQueueCheckpointData2NV(queue, pCheckpointDataCount, pCheckpointData);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCopyBufferInfo2*, void> __vkCmdCopyBuffer2KHR;
    internal static void vkCmdCopyBuffer2KHR(VkCommandBuffer commandBuffer, VkCopyBufferInfo2* pCopyBufferInfo)
    {
        __vkCmdCopyBuffer2KHR(commandBuffer, pCopyBufferInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCopyImageInfo2*, void> __vkCmdCopyImage2KHR;
    internal static void vkCmdCopyImage2KHR(VkCommandBuffer commandBuffer, VkCopyImageInfo2* pCopyImageInfo)
    {
        __vkCmdCopyImage2KHR(commandBuffer, pCopyImageInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCopyBufferToImageInfo2*, void> __vkCmdCopyBufferToImage2KHR;
    internal static void vkCmdCopyBufferToImage2KHR(VkCommandBuffer commandBuffer, VkCopyBufferToImageInfo2* pCopyBufferToImageInfo)
    {
        __vkCmdCopyBufferToImage2KHR(commandBuffer, pCopyBufferToImageInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCopyImageToBufferInfo2*, void> __vkCmdCopyImageToBuffer2KHR;
    internal static void vkCmdCopyImageToBuffer2KHR(VkCommandBuffer commandBuffer, VkCopyImageToBufferInfo2* pCopyImageToBufferInfo)
    {
        __vkCmdCopyImageToBuffer2KHR(commandBuffer, pCopyImageToBufferInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBlitImageInfo2*, void> __vkCmdBlitImage2KHR;
    internal static void vkCmdBlitImage2KHR(VkCommandBuffer commandBuffer, VkBlitImageInfo2* pBlitImageInfo)
    {
        __vkCmdBlitImage2KHR(commandBuffer, pBlitImageInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkResolveImageInfo2*, void> __vkCmdResolveImage2KHR;
    internal static void vkCmdResolveImage2KHR(VkCommandBuffer commandBuffer, VkResolveImageInfo2* pResolveImageInfo)
    {
        __vkCmdResolveImage2KHR(commandBuffer, pResolveImageInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeviceBufferMemoryRequirements*, VkMemoryRequirements2*, void> __vkGetDeviceBufferMemoryRequirementsKHR;
    internal static void vkGetDeviceBufferMemoryRequirementsKHR(VkDevice device, VkDeviceBufferMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)
    {
        __vkGetDeviceBufferMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeviceImageMemoryRequirements*, VkMemoryRequirements2*, void> __vkGetDeviceImageMemoryRequirementsKHR;
    internal static void vkGetDeviceImageMemoryRequirementsKHR(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, VkMemoryRequirements2* pMemoryRequirements)
    {
        __vkGetDeviceImageMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeviceImageMemoryRequirements*, uint*, VkSparseImageMemoryRequirements2*, void> __vkGetDeviceImageSparseMemoryRequirementsKHR;
    internal static void vkGetDeviceImageSparseMemoryRequirementsKHR(VkDevice device, VkDeviceImageMemoryRequirements* pInfo, uint* pSparseMemoryRequirementCount, VkSparseImageMemoryRequirements2* pSparseMemoryRequirements)
    {
        __vkGetDeviceImageSparseMemoryRequirementsKHR(device, pInfo, pSparseMemoryRequirementCount, pSparseMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkInstance, VkDebugReportCallbackCreateInfoEXT*, VkAllocationCallbacks*, VkDebugReportCallbackEXT*, VkResult> __vkCreateDebugReportCallbackEXT;
    internal static VkResult vkCreateDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDebugReportCallbackEXT* pCallback)
    {
        return __vkCreateDebugReportCallbackEXT(instance, pCreateInfo, pAllocator, pCallback);
    }

    private static unsafe delegate* unmanaged<VkInstance, VkDebugReportCallbackEXT, VkAllocationCallbacks*, void> __vkDestroyDebugReportCallbackEXT;
    internal static void vkDestroyDebugReportCallbackEXT(VkInstance instance, VkDebugReportCallbackEXT callback, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyDebugReportCallbackEXT(instance, callback, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, uint, int, byte*, byte*, void> __vkDebugReportMessageEXT;
    internal static void vkDebugReportMessageEXT(VkInstance instance, VkDebugReportFlagsEXT flags, VkDebugReportObjectTypeEXT objectType, ulong @object, uint location, int messageCode, byte* pLayerPrefix, byte* pMessage)
    {
        __vkDebugReportMessageEXT(instance, flags, objectType, @object, location, messageCode, pLayerPrefix, pMessage);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDebugMarkerObjectTagInfoEXT*, VkResult> __vkDebugMarkerSetObjectTagEXT;
    internal static VkResult vkDebugMarkerSetObjectTagEXT(VkDevice device, VkDebugMarkerObjectTagInfoEXT* pTagInfo)
    {
        return __vkDebugMarkerSetObjectTagEXT(device, pTagInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDebugMarkerObjectNameInfoEXT*, VkResult> __vkDebugMarkerSetObjectNameEXT;
    internal static VkResult vkDebugMarkerSetObjectNameEXT(VkDevice device, VkDebugMarkerObjectNameInfoEXT* pNameInfo)
    {
        return __vkDebugMarkerSetObjectNameEXT(device, pNameInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*, void> __vkCmdDebugMarkerBeginEXT;
    internal static void vkCmdDebugMarkerBeginEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
    {
        __vkCmdDebugMarkerBeginEXT(commandBuffer, pMarkerInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, void> __vkCmdDebugMarkerEndEXT;
    internal static void vkCmdDebugMarkerEndEXT(VkCommandBuffer commandBuffer)
    {
        __vkCmdDebugMarkerEndEXT(commandBuffer);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*, void> __vkCmdDebugMarkerInsertEXT;
    internal static void vkCmdDebugMarkerInsertEXT(VkCommandBuffer commandBuffer, VkDebugMarkerMarkerInfoEXT* pMarkerInfo)
    {
        __vkCmdDebugMarkerInsertEXT(commandBuffer, pMarkerInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, void> __vkCmdBindTransformFeedbackBuffersEXT;
    internal static void vkCmdBindTransformFeedbackBuffersEXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes)
    {
        __vkCmdBindTransformFeedbackBuffersEXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, void> __vkCmdBeginTransformFeedbackEXT;
    internal static void vkCmdBeginTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer* pCounterBuffers, VkDeviceSize* pCounterBufferOffsets)
    {
        __vkCmdBeginTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, void> __vkCmdEndTransformFeedbackEXT;
    internal static void vkCmdEndTransformFeedbackEXT(VkCommandBuffer commandBuffer, uint firstCounterBuffer, uint counterBufferCount, VkBuffer* pCounterBuffers, VkDeviceSize* pCounterBufferOffsets)
    {
        __vkCmdEndTransformFeedbackEXT(commandBuffer, firstCounterBuffer, counterBufferCount, pCounterBuffers, pCounterBufferOffsets);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, VkQueryControlFlags, uint, void> __vkCmdBeginQueryIndexedEXT;
    internal static void vkCmdBeginQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, VkQueryControlFlags flags, uint index)
    {
        __vkCmdBeginQueryIndexedEXT(commandBuffer, queryPool, query, flags, index);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, uint, void> __vkCmdEndQueryIndexedEXT;
    internal static void vkCmdEndQueryIndexedEXT(VkCommandBuffer commandBuffer, VkQueryPool queryPool, uint query, uint index)
    {
        __vkCmdEndQueryIndexedEXT(commandBuffer, queryPool, query, index);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer, VkDeviceSize, uint, uint, void> __vkCmdDrawIndirectByteCountEXT;
    internal static void vkCmdDrawIndirectByteCountEXT(VkCommandBuffer commandBuffer, uint instanceCount, uint firstInstance, VkBuffer counterBuffer, VkDeviceSize counterBufferOffset, uint counterOffset, uint vertexStride)
    {
        __vkCmdDrawIndirectByteCountEXT(commandBuffer, instanceCount, firstInstance, counterBuffer, counterBufferOffset, counterOffset, vertexStride);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkCuModuleCreateInfoNVX*, VkAllocationCallbacks*, VkCuModuleNVX*, VkResult> __vkCreateCuModuleNVX;
    internal static VkResult vkCreateCuModuleNVX(VkDevice device, VkCuModuleCreateInfoNVX* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCuModuleNVX* pModule)
    {
        return __vkCreateCuModuleNVX(device, pCreateInfo, pAllocator, pModule);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkCuFunctionCreateInfoNVX*, VkAllocationCallbacks*, VkCuFunctionNVX*, VkResult> __vkCreateCuFunctionNVX;
    internal static VkResult vkCreateCuFunctionNVX(VkDevice device, VkCuFunctionCreateInfoNVX* pCreateInfo, VkAllocationCallbacks* pAllocator, VkCuFunctionNVX* pFunction)
    {
        return __vkCreateCuFunctionNVX(device, pCreateInfo, pAllocator, pFunction);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkCuModuleNVX, VkAllocationCallbacks*, void> __vkDestroyCuModuleNVX;
    internal static void vkDestroyCuModuleNVX(VkDevice device, VkCuModuleNVX module, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyCuModuleNVX(device, module, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkCuFunctionNVX, VkAllocationCallbacks*, void> __vkDestroyCuFunctionNVX;
    internal static void vkDestroyCuFunctionNVX(VkDevice device, VkCuFunctionNVX function, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyCuFunctionNVX(device, function, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCuLaunchInfoNVX*, void> __vkCmdCuLaunchKernelNVX;
    internal static void vkCmdCuLaunchKernelNVX(VkCommandBuffer commandBuffer, VkCuLaunchInfoNVX* pLaunchInfo)
    {
        __vkCmdCuLaunchKernelNVX(commandBuffer, pLaunchInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImageViewHandleInfoNVX*, uint> __vkGetImageViewHandleNVX;
    internal static uint vkGetImageViewHandleNVX(VkDevice device, VkImageViewHandleInfoNVX* pInfo)
    {
        return __vkGetImageViewHandleNVX(device, pInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImageView, VkImageViewAddressPropertiesNVX*, VkResult> __vkGetImageViewAddressNVX;
    internal static VkResult vkGetImageViewAddressNVX(VkDevice device, VkImageView imageView, VkImageViewAddressPropertiesNVX* pProperties)
    {
        return __vkGetImageViewAddressNVX(device, imageView, pProperties);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> __vkCmdDrawIndirectCountAMD;
    internal static void vkCmdDrawIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
    {
        __vkCmdDrawIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> __vkCmdDrawIndexedIndirectCountAMD;
    internal static void vkCmdDrawIndexedIndirectCountAMD(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
    {
        __vkCmdDrawIndexedIndirectCountAMD(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipeline, VkShaderStageFlagBits, VkShaderInfoTypeAMD, uint*, void*, VkResult> __vkGetShaderInfoAMD;
    internal static VkResult vkGetShaderInfoAMD(VkDevice device, VkPipeline pipeline, VkShaderStageFlagBits shaderStage, VkShaderInfoTypeAMD infoType, uint* pInfoSize, void* pInfo)
    {
        return __vkGetShaderInfoAMD(device, pipeline, shaderStage, infoType, pInfoSize, pInfo);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, VkExternalImageFormatPropertiesNV*, VkResult> __vkGetPhysicalDeviceExternalImageFormatPropertiesNV;
    internal static VkResult vkGetPhysicalDeviceExternalImageFormatPropertiesNV(VkPhysicalDevice physicalDevice, VkFormat format, VkImageType type, VkImageTiling tiling, VkImageUsageFlags usage, VkImageCreateFlags flags, VkExternalMemoryHandleTypeFlagsNV externalHandleType, VkExternalImageFormatPropertiesNV* pExternalImageFormatProperties)
    {
        return __vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice, format, type, tiling, usage, flags, externalHandleType, pExternalImageFormatProperties);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkConditionalRenderingBeginInfoEXT*, void> __vkCmdBeginConditionalRenderingEXT;
    internal static void vkCmdBeginConditionalRenderingEXT(VkCommandBuffer commandBuffer, VkConditionalRenderingBeginInfoEXT* pConditionalRenderingBegin)
    {
        __vkCmdBeginConditionalRenderingEXT(commandBuffer, pConditionalRenderingBegin);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, void> __vkCmdEndConditionalRenderingEXT;
    internal static void vkCmdEndConditionalRenderingEXT(VkCommandBuffer commandBuffer)
    {
        __vkCmdEndConditionalRenderingEXT(commandBuffer);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, VkViewportWScalingNV*, void> __vkCmdSetViewportWScalingNV;
    internal static void vkCmdSetViewportWScalingNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkViewportWScalingNV* pViewportWScalings)
    {
        __vkCmdSetViewportWScalingNV(commandBuffer, firstViewport, viewportCount, pViewportWScalings);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, VkResult> __vkReleaseDisplayEXT;
    internal static VkResult vkReleaseDisplayEXT(VkPhysicalDevice physicalDevice, VkDisplayKHR display)
    {
        return __vkReleaseDisplayEXT(physicalDevice, display);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, VkSurfaceCapabilities2EXT*, VkResult> __vkGetPhysicalDeviceSurfaceCapabilities2EXT;
    internal static VkResult vkGetPhysicalDeviceSurfaceCapabilities2EXT(VkPhysicalDevice physicalDevice, VkSurfaceKHR surface, VkSurfaceCapabilities2EXT* pSurfaceCapabilities)
    {
        return __vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice, surface, pSurfaceCapabilities);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDisplayKHR, VkDisplayPowerInfoEXT*, VkResult> __vkDisplayPowerControlEXT;
    internal static VkResult vkDisplayPowerControlEXT(VkDevice device, VkDisplayKHR display, VkDisplayPowerInfoEXT* pDisplayPowerInfo)
    {
        return __vkDisplayPowerControlEXT(device, display, pDisplayPowerInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult> __vkRegisterDeviceEventEXT;
    internal static VkResult vkRegisterDeviceEventEXT(VkDevice device, VkDeviceEventInfoEXT* pDeviceEventInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence)
    {
        return __vkRegisterDeviceEventEXT(device, pDeviceEventInfo, pAllocator, pFence);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult> __vkRegisterDisplayEventEXT;
    internal static VkResult vkRegisterDisplayEventEXT(VkDevice device, VkDisplayKHR display, VkDisplayEventInfoEXT* pDisplayEventInfo, VkAllocationCallbacks* pAllocator, VkFence* pFence)
    {
        return __vkRegisterDisplayEventEXT(device, display, pDisplayEventInfo, pAllocator, pFence);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagBitsEXT, ulong*, VkResult> __vkGetSwapchainCounterEXT;
    internal static VkResult vkGetSwapchainCounterEXT(VkDevice device, VkSwapchainKHR swapchain, VkSurfaceCounterFlagBitsEXT counter, ulong* pCounterValue)
    {
        return __vkGetSwapchainCounterEXT(device, swapchain, counter, pCounterValue);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSwapchainKHR, VkRefreshCycleDurationGOOGLE*, VkResult> __vkGetRefreshCycleDurationGOOGLE;
    internal static VkResult vkGetRefreshCycleDurationGOOGLE(VkDevice device, VkSwapchainKHR swapchain, VkRefreshCycleDurationGOOGLE* pDisplayTimingProperties)
    {
        return __vkGetRefreshCycleDurationGOOGLE(device, swapchain, pDisplayTimingProperties);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSwapchainKHR, uint*, VkPastPresentationTimingGOOGLE*, VkResult> __vkGetPastPresentationTimingGOOGLE;
    internal static VkResult vkGetPastPresentationTimingGOOGLE(VkDevice device, VkSwapchainKHR swapchain, uint* pPresentationTimingCount, VkPastPresentationTimingGOOGLE* pPresentationTimings)
    {
        return __vkGetPastPresentationTimingGOOGLE(device, swapchain, pPresentationTimingCount, pPresentationTimings);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, VkRect2D*, void> __vkCmdSetDiscardRectangleEXT;
    internal static void vkCmdSetDiscardRectangleEXT(VkCommandBuffer commandBuffer, uint firstDiscardRectangle, uint discardRectangleCount, VkRect2D* pDiscardRectangles)
    {
        __vkCmdSetDiscardRectangleEXT(commandBuffer, firstDiscardRectangle, discardRectangleCount, pDiscardRectangles);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, VkSwapchainKHR*, VkHdrMetadataEXT*, void> __vkSetHdrMetadataEXT;
    internal static void vkSetHdrMetadataEXT(VkDevice device, uint swapchainCount, VkSwapchainKHR* pSwapchains, VkHdrMetadataEXT* pMetadata)
    {
        __vkSetHdrMetadataEXT(device, swapchainCount, pSwapchains, pMetadata);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDebugUtilsObjectNameInfoEXT*, VkResult> __vkSetDebugUtilsObjectNameEXT;
    internal static VkResult vkSetDebugUtilsObjectNameEXT(VkDevice device, VkDebugUtilsObjectNameInfoEXT* pNameInfo)
    {
        return __vkSetDebugUtilsObjectNameEXT(device, pNameInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDebugUtilsObjectTagInfoEXT*, VkResult> __vkSetDebugUtilsObjectTagEXT;
    internal static VkResult vkSetDebugUtilsObjectTagEXT(VkDevice device, VkDebugUtilsObjectTagInfoEXT* pTagInfo)
    {
        return __vkSetDebugUtilsObjectTagEXT(device, pTagInfo);
    }

    private static unsafe delegate* unmanaged<VkQueue, VkDebugUtilsLabelEXT*, void> __vkQueueBeginDebugUtilsLabelEXT;
    internal static void vkQueueBeginDebugUtilsLabelEXT(VkQueue queue, VkDebugUtilsLabelEXT* pLabelInfo)
    {
        __vkQueueBeginDebugUtilsLabelEXT(queue, pLabelInfo);
    }

    private static unsafe delegate* unmanaged<VkQueue, void> __vkQueueEndDebugUtilsLabelEXT;
    internal static void vkQueueEndDebugUtilsLabelEXT(VkQueue queue)
    {
        __vkQueueEndDebugUtilsLabelEXT(queue);
    }

    private static unsafe delegate* unmanaged<VkQueue, VkDebugUtilsLabelEXT*, void> __vkQueueInsertDebugUtilsLabelEXT;
    internal static void vkQueueInsertDebugUtilsLabelEXT(VkQueue queue, VkDebugUtilsLabelEXT* pLabelInfo)
    {
        __vkQueueInsertDebugUtilsLabelEXT(queue, pLabelInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkDebugUtilsLabelEXT*, void> __vkCmdBeginDebugUtilsLabelEXT;
    internal static void vkCmdBeginDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo)
    {
        __vkCmdBeginDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, void> __vkCmdEndDebugUtilsLabelEXT;
    internal static void vkCmdEndDebugUtilsLabelEXT(VkCommandBuffer commandBuffer)
    {
        __vkCmdEndDebugUtilsLabelEXT(commandBuffer);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkDebugUtilsLabelEXT*, void> __vkCmdInsertDebugUtilsLabelEXT;
    internal static void vkCmdInsertDebugUtilsLabelEXT(VkCommandBuffer commandBuffer, VkDebugUtilsLabelEXT* pLabelInfo)
    {
        __vkCmdInsertDebugUtilsLabelEXT(commandBuffer, pLabelInfo);
    }

    private static unsafe delegate* unmanaged<VkInstance, VkDebugUtilsMessengerCreateInfoEXT*, VkAllocationCallbacks*, VkDebugUtilsMessengerEXT*, VkResult> __vkCreateDebugUtilsMessengerEXT;
    internal static VkResult vkCreateDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkDebugUtilsMessengerEXT* pMessenger)
    {
        return __vkCreateDebugUtilsMessengerEXT(instance, pCreateInfo, pAllocator, pMessenger);
    }

    private static unsafe delegate* unmanaged<VkInstance, VkDebugUtilsMessengerEXT, VkAllocationCallbacks*, void> __vkDestroyDebugUtilsMessengerEXT;
    internal static void vkDestroyDebugUtilsMessengerEXT(VkInstance instance, VkDebugUtilsMessengerEXT messenger, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyDebugUtilsMessengerEXT(instance, messenger, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkInstance, VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void> __vkSubmitDebugUtilsMessageEXT;
    internal static void vkSubmitDebugUtilsMessageEXT(VkInstance instance, VkDebugUtilsMessageSeverityFlagBitsEXT messageSeverity, VkDebugUtilsMessageTypeFlagsEXT messageTypes, VkDebugUtilsMessengerCallbackDataEXT* pCallbackData)
    {
        __vkSubmitDebugUtilsMessageEXT(instance, messageSeverity, messageTypes, pCallbackData);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkSampleLocationsInfoEXT*, void> __vkCmdSetSampleLocationsEXT;
    internal static void vkCmdSetSampleLocationsEXT(VkCommandBuffer commandBuffer, VkSampleLocationsInfoEXT* pSampleLocationsInfo)
    {
        __vkCmdSetSampleLocationsEXT(commandBuffer, pSampleLocationsInfo);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkSampleCountFlagBits, VkMultisamplePropertiesEXT*, void> __vkGetPhysicalDeviceMultisamplePropertiesEXT;
    internal static void vkGetPhysicalDeviceMultisamplePropertiesEXT(VkPhysicalDevice physicalDevice, VkSampleCountFlagBits samples, VkMultisamplePropertiesEXT* pMultisampleProperties)
    {
        __vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice, samples, pMultisampleProperties);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkImage, VkImageDrmFormatModifierPropertiesEXT*, VkResult> __vkGetImageDrmFormatModifierPropertiesEXT;
    internal static VkResult vkGetImageDrmFormatModifierPropertiesEXT(VkDevice device, VkImage image, VkImageDrmFormatModifierPropertiesEXT* pProperties)
    {
        return __vkGetImageDrmFormatModifierPropertiesEXT(device, image, pProperties);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkValidationCacheCreateInfoEXT*, VkAllocationCallbacks*, VkValidationCacheEXT*, VkResult> __vkCreateValidationCacheEXT;
    internal static VkResult vkCreateValidationCacheEXT(VkDevice device, VkValidationCacheCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkValidationCacheEXT* pValidationCache)
    {
        return __vkCreateValidationCacheEXT(device, pCreateInfo, pAllocator, pValidationCache);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkValidationCacheEXT, VkAllocationCallbacks*, void> __vkDestroyValidationCacheEXT;
    internal static void vkDestroyValidationCacheEXT(VkDevice device, VkValidationCacheEXT validationCache, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyValidationCacheEXT(device, validationCache, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkValidationCacheEXT, uint, VkValidationCacheEXT*, VkResult> __vkMergeValidationCachesEXT;
    internal static VkResult vkMergeValidationCachesEXT(VkDevice device, VkValidationCacheEXT dstCache, uint srcCacheCount, VkValidationCacheEXT* pSrcCaches)
    {
        return __vkMergeValidationCachesEXT(device, dstCache, srcCacheCount, pSrcCaches);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkValidationCacheEXT, uint*, void*, VkResult> __vkGetValidationCacheDataEXT;
    internal static VkResult vkGetValidationCacheDataEXT(VkDevice device, VkValidationCacheEXT validationCache, uint* pDataSize, void* pData)
    {
        return __vkGetValidationCacheDataEXT(device, validationCache, pDataSize, pData);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkImageView, VkImageLayout, void> __vkCmdBindShadingRateImageNV;
    internal static void vkCmdBindShadingRateImageNV(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)
    {
        __vkCmdBindShadingRateImageNV(commandBuffer, imageView, imageLayout);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, VkShadingRatePaletteNV*, void> __vkCmdSetViewportShadingRatePaletteNV;
    internal static void vkCmdSetViewportShadingRatePaletteNV(VkCommandBuffer commandBuffer, uint firstViewport, uint viewportCount, VkShadingRatePaletteNV* pShadingRatePalettes)
    {
        __vkCmdSetViewportShadingRatePaletteNV(commandBuffer, firstViewport, viewportCount, pShadingRatePalettes);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCoarseSampleOrderTypeNV, uint, VkCoarseSampleOrderCustomNV*, void> __vkCmdSetCoarseSampleOrderNV;
    internal static void vkCmdSetCoarseSampleOrderNV(VkCommandBuffer commandBuffer, VkCoarseSampleOrderTypeNV sampleOrderType, uint customSampleOrderCount, VkCoarseSampleOrderCustomNV* pCustomSampleOrders)
    {
        __vkCmdSetCoarseSampleOrderNV(commandBuffer, sampleOrderType, customSampleOrderCount, pCustomSampleOrders);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkAccelerationStructureCreateInfoNV*, VkAllocationCallbacks*, VkAccelerationStructureNV*, VkResult> __vkCreateAccelerationStructureNV;
    internal static VkResult vkCreateAccelerationStructureNV(VkDevice device, VkAccelerationStructureCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkAccelerationStructureNV* pAccelerationStructure)
    {
        return __vkCreateAccelerationStructureNV(device, pCreateInfo, pAllocator, pAccelerationStructure);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkAccelerationStructureNV, VkAllocationCallbacks*, void> __vkDestroyAccelerationStructureNV;
    internal static void vkDestroyAccelerationStructureNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyAccelerationStructureNV(device, accelerationStructure, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkAccelerationStructureMemoryRequirementsInfoNV*, VkMemoryRequirements2KHR*, void> __vkGetAccelerationStructureMemoryRequirementsNV;
    internal static void vkGetAccelerationStructureMemoryRequirementsNV(VkDevice device, VkAccelerationStructureMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2KHR* pMemoryRequirements)
    {
        __vkGetAccelerationStructureMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, VkBindAccelerationStructureMemoryInfoNV*, VkResult> __vkBindAccelerationStructureMemoryNV;
    internal static VkResult vkBindAccelerationStructureMemoryNV(VkDevice device, uint bindInfoCount, VkBindAccelerationStructureMemoryInfoNV* pBindInfos)
    {
        return __vkBindAccelerationStructureMemoryNV(device, bindInfoCount, pBindInfos);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkAccelerationStructureInfoNV*, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize, void> __vkCmdBuildAccelerationStructureNV;
    internal static void vkCmdBuildAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureInfoNV* pInfo, VkBuffer instanceData, VkDeviceSize instanceOffset, VkBool32 update, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkBuffer scratch, VkDeviceSize scratchOffset)
    {
        __vkCmdBuildAccelerationStructureNV(commandBuffer, pInfo, instanceData, instanceOffset, update, dst, src, scratch, scratchOffset);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeKHR, void> __vkCmdCopyAccelerationStructureNV;
    internal static void vkCmdCopyAccelerationStructureNV(VkCommandBuffer commandBuffer, VkAccelerationStructureNV dst, VkAccelerationStructureNV src, VkCopyAccelerationStructureModeKHR mode)
    {
        __vkCmdCopyAccelerationStructureNV(commandBuffer, dst, src, mode);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, uint, uint, uint, void> __vkCmdTraceRaysNV;
    internal static void vkCmdTraceRaysNV(VkCommandBuffer commandBuffer, VkBuffer raygenShaderBindingTableBuffer, VkDeviceSize raygenShaderBindingOffset, VkBuffer missShaderBindingTableBuffer, VkDeviceSize missShaderBindingOffset, VkDeviceSize missShaderBindingStride, VkBuffer hitShaderBindingTableBuffer, VkDeviceSize hitShaderBindingOffset, VkDeviceSize hitShaderBindingStride, VkBuffer callableShaderBindingTableBuffer, VkDeviceSize callableShaderBindingOffset, VkDeviceSize callableShaderBindingStride, uint width, uint height, uint depth)
    {
        __vkCmdTraceRaysNV(commandBuffer, raygenShaderBindingTableBuffer, raygenShaderBindingOffset, missShaderBindingTableBuffer, missShaderBindingOffset, missShaderBindingStride, hitShaderBindingTableBuffer, hitShaderBindingOffset, hitShaderBindingStride, callableShaderBindingTableBuffer, callableShaderBindingOffset, callableShaderBindingStride, width, height, depth);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoNV*, VkAllocationCallbacks*, VkPipeline*, VkResult> __vkCreateRayTracingPipelinesNV;
    internal static VkResult vkCreateRayTracingPipelinesNV(VkDevice device, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfoNV* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)
    {
        return __vkCreateRayTracingPipelinesNV(device, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipeline, uint, uint, uint, void*, VkResult> __vkGetRayTracingShaderGroupHandlesKHR;
    internal static VkResult vkGetRayTracingShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, uint dataSize, void* pData)
    {
        return __vkGetRayTracingShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipeline, uint, uint, uint, void*, VkResult> __vkGetRayTracingShaderGroupHandlesNV;
    internal static VkResult vkGetRayTracingShaderGroupHandlesNV(VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, uint dataSize, void* pData)
    {
        return __vkGetRayTracingShaderGroupHandlesNV(device, pipeline, firstGroup, groupCount, dataSize, pData);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkAccelerationStructureNV, uint, void*, VkResult> __vkGetAccelerationStructureHandleNV;
    internal static VkResult vkGetAccelerationStructureHandleNV(VkDevice device, VkAccelerationStructureNV accelerationStructure, uint dataSize, void* pData)
    {
        return __vkGetAccelerationStructureHandleNV(device, accelerationStructure, dataSize, pData);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkAccelerationStructureNV*, VkQueryType, VkQueryPool, uint, void> __vkCmdWriteAccelerationStructuresPropertiesNV;
    internal static void vkCmdWriteAccelerationStructuresPropertiesNV(VkCommandBuffer commandBuffer, uint accelerationStructureCount, VkAccelerationStructureNV* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery)
    {
        __vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipeline, uint, VkResult> __vkCompileDeferredNV;
    internal static VkResult vkCompileDeferredNV(VkDevice device, VkPipeline pipeline, uint shader)
    {
        return __vkCompileDeferredNV(device, pipeline, shader);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkExternalMemoryHandleTypeFlagBits, void*, VkMemoryHostPointerPropertiesEXT*, VkResult> __vkGetMemoryHostPointerPropertiesEXT;
    internal static VkResult vkGetMemoryHostPointerPropertiesEXT(VkDevice device, VkExternalMemoryHandleTypeFlagBits handleType, void* pHostPointer, VkMemoryHostPointerPropertiesEXT* pMemoryHostPointerProperties)
    {
        return __vkGetMemoryHostPointerPropertiesEXT(device, handleType, pHostPointer, pMemoryHostPointerProperties);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlagBits, VkBuffer, VkDeviceSize, uint, void> __vkCmdWriteBufferMarkerAMD;
    internal static void vkCmdWriteBufferMarkerAMD(VkCommandBuffer commandBuffer, VkPipelineStageFlagBits pipelineStage, VkBuffer dstBuffer, VkDeviceSize dstOffset, uint marker)
    {
        __vkCmdWriteBufferMarkerAMD(commandBuffer, pipelineStage, dstBuffer, dstOffset, marker);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint*, VkTimeDomainEXT*, VkResult> __vkGetPhysicalDeviceCalibrateableTimeDomainsEXT;
    internal static VkResult vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(VkPhysicalDevice physicalDevice, uint* pTimeDomainCount, VkTimeDomainEXT* pTimeDomains)
    {
        return __vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice, pTimeDomainCount, pTimeDomains);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, VkCalibratedTimestampInfoEXT*, ulong*, ulong*, VkResult> __vkGetCalibratedTimestampsEXT;
    internal static VkResult vkGetCalibratedTimestampsEXT(VkDevice device, uint timestampCount, VkCalibratedTimestampInfoEXT* pTimestampInfos, ulong* pTimestamps, ulong* pMaxDeviation)
    {
        return __vkGetCalibratedTimestampsEXT(device, timestampCount, pTimestampInfos, pTimestamps, pMaxDeviation);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, void> __vkCmdDrawMeshTasksNV;
    internal static void vkCmdDrawMeshTasksNV(VkCommandBuffer commandBuffer, uint taskCount, uint firstTask)
    {
        __vkCmdDrawMeshTasksNV(commandBuffer, taskCount, firstTask);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void> __vkCmdDrawMeshTasksIndirectNV;
    internal static void vkCmdDrawMeshTasksIndirectNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, uint drawCount, uint stride)
    {
        __vkCmdDrawMeshTasksIndirectNV(commandBuffer, buffer, offset, drawCount, stride);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void> __vkCmdDrawMeshTasksIndirectCountNV;
    internal static void vkCmdDrawMeshTasksIndirectCountNV(VkCommandBuffer commandBuffer, VkBuffer buffer, VkDeviceSize offset, VkBuffer countBuffer, VkDeviceSize countBufferOffset, uint maxDrawCount, uint stride)
    {
        __vkCmdDrawMeshTasksIndirectCountNV(commandBuffer, buffer, offset, countBuffer, countBufferOffset, maxDrawCount, stride);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, VkRect2D*, void> __vkCmdSetExclusiveScissorNV;
    internal static void vkCmdSetExclusiveScissorNV(VkCommandBuffer commandBuffer, uint firstExclusiveScissor, uint exclusiveScissorCount, VkRect2D* pExclusiveScissors)
    {
        __vkCmdSetExclusiveScissorNV(commandBuffer, firstExclusiveScissor, exclusiveScissorCount, pExclusiveScissors);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, void*, void> __vkCmdSetCheckpointNV;
    internal static void vkCmdSetCheckpointNV(VkCommandBuffer commandBuffer, void* pCheckpointMarker)
    {
        __vkCmdSetCheckpointNV(commandBuffer, pCheckpointMarker);
    }

    private static unsafe delegate* unmanaged<VkQueue, uint*, VkCheckpointDataNV*, void> __vkGetQueueCheckpointDataNV;
    internal static void vkGetQueueCheckpointDataNV(VkQueue queue, uint* pCheckpointDataCount, VkCheckpointDataNV* pCheckpointData)
    {
        __vkGetQueueCheckpointDataNV(queue, pCheckpointDataCount, pCheckpointData);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkInitializePerformanceApiInfoINTEL*, VkResult> __vkInitializePerformanceApiINTEL;
    internal static VkResult vkInitializePerformanceApiINTEL(VkDevice device, VkInitializePerformanceApiInfoINTEL* pInitializeInfo)
    {
        return __vkInitializePerformanceApiINTEL(device, pInitializeInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, void> __vkUninitializePerformanceApiINTEL;
    internal static void vkUninitializePerformanceApiINTEL(VkDevice device)
    {
        __vkUninitializePerformanceApiINTEL(device);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkPerformanceMarkerInfoINTEL*, VkResult> __vkCmdSetPerformanceMarkerINTEL;
    internal static VkResult vkCmdSetPerformanceMarkerINTEL(VkCommandBuffer commandBuffer, VkPerformanceMarkerInfoINTEL* pMarkerInfo)
    {
        return __vkCmdSetPerformanceMarkerINTEL(commandBuffer, pMarkerInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkPerformanceStreamMarkerInfoINTEL*, VkResult> __vkCmdSetPerformanceStreamMarkerINTEL;
    internal static VkResult vkCmdSetPerformanceStreamMarkerINTEL(VkCommandBuffer commandBuffer, VkPerformanceStreamMarkerInfoINTEL* pMarkerInfo)
    {
        return __vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer, pMarkerInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkPerformanceOverrideInfoINTEL*, VkResult> __vkCmdSetPerformanceOverrideINTEL;
    internal static VkResult vkCmdSetPerformanceOverrideINTEL(VkCommandBuffer commandBuffer, VkPerformanceOverrideInfoINTEL* pOverrideInfo)
    {
        return __vkCmdSetPerformanceOverrideINTEL(commandBuffer, pOverrideInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPerformanceConfigurationAcquireInfoINTEL*, VkPerformanceConfigurationINTEL*, VkResult> __vkAcquirePerformanceConfigurationINTEL;
    internal static VkResult vkAcquirePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationAcquireInfoINTEL* pAcquireInfo, VkPerformanceConfigurationINTEL* pConfiguration)
    {
        return __vkAcquirePerformanceConfigurationINTEL(device, pAcquireInfo, pConfiguration);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPerformanceConfigurationINTEL, VkResult> __vkReleasePerformanceConfigurationINTEL;
    internal static VkResult vkReleasePerformanceConfigurationINTEL(VkDevice device, VkPerformanceConfigurationINTEL configuration)
    {
        return __vkReleasePerformanceConfigurationINTEL(device, configuration);
    }

    private static unsafe delegate* unmanaged<VkQueue, VkPerformanceConfigurationINTEL, VkResult> __vkQueueSetPerformanceConfigurationINTEL;
    internal static VkResult vkQueueSetPerformanceConfigurationINTEL(VkQueue queue, VkPerformanceConfigurationINTEL configuration)
    {
        return __vkQueueSetPerformanceConfigurationINTEL(queue, configuration);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPerformanceParameterTypeINTEL, VkPerformanceValueINTEL*, VkResult> __vkGetPerformanceParameterINTEL;
    internal static VkResult vkGetPerformanceParameterINTEL(VkDevice device, VkPerformanceParameterTypeINTEL parameter, VkPerformanceValueINTEL* pValue)
    {
        return __vkGetPerformanceParameterINTEL(device, parameter, pValue);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkSwapchainKHR, VkBool32, void> __vkSetLocalDimmingAMD;
    internal static void vkSetLocalDimmingAMD(VkDevice device, VkSwapchainKHR swapChain, VkBool32 localDimmingEnable)
    {
        __vkSetLocalDimmingAMD(device, swapChain, localDimmingEnable);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, VkDeviceAddress> __vkGetBufferDeviceAddressEXT;
    internal static VkDeviceAddress vkGetBufferDeviceAddressEXT(VkDevice device, VkBufferDeviceAddressInfo* pInfo)
    {
        return __vkGetBufferDeviceAddressEXT(device, pInfo);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint*, VkPhysicalDeviceToolProperties*, VkResult> __vkGetPhysicalDeviceToolPropertiesEXT;
    internal static VkResult vkGetPhysicalDeviceToolPropertiesEXT(VkPhysicalDevice physicalDevice, uint* pToolCount, VkPhysicalDeviceToolProperties* pToolProperties)
    {
        return __vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice, pToolCount, pToolProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint*, VkCooperativeMatrixPropertiesNV*, VkResult> __vkGetPhysicalDeviceCooperativeMatrixPropertiesNV;
    internal static VkResult vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(VkPhysicalDevice physicalDevice, uint* pPropertyCount, VkCooperativeMatrixPropertiesNV* pProperties)
    {
        return __vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice, pPropertyCount, pProperties);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint*, VkFramebufferMixedSamplesCombinationNV*, VkResult> __vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV;
    internal static VkResult vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(VkPhysicalDevice physicalDevice, uint* pCombinationCount, VkFramebufferMixedSamplesCombinationNV* pCombinations)
    {
        return __vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice, pCombinationCount, pCombinations);
    }

    private static unsafe delegate* unmanaged<VkInstance, VkHeadlessSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult> __vkCreateHeadlessSurfaceEXT;
    internal static VkResult vkCreateHeadlessSurfaceEXT(VkInstance instance, VkHeadlessSurfaceCreateInfoEXT* pCreateInfo, VkAllocationCallbacks* pAllocator, VkSurfaceKHR* pSurface)
    {
        return __vkCreateHeadlessSurfaceEXT(instance, pCreateInfo, pAllocator, pSurface);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, ushort, void> __vkCmdSetLineStippleEXT;
    internal static void vkCmdSetLineStippleEXT(VkCommandBuffer commandBuffer, uint lineStippleFactor, ushort lineStipplePattern)
    {
        __vkCmdSetLineStippleEXT(commandBuffer, lineStippleFactor, lineStipplePattern);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkQueryPool, uint, uint, void> __vkResetQueryPoolEXT;
    internal static void vkResetQueryPoolEXT(VkDevice device, VkQueryPool queryPool, uint firstQuery, uint queryCount)
    {
        __vkResetQueryPoolEXT(device, queryPool, firstQuery, queryCount);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCullModeFlags, void> __vkCmdSetCullModeEXT;
    internal static void vkCmdSetCullModeEXT(VkCommandBuffer commandBuffer, VkCullModeFlags cullMode)
    {
        __vkCmdSetCullModeEXT(commandBuffer, cullMode);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkFrontFace, void> __vkCmdSetFrontFaceEXT;
    internal static void vkCmdSetFrontFaceEXT(VkCommandBuffer commandBuffer, VkFrontFace frontFace)
    {
        __vkCmdSetFrontFaceEXT(commandBuffer, frontFace);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkPrimitiveTopology, void> __vkCmdSetPrimitiveTopologyEXT;
    internal static void vkCmdSetPrimitiveTopologyEXT(VkCommandBuffer commandBuffer, VkPrimitiveTopology primitiveTopology)
    {
        __vkCmdSetPrimitiveTopologyEXT(commandBuffer, primitiveTopology);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkViewport*, void> __vkCmdSetViewportWithCountEXT;
    internal static void vkCmdSetViewportWithCountEXT(VkCommandBuffer commandBuffer, uint viewportCount, VkViewport* pViewports)
    {
        __vkCmdSetViewportWithCountEXT(commandBuffer, viewportCount, pViewports);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkRect2D*, void> __vkCmdSetScissorWithCountEXT;
    internal static void vkCmdSetScissorWithCountEXT(VkCommandBuffer commandBuffer, uint scissorCount, VkRect2D* pScissors)
    {
        __vkCmdSetScissorWithCountEXT(commandBuffer, scissorCount, pScissors);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, VkDeviceSize*, void> __vkCmdBindVertexBuffers2EXT;
    internal static void vkCmdBindVertexBuffers2EXT(VkCommandBuffer commandBuffer, uint firstBinding, uint bindingCount, VkBuffer* pBuffers, VkDeviceSize* pOffsets, VkDeviceSize* pSizes, VkDeviceSize* pStrides)
    {
        __vkCmdBindVertexBuffers2EXT(commandBuffer, firstBinding, bindingCount, pBuffers, pOffsets, pSizes, pStrides);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBool32, void> __vkCmdSetDepthTestEnableEXT;
    internal static void vkCmdSetDepthTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthTestEnable)
    {
        __vkCmdSetDepthTestEnableEXT(commandBuffer, depthTestEnable);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBool32, void> __vkCmdSetDepthWriteEnableEXT;
    internal static void vkCmdSetDepthWriteEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthWriteEnable)
    {
        __vkCmdSetDepthWriteEnableEXT(commandBuffer, depthWriteEnable);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCompareOp, void> __vkCmdSetDepthCompareOpEXT;
    internal static void vkCmdSetDepthCompareOpEXT(VkCommandBuffer commandBuffer, VkCompareOp depthCompareOp)
    {
        __vkCmdSetDepthCompareOpEXT(commandBuffer, depthCompareOp);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBool32, void> __vkCmdSetDepthBoundsTestEnableEXT;
    internal static void vkCmdSetDepthBoundsTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBoundsTestEnable)
    {
        __vkCmdSetDepthBoundsTestEnableEXT(commandBuffer, depthBoundsTestEnable);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBool32, void> __vkCmdSetStencilTestEnableEXT;
    internal static void vkCmdSetStencilTestEnableEXT(VkCommandBuffer commandBuffer, VkBool32 stencilTestEnable)
    {
        __vkCmdSetStencilTestEnableEXT(commandBuffer, stencilTestEnable);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp, void> __vkCmdSetStencilOpEXT;
    internal static void vkCmdSetStencilOpEXT(VkCommandBuffer commandBuffer, VkStencilFaceFlags faceMask, VkStencilOp failOp, VkStencilOp passOp, VkStencilOp depthFailOp, VkCompareOp compareOp)
    {
        __vkCmdSetStencilOpEXT(commandBuffer, faceMask, failOp, passOp, depthFailOp, compareOp);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkGeneratedCommandsMemoryRequirementsInfoNV*, VkMemoryRequirements2*, void> __vkGetGeneratedCommandsMemoryRequirementsNV;
    internal static void vkGetGeneratedCommandsMemoryRequirementsNV(VkDevice device, VkGeneratedCommandsMemoryRequirementsInfoNV* pInfo, VkMemoryRequirements2* pMemoryRequirements)
    {
        __vkGetGeneratedCommandsMemoryRequirementsNV(device, pInfo, pMemoryRequirements);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkGeneratedCommandsInfoNV*, void> __vkCmdPreprocessGeneratedCommandsNV;
    internal static void vkCmdPreprocessGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)
    {
        __vkCmdPreprocessGeneratedCommandsNV(commandBuffer, pGeneratedCommandsInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBool32, VkGeneratedCommandsInfoNV*, void> __vkCmdExecuteGeneratedCommandsNV;
    internal static void vkCmdExecuteGeneratedCommandsNV(VkCommandBuffer commandBuffer, VkBool32 isPreprocessed, VkGeneratedCommandsInfoNV* pGeneratedCommandsInfo)
    {
        __vkCmdExecuteGeneratedCommandsNV(commandBuffer, isPreprocessed, pGeneratedCommandsInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, uint, void> __vkCmdBindPipelineShaderGroupNV;
    internal static void vkCmdBindPipelineShaderGroupNV(VkCommandBuffer commandBuffer, VkPipelineBindPoint pipelineBindPoint, VkPipeline pipeline, uint groupIndex)
    {
        __vkCmdBindPipelineShaderGroupNV(commandBuffer, pipelineBindPoint, pipeline, groupIndex);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutCreateInfoNV*, VkAllocationCallbacks*, VkIndirectCommandsLayoutNV*, VkResult> __vkCreateIndirectCommandsLayoutNV;
    internal static VkResult vkCreateIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutCreateInfoNV* pCreateInfo, VkAllocationCallbacks* pAllocator, VkIndirectCommandsLayoutNV* pIndirectCommandsLayout)
    {
        return __vkCreateIndirectCommandsLayoutNV(device, pCreateInfo, pAllocator, pIndirectCommandsLayout);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutNV, VkAllocationCallbacks*, void> __vkDestroyIndirectCommandsLayoutNV;
    internal static void vkDestroyIndirectCommandsLayoutNV(VkDevice device, VkIndirectCommandsLayoutNV indirectCommandsLayout, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyIndirectCommandsLayoutNV(device, indirectCommandsLayout, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, int, VkDisplayKHR, VkResult> __vkAcquireDrmDisplayEXT;
    internal static VkResult vkAcquireDrmDisplayEXT(VkPhysicalDevice physicalDevice, int drmFd, VkDisplayKHR display)
    {
        return __vkAcquireDrmDisplayEXT(physicalDevice, drmFd, display);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, int, uint, VkDisplayKHR*, VkResult> __vkGetDrmDisplayEXT;
    internal static VkResult vkGetDrmDisplayEXT(VkPhysicalDevice physicalDevice, int drmFd, uint connectorId, VkDisplayKHR* display)
    {
        return __vkGetDrmDisplayEXT(physicalDevice, drmFd, connectorId, display);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, VkPrivateDataSlot*, VkResult> __vkCreatePrivateDataSlotEXT;
    internal static VkResult vkCreatePrivateDataSlotEXT(VkDevice device, VkPrivateDataSlotCreateInfo* pCreateInfo, VkAllocationCallbacks* pAllocator, VkPrivateDataSlot* pPrivateDataSlot)
    {
        return __vkCreatePrivateDataSlotEXT(device, pCreateInfo, pAllocator, pPrivateDataSlot);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPrivateDataSlot, VkAllocationCallbacks*, void> __vkDestroyPrivateDataSlotEXT;
    internal static void vkDestroyPrivateDataSlotEXT(VkDevice device, VkPrivateDataSlot privateDataSlot, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyPrivateDataSlotEXT(device, privateDataSlot, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong, VkResult> __vkSetPrivateDataEXT;
    internal static VkResult vkSetPrivateDataEXT(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong data)
    {
        return __vkSetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, data);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong*, void> __vkGetPrivateDataEXT;
    internal static void vkGetPrivateDataEXT(VkDevice device, VkObjectType objectType, ulong objectHandle, VkPrivateDataSlot privateDataSlot, ulong* pData)
    {
        __vkGetPrivateDataEXT(device, objectType, objectHandle, privateDataSlot, pData);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkFragmentShadingRateNV, VkFragmentShadingRateCombinerOpKHR*, void> __vkCmdSetFragmentShadingRateEnumNV;
    internal static void vkCmdSetFragmentShadingRateEnumNV(VkCommandBuffer commandBuffer, VkFragmentShadingRateNV shadingRate, VkFragmentShadingRateCombinerOpKHR* combinerOps)
    {
        __vkCmdSetFragmentShadingRateEnumNV(commandBuffer, shadingRate, combinerOps);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, VkResult> __vkAcquireWinrtDisplayNV;
    internal static VkResult vkAcquireWinrtDisplayNV(VkPhysicalDevice physicalDevice, VkDisplayKHR display)
    {
        return __vkAcquireWinrtDisplayNV(physicalDevice, display);
    }

    private static unsafe delegate* unmanaged<VkPhysicalDevice, uint, VkDisplayKHR*, VkResult> __vkGetWinrtDisplayNV;
    internal static VkResult vkGetWinrtDisplayNV(VkPhysicalDevice physicalDevice, uint deviceRelativeId, VkDisplayKHR* pDisplay)
    {
        return __vkGetWinrtDisplayNV(physicalDevice, deviceRelativeId, pDisplay);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkVertexInputBindingDescription2EXT*, uint, VkVertexInputAttributeDescription2EXT*, void> __vkCmdSetVertexInputEXT;
    internal static void vkCmdSetVertexInputEXT(VkCommandBuffer commandBuffer, uint vertexBindingDescriptionCount, VkVertexInputBindingDescription2EXT* pVertexBindingDescriptions, uint vertexAttributeDescriptionCount, VkVertexInputAttributeDescription2EXT* pVertexAttributeDescriptions)
    {
        __vkCmdSetVertexInputEXT(commandBuffer, vertexBindingDescriptionCount, pVertexBindingDescriptions, vertexAttributeDescriptionCount, pVertexAttributeDescriptions);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkRenderPass, VkExtent2D*, VkResult> __vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI;
    internal static VkResult vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(VkDevice device, VkRenderPass renderpass, VkExtent2D* pMaxWorkgroupSize)
    {
        return __vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device, renderpass, pMaxWorkgroupSize);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, void> __vkCmdSubpassShadingHUAWEI;
    internal static void vkCmdSubpassShadingHUAWEI(VkCommandBuffer commandBuffer)
    {
        __vkCmdSubpassShadingHUAWEI(commandBuffer);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkImageView, VkImageLayout, void> __vkCmdBindInvocationMaskHUAWEI;
    internal static void vkCmdBindInvocationMaskHUAWEI(VkCommandBuffer commandBuffer, VkImageView imageView, VkImageLayout imageLayout)
    {
        __vkCmdBindInvocationMaskHUAWEI(commandBuffer, imageView, imageLayout);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkMemoryGetRemoteAddressInfoNV*, VkRemoteAddressNV*, VkResult> __vkGetMemoryRemoteAddressNV;
    internal static VkResult vkGetMemoryRemoteAddressNV(VkDevice device, VkMemoryGetRemoteAddressInfoNV* pMemoryGetRemoteAddressInfo, VkRemoteAddressNV* pAddress)
    {
        return __vkGetMemoryRemoteAddressNV(device, pMemoryGetRemoteAddressInfo, pAddress);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, void> __vkCmdSetPatchControlPointsEXT;
    internal static void vkCmdSetPatchControlPointsEXT(VkCommandBuffer commandBuffer, uint patchControlPoints)
    {
        __vkCmdSetPatchControlPointsEXT(commandBuffer, patchControlPoints);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBool32, void> __vkCmdSetRasterizerDiscardEnableEXT;
    internal static void vkCmdSetRasterizerDiscardEnableEXT(VkCommandBuffer commandBuffer, VkBool32 rasterizerDiscardEnable)
    {
        __vkCmdSetRasterizerDiscardEnableEXT(commandBuffer, rasterizerDiscardEnable);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBool32, void> __vkCmdSetDepthBiasEnableEXT;
    internal static void vkCmdSetDepthBiasEnableEXT(VkCommandBuffer commandBuffer, VkBool32 depthBiasEnable)
    {
        __vkCmdSetDepthBiasEnableEXT(commandBuffer, depthBiasEnable);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkLogicOp, void> __vkCmdSetLogicOpEXT;
    internal static void vkCmdSetLogicOpEXT(VkCommandBuffer commandBuffer, VkLogicOp logicOp)
    {
        __vkCmdSetLogicOpEXT(commandBuffer, logicOp);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkBool32, void> __vkCmdSetPrimitiveRestartEnableEXT;
    internal static void vkCmdSetPrimitiveRestartEnableEXT(VkCommandBuffer commandBuffer, VkBool32 primitiveRestartEnable)
    {
        __vkCmdSetPrimitiveRestartEnableEXT(commandBuffer, primitiveRestartEnable);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkBool32*, void> __vkCmdSetColorWriteEnableEXT;
    internal static void vkCmdSetColorWriteEnableEXT(VkCommandBuffer commandBuffer, uint attachmentCount, VkBool32* pColorWriteEnables)
    {
        __vkCmdSetColorWriteEnableEXT(commandBuffer, attachmentCount, pColorWriteEnables);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkMultiDrawInfoEXT*, uint, uint, uint, void> __vkCmdDrawMultiEXT;
    internal static void vkCmdDrawMultiEXT(VkCommandBuffer commandBuffer, uint drawCount, VkMultiDrawInfoEXT* pVertexInfo, uint instanceCount, uint firstInstance, uint stride)
    {
        __vkCmdDrawMultiEXT(commandBuffer, drawCount, pVertexInfo, instanceCount, firstInstance, stride);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkMultiDrawIndexedInfoEXT*, uint, uint, uint, int*, void> __vkCmdDrawMultiIndexedEXT;
    internal static void vkCmdDrawMultiIndexedEXT(VkCommandBuffer commandBuffer, uint drawCount, VkMultiDrawIndexedInfoEXT* pIndexInfo, uint instanceCount, uint firstInstance, uint stride, int* pVertexOffset)
    {
        __vkCmdDrawMultiIndexedEXT(commandBuffer, drawCount, pIndexInfo, instanceCount, firstInstance, stride, pVertexOffset);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeviceMemory, float, void> __vkSetDeviceMemoryPriorityEXT;
    internal static void vkSetDeviceMemoryPriorityEXT(VkDevice device, VkDeviceMemory memory, float priority)
    {
        __vkSetDeviceMemoryPriorityEXT(device, memory, priority);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkAccelerationStructureCreateInfoKHR*, VkAllocationCallbacks*, VkAccelerationStructureKHR*, VkResult> __vkCreateAccelerationStructureKHR;
    internal static VkResult vkCreateAccelerationStructureKHR(VkDevice device, VkAccelerationStructureCreateInfoKHR* pCreateInfo, VkAllocationCallbacks* pAllocator, VkAccelerationStructureKHR* pAccelerationStructure)
    {
        return __vkCreateAccelerationStructureKHR(device, pCreateInfo, pAllocator, pAccelerationStructure);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkAccelerationStructureKHR, VkAllocationCallbacks*, void> __vkDestroyAccelerationStructureKHR;
    internal static void vkDestroyAccelerationStructureKHR(VkDevice device, VkAccelerationStructureKHR accelerationStructure, VkAllocationCallbacks* pAllocator)
    {
        __vkDestroyAccelerationStructureKHR(device, accelerationStructure, pAllocator);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR*, VkAccelerationStructureBuildRangeInfoKHR**, void> __vkCmdBuildAccelerationStructuresKHR;
    internal static void vkCmdBuildAccelerationStructuresKHR(VkCommandBuffer commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos)
    {
        __vkCmdBuildAccelerationStructuresKHR(commandBuffer, infoCount, pInfos, ppBuildRangeInfos);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR*, VkDeviceAddress*, uint*, uint**, void> __vkCmdBuildAccelerationStructuresIndirectKHR;
    internal static void vkCmdBuildAccelerationStructuresIndirectKHR(VkCommandBuffer commandBuffer, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkDeviceAddress* pIndirectDeviceAddresses, uint* pIndirectStrides, uint** ppMaxPrimitiveCounts)
    {
        __vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer, infoCount, pInfos, pIndirectDeviceAddresses, pIndirectStrides, ppMaxPrimitiveCounts);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeferredOperationKHR, uint, VkAccelerationStructureBuildGeometryInfoKHR*, VkAccelerationStructureBuildRangeInfoKHR**, VkResult> __vkBuildAccelerationStructuresKHR;
    internal static VkResult vkBuildAccelerationStructuresKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, uint infoCount, VkAccelerationStructureBuildGeometryInfoKHR* pInfos, VkAccelerationStructureBuildRangeInfoKHR** ppBuildRangeInfos)
    {
        return __vkBuildAccelerationStructuresKHR(device, deferredOperation, infoCount, pInfos, ppBuildRangeInfos);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkCopyAccelerationStructureInfoKHR*, VkResult> __vkCopyAccelerationStructureKHR;
    internal static VkResult vkCopyAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyAccelerationStructureInfoKHR* pInfo)
    {
        return __vkCopyAccelerationStructureKHR(device, deferredOperation, pInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkCopyAccelerationStructureToMemoryInfoKHR*, VkResult> __vkCopyAccelerationStructureToMemoryKHR;
    internal static VkResult vkCopyAccelerationStructureToMemoryKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)
    {
        return __vkCopyAccelerationStructureToMemoryKHR(device, deferredOperation, pInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkCopyMemoryToAccelerationStructureInfoKHR*, VkResult> __vkCopyMemoryToAccelerationStructureKHR;
    internal static VkResult vkCopyMemoryToAccelerationStructureKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)
    {
        return __vkCopyMemoryToAccelerationStructureKHR(device, deferredOperation, pInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, uint, VkAccelerationStructureKHR*, VkQueryType, uint, void*, uint, VkResult> __vkWriteAccelerationStructuresPropertiesKHR;
    internal static VkResult vkWriteAccelerationStructuresPropertiesKHR(VkDevice device, uint accelerationStructureCount, VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, uint dataSize, void* pData, uint stride)
    {
        return __vkWriteAccelerationStructuresPropertiesKHR(device, accelerationStructureCount, pAccelerationStructures, queryType, dataSize, pData, stride);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCopyAccelerationStructureInfoKHR*, void> __vkCmdCopyAccelerationStructureKHR;
    internal static void vkCmdCopyAccelerationStructureKHR(VkCommandBuffer commandBuffer, VkCopyAccelerationStructureInfoKHR* pInfo)
    {
        __vkCmdCopyAccelerationStructureKHR(commandBuffer, pInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR*, void> __vkCmdCopyAccelerationStructureToMemoryKHR;
    internal static void vkCmdCopyAccelerationStructureToMemoryKHR(VkCommandBuffer commandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR* pInfo)
    {
        __vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer, pInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR*, void> __vkCmdCopyMemoryToAccelerationStructureKHR;
    internal static void vkCmdCopyMemoryToAccelerationStructureKHR(VkCommandBuffer commandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR* pInfo)
    {
        __vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer, pInfo);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkAccelerationStructureDeviceAddressInfoKHR*, VkDeviceAddress> __vkGetAccelerationStructureDeviceAddressKHR;
    internal static VkDeviceAddress vkGetAccelerationStructureDeviceAddressKHR(VkDevice device, VkAccelerationStructureDeviceAddressInfoKHR* pInfo)
    {
        return __vkGetAccelerationStructureDeviceAddressKHR(device, pInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, VkAccelerationStructureKHR*, VkQueryType, VkQueryPool, uint, void> __vkCmdWriteAccelerationStructuresPropertiesKHR;
    internal static void vkCmdWriteAccelerationStructuresPropertiesKHR(VkCommandBuffer commandBuffer, uint accelerationStructureCount, VkAccelerationStructureKHR* pAccelerationStructures, VkQueryType queryType, VkQueryPool queryPool, uint firstQuery)
    {
        __vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer, accelerationStructureCount, pAccelerationStructures, queryType, queryPool, firstQuery);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkAccelerationStructureVersionInfoKHR*, VkAccelerationStructureCompatibilityKHR*, void> __vkGetDeviceAccelerationStructureCompatibilityKHR;
    internal static void vkGetDeviceAccelerationStructureCompatibilityKHR(VkDevice device, VkAccelerationStructureVersionInfoKHR* pVersionInfo, VkAccelerationStructureCompatibilityKHR* pCompatibility)
    {
        __vkGetDeviceAccelerationStructureCompatibilityKHR(device, pVersionInfo, pCompatibility);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkAccelerationStructureBuildTypeKHR, VkAccelerationStructureBuildGeometryInfoKHR*, uint*, VkAccelerationStructureBuildSizesInfoKHR*, void> __vkGetAccelerationStructureBuildSizesKHR;
    internal static void vkGetAccelerationStructureBuildSizesKHR(VkDevice device, VkAccelerationStructureBuildTypeKHR buildType, VkAccelerationStructureBuildGeometryInfoKHR* pBuildInfo, uint* pMaxPrimitiveCounts, VkAccelerationStructureBuildSizesInfoKHR* pSizeInfo)
    {
        __vkGetAccelerationStructureBuildSizesKHR(device, buildType, pBuildInfo, pMaxPrimitiveCounts, pSizeInfo);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void> __vkCmdTraceRaysKHR;
    internal static void vkCmdTraceRaysKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, uint width, uint height, uint depth)
    {
        __vkCmdTraceRaysKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, width, height, depth);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoKHR*, VkAllocationCallbacks*, VkPipeline*, VkResult> __vkCreateRayTracingPipelinesKHR;
    internal static VkResult vkCreateRayTracingPipelinesKHR(VkDevice device, VkDeferredOperationKHR deferredOperation, VkPipelineCache pipelineCache, uint createInfoCount, VkRayTracingPipelineCreateInfoKHR* pCreateInfos, VkAllocationCallbacks* pAllocator, VkPipeline* pPipelines)
    {
        return __vkCreateRayTracingPipelinesKHR(device, deferredOperation, pipelineCache, createInfoCount, pCreateInfos, pAllocator, pPipelines);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipeline, uint, uint, uint, void*, VkResult> __vkGetRayTracingCaptureReplayShaderGroupHandlesKHR;
    internal static VkResult vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(VkDevice device, VkPipeline pipeline, uint firstGroup, uint groupCount, uint dataSize, void* pData)
    {
        return __vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device, pipeline, firstGroup, groupCount, dataSize, pData);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void> __vkCmdTraceRaysIndirectKHR;
    internal static void vkCmdTraceRaysIndirectKHR(VkCommandBuffer commandBuffer, VkStridedDeviceAddressRegionKHR* pRaygenShaderBindingTable, VkStridedDeviceAddressRegionKHR* pMissShaderBindingTable, VkStridedDeviceAddressRegionKHR* pHitShaderBindingTable, VkStridedDeviceAddressRegionKHR* pCallableShaderBindingTable, VkDeviceAddress indirectDeviceAddress)
    {
        __vkCmdTraceRaysIndirectKHR(commandBuffer, pRaygenShaderBindingTable, pMissShaderBindingTable, pHitShaderBindingTable, pCallableShaderBindingTable, indirectDeviceAddress);
    }

    private static unsafe delegate* unmanaged<VkDevice, VkPipeline, uint, VkShaderGroupShaderKHR, VkDeviceSize> __vkGetRayTracingShaderGroupStackSizeKHR;
    internal static VkDeviceSize vkGetRayTracingShaderGroupStackSizeKHR(VkDevice device, VkPipeline pipeline, uint group, VkShaderGroupShaderKHR groupShader)
    {
        return __vkGetRayTracingShaderGroupStackSizeKHR(device, pipeline, group, groupShader);
    }

    private static unsafe delegate* unmanaged<VkCommandBuffer, uint, void> __vkCmdSetRayTracingPipelineStackSizeKHR;
    internal static void vkCmdSetRayTracingPipelineStackSizeKHR(VkCommandBuffer commandBuffer, uint pipelineStackSize)
    {
        __vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer, pipelineStackSize);
    }

    private static void LoadFunctions(IntPtr instance)
    {
        __vkAcquireDrmDisplayEXT = (delegate* unmanaged<VkPhysicalDevice, int, VkDisplayKHR, VkResult>)LoadFunction(instance, "vkAcquireDrmDisplayEXT");
        __vkAcquireNextImage2KHR = (delegate* unmanaged<VkDevice, VkAcquireNextImageInfoKHR*, uint*, VkResult>)LoadFunction(instance, "vkAcquireNextImage2KHR");
        __vkAcquireNextImageKHR = (delegate* unmanaged<VkDevice, VkSwapchainKHR, ulong, VkSemaphore, VkFence, uint*, VkResult>)LoadFunction(instance, "vkAcquireNextImageKHR");
        __vkAcquirePerformanceConfigurationINTEL = (delegate* unmanaged<VkDevice, VkPerformanceConfigurationAcquireInfoINTEL*, VkPerformanceConfigurationINTEL*, VkResult>)LoadFunction(instance, "vkAcquirePerformanceConfigurationINTEL");
        __vkAcquireProfilingLockKHR = (delegate* unmanaged<VkDevice, VkAcquireProfilingLockInfoKHR*, VkResult>)LoadFunction(instance, "vkAcquireProfilingLockKHR");
        __vkAcquireWinrtDisplayNV = (delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, VkResult>)LoadFunction(instance, "vkAcquireWinrtDisplayNV");
        __vkAllocateCommandBuffers = (delegate* unmanaged<VkDevice, VkCommandBufferAllocateInfo*, VkCommandBuffer*, VkResult>)LoadFunction(instance, "vkAllocateCommandBuffers");
        __vkAllocateDescriptorSets = (delegate* unmanaged<VkDevice, VkDescriptorSetAllocateInfo*, VkDescriptorSet*, VkResult>)LoadFunction(instance, "vkAllocateDescriptorSets");
        __vkAllocateMemory = (delegate* unmanaged<VkDevice, VkMemoryAllocateInfo*, VkAllocationCallbacks*, VkDeviceMemory*, VkResult>)LoadFunction(instance, "vkAllocateMemory");
        __vkBeginCommandBuffer = (delegate* unmanaged<VkCommandBuffer, VkCommandBufferBeginInfo*, VkResult>)LoadFunction(instance, "vkBeginCommandBuffer");
        __vkBindAccelerationStructureMemoryNV = (delegate* unmanaged<VkDevice, uint, VkBindAccelerationStructureMemoryInfoNV*, VkResult>)LoadFunction(instance, "vkBindAccelerationStructureMemoryNV");
        __vkBindBufferMemory = (delegate* unmanaged<VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize, VkResult>)LoadFunction(instance, "vkBindBufferMemory");
        __vkBindBufferMemory2 = (delegate* unmanaged<VkDevice, uint, VkBindBufferMemoryInfo*, VkResult>)LoadFunction(instance, "vkBindBufferMemory2");
        __vkBindBufferMemory2KHR = (delegate* unmanaged<VkDevice, uint, VkBindBufferMemoryInfo*, VkResult>)LoadFunction(instance, "vkBindBufferMemory2KHR");
        __vkBindImageMemory = (delegate* unmanaged<VkDevice, VkImage, VkDeviceMemory, VkDeviceSize, VkResult>)LoadFunction(instance, "vkBindImageMemory");
        __vkBindImageMemory2 = (delegate* unmanaged<VkDevice, uint, VkBindImageMemoryInfo*, VkResult>)LoadFunction(instance, "vkBindImageMemory2");
        __vkBindImageMemory2KHR = (delegate* unmanaged<VkDevice, uint, VkBindImageMemoryInfo*, VkResult>)LoadFunction(instance, "vkBindImageMemory2KHR");
        __vkBuildAccelerationStructuresKHR = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, uint, VkAccelerationStructureBuildGeometryInfoKHR*, VkAccelerationStructureBuildRangeInfoKHR**, VkResult>)LoadFunction(instance, "vkBuildAccelerationStructuresKHR");
        __vkCmdBeginConditionalRenderingEXT = (delegate* unmanaged<VkCommandBuffer, VkConditionalRenderingBeginInfoEXT*, void>)LoadFunction(instance, "vkCmdBeginConditionalRenderingEXT");
        __vkCmdBeginDebugUtilsLabelEXT = (delegate* unmanaged<VkCommandBuffer, VkDebugUtilsLabelEXT*, void>)LoadFunction(instance, "vkCmdBeginDebugUtilsLabelEXT");
        __vkCmdBeginQuery = (delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, VkQueryControlFlags, void>)LoadFunction(instance, "vkCmdBeginQuery");
        __vkCmdBeginQueryIndexedEXT = (delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, VkQueryControlFlags, uint, void>)LoadFunction(instance, "vkCmdBeginQueryIndexedEXT");
        __vkCmdBeginRendering = (delegate* unmanaged<VkCommandBuffer, VkRenderingInfo*, void>)LoadFunction(instance, "vkCmdBeginRendering");
        __vkCmdBeginRenderingKHR = (delegate* unmanaged<VkCommandBuffer, VkRenderingInfo*, void>)LoadFunction(instance, "vkCmdBeginRenderingKHR");
        __vkCmdBeginRenderPass = (delegate* unmanaged<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassContents, void>)LoadFunction(instance, "vkCmdBeginRenderPass");
        __vkCmdBeginRenderPass2 = (delegate* unmanaged<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void>)LoadFunction(instance, "vkCmdBeginRenderPass2");
        __vkCmdBeginRenderPass2KHR = (delegate* unmanaged<VkCommandBuffer, VkRenderPassBeginInfo*, VkSubpassBeginInfo*, void>)LoadFunction(instance, "vkCmdBeginRenderPass2KHR");
        __vkCmdBeginTransformFeedbackEXT = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, void>)LoadFunction(instance, "vkCmdBeginTransformFeedbackEXT");
        __vkCmdBindDescriptorSets = (delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkDescriptorSet*, uint, uint*, void>)LoadFunction(instance, "vkCmdBindDescriptorSets");
        __vkCmdBindIndexBuffer = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType, void>)LoadFunction(instance, "vkCmdBindIndexBuffer");
        __vkCmdBindInvocationMaskHUAWEI = (delegate* unmanaged<VkCommandBuffer, VkImageView, VkImageLayout, void>)LoadFunction(instance, "vkCmdBindInvocationMaskHUAWEI");
        __vkCmdBindPipeline = (delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, void>)LoadFunction(instance, "vkCmdBindPipeline");
        __vkCmdBindPipelineShaderGroupNV = (delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipeline, uint, void>)LoadFunction(instance, "vkCmdBindPipelineShaderGroupNV");
        __vkCmdBindShadingRateImageNV = (delegate* unmanaged<VkCommandBuffer, VkImageView, VkImageLayout, void>)LoadFunction(instance, "vkCmdBindShadingRateImageNV");
        __vkCmdBindTransformFeedbackBuffersEXT = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, void>)LoadFunction(instance, "vkCmdBindTransformFeedbackBuffersEXT");
        __vkCmdBindVertexBuffers = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, void>)LoadFunction(instance, "vkCmdBindVertexBuffers");
        __vkCmdBindVertexBuffers2 = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, VkDeviceSize*, void>)LoadFunction(instance, "vkCmdBindVertexBuffers2");
        __vkCmdBindVertexBuffers2EXT = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, VkDeviceSize*, VkDeviceSize*, void>)LoadFunction(instance, "vkCmdBindVertexBuffers2EXT");
        __vkCmdBlitImage = (delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageBlit*, VkFilter, void>)LoadFunction(instance, "vkCmdBlitImage");
        __vkCmdBlitImage2 = (delegate* unmanaged<VkCommandBuffer, VkBlitImageInfo2*, void>)LoadFunction(instance, "vkCmdBlitImage2");
        __vkCmdBlitImage2KHR = (delegate* unmanaged<VkCommandBuffer, VkBlitImageInfo2*, void>)LoadFunction(instance, "vkCmdBlitImage2KHR");
        __vkCmdBuildAccelerationStructureNV = (delegate* unmanaged<VkCommandBuffer, VkAccelerationStructureInfoNV*, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize, void>)LoadFunction(instance, "vkCmdBuildAccelerationStructureNV");
        __vkCmdBuildAccelerationStructuresIndirectKHR = (delegate* unmanaged<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR*, VkDeviceAddress*, uint*, uint**, void>)LoadFunction(instance, "vkCmdBuildAccelerationStructuresIndirectKHR");
        __vkCmdBuildAccelerationStructuresKHR = (delegate* unmanaged<VkCommandBuffer, uint, VkAccelerationStructureBuildGeometryInfoKHR*, VkAccelerationStructureBuildRangeInfoKHR**, void>)LoadFunction(instance, "vkCmdBuildAccelerationStructuresKHR");
        __vkCmdClearAttachments = (delegate* unmanaged<VkCommandBuffer, uint, VkClearAttachment*, uint, VkClearRect*, void>)LoadFunction(instance, "vkCmdClearAttachments");
        __vkCmdClearColorImage = (delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkClearColorValue*, uint, VkImageSubresourceRange*, void>)LoadFunction(instance, "vkCmdClearColorImage");
        __vkCmdClearDepthStencilImage = (delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkClearDepthStencilValue*, uint, VkImageSubresourceRange*, void>)LoadFunction(instance, "vkCmdClearDepthStencilImage");
        __vkCmdCopyAccelerationStructureKHR = (delegate* unmanaged<VkCommandBuffer, VkCopyAccelerationStructureInfoKHR*, void>)LoadFunction(instance, "vkCmdCopyAccelerationStructureKHR");
        __vkCmdCopyAccelerationStructureNV = (delegate* unmanaged<VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeKHR, void>)LoadFunction(instance, "vkCmdCopyAccelerationStructureNV");
        __vkCmdCopyAccelerationStructureToMemoryKHR = (delegate* unmanaged<VkCommandBuffer, VkCopyAccelerationStructureToMemoryInfoKHR*, void>)LoadFunction(instance, "vkCmdCopyAccelerationStructureToMemoryKHR");
        __vkCmdCopyBuffer = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkBuffer, uint, VkBufferCopy*, void>)LoadFunction(instance, "vkCmdCopyBuffer");
        __vkCmdCopyBuffer2 = (delegate* unmanaged<VkCommandBuffer, VkCopyBufferInfo2*, void>)LoadFunction(instance, "vkCmdCopyBuffer2");
        __vkCmdCopyBuffer2KHR = (delegate* unmanaged<VkCommandBuffer, VkCopyBufferInfo2*, void>)LoadFunction(instance, "vkCmdCopyBuffer2KHR");
        __vkCmdCopyBufferToImage = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, uint, VkBufferImageCopy*, void>)LoadFunction(instance, "vkCmdCopyBufferToImage");
        __vkCmdCopyBufferToImage2 = (delegate* unmanaged<VkCommandBuffer, VkCopyBufferToImageInfo2*, void>)LoadFunction(instance, "vkCmdCopyBufferToImage2");
        __vkCmdCopyBufferToImage2KHR = (delegate* unmanaged<VkCommandBuffer, VkCopyBufferToImageInfo2*, void>)LoadFunction(instance, "vkCmdCopyBufferToImage2KHR");
        __vkCmdCopyImage = (delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageCopy*, void>)LoadFunction(instance, "vkCmdCopyImage");
        __vkCmdCopyImage2 = (delegate* unmanaged<VkCommandBuffer, VkCopyImageInfo2*, void>)LoadFunction(instance, "vkCmdCopyImage2");
        __vkCmdCopyImage2KHR = (delegate* unmanaged<VkCommandBuffer, VkCopyImageInfo2*, void>)LoadFunction(instance, "vkCmdCopyImage2KHR");
        __vkCmdCopyImageToBuffer = (delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, uint, VkBufferImageCopy*, void>)LoadFunction(instance, "vkCmdCopyImageToBuffer");
        __vkCmdCopyImageToBuffer2 = (delegate* unmanaged<VkCommandBuffer, VkCopyImageToBufferInfo2*, void>)LoadFunction(instance, "vkCmdCopyImageToBuffer2");
        __vkCmdCopyImageToBuffer2KHR = (delegate* unmanaged<VkCommandBuffer, VkCopyImageToBufferInfo2*, void>)LoadFunction(instance, "vkCmdCopyImageToBuffer2KHR");
        __vkCmdCopyMemoryToAccelerationStructureKHR = (delegate* unmanaged<VkCommandBuffer, VkCopyMemoryToAccelerationStructureInfoKHR*, void>)LoadFunction(instance, "vkCmdCopyMemoryToAccelerationStructureKHR");
        __vkCmdCopyQueryPoolResults = (delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, uint, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags, void>)LoadFunction(instance, "vkCmdCopyQueryPoolResults");
        __vkCmdCuLaunchKernelNVX = (delegate* unmanaged<VkCommandBuffer, VkCuLaunchInfoNVX*, void>)LoadFunction(instance, "vkCmdCuLaunchKernelNVX");
        __vkCmdDebugMarkerBeginEXT = (delegate* unmanaged<VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*, void>)LoadFunction(instance, "vkCmdDebugMarkerBeginEXT");
        __vkCmdDebugMarkerEndEXT = (delegate* unmanaged<VkCommandBuffer, void>)LoadFunction(instance, "vkCmdDebugMarkerEndEXT");
        __vkCmdDebugMarkerInsertEXT = (delegate* unmanaged<VkCommandBuffer, VkDebugMarkerMarkerInfoEXT*, void>)LoadFunction(instance, "vkCmdDebugMarkerInsertEXT");
        __vkCmdDispatch = (delegate* unmanaged<VkCommandBuffer, uint, uint, uint, void>)LoadFunction(instance, "vkCmdDispatch");
        __vkCmdDispatchBase = (delegate* unmanaged<VkCommandBuffer, uint, uint, uint, uint, uint, uint, void>)LoadFunction(instance, "vkCmdDispatchBase");
        __vkCmdDispatchBaseKHR = (delegate* unmanaged<VkCommandBuffer, uint, uint, uint, uint, uint, uint, void>)LoadFunction(instance, "vkCmdDispatchBaseKHR");
        __vkCmdDispatchIndirect = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, void>)LoadFunction(instance, "vkCmdDispatchIndirect");
        __vkCmdDraw = (delegate* unmanaged<VkCommandBuffer, uint, uint, uint, uint, void>)LoadFunction(instance, "vkCmdDraw");
        __vkCmdDrawIndexed = (delegate* unmanaged<VkCommandBuffer, uint, uint, uint, int, uint, void>)LoadFunction(instance, "vkCmdDrawIndexed");
        __vkCmdDrawIndexedIndirect = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void>)LoadFunction(instance, "vkCmdDrawIndexedIndirect");
        __vkCmdDrawIndexedIndirectCount = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)LoadFunction(instance, "vkCmdDrawIndexedIndirectCount");
        __vkCmdDrawIndexedIndirectCountAMD = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)LoadFunction(instance, "vkCmdDrawIndexedIndirectCountAMD");
        __vkCmdDrawIndexedIndirectCountKHR = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)LoadFunction(instance, "vkCmdDrawIndexedIndirectCountKHR");
        __vkCmdDrawIndirect = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void>)LoadFunction(instance, "vkCmdDrawIndirect");
        __vkCmdDrawIndirectByteCountEXT = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer, VkDeviceSize, uint, uint, void>)LoadFunction(instance, "vkCmdDrawIndirectByteCountEXT");
        __vkCmdDrawIndirectCount = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)LoadFunction(instance, "vkCmdDrawIndirectCount");
        __vkCmdDrawIndirectCountAMD = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)LoadFunction(instance, "vkCmdDrawIndirectCountAMD");
        __vkCmdDrawIndirectCountKHR = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)LoadFunction(instance, "vkCmdDrawIndirectCountKHR");
        __vkCmdDrawMeshTasksIndirectCountNV = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, uint, uint, void>)LoadFunction(instance, "vkCmdDrawMeshTasksIndirectCountNV");
        __vkCmdDrawMeshTasksIndirectNV = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, uint, uint, void>)LoadFunction(instance, "vkCmdDrawMeshTasksIndirectNV");
        __vkCmdDrawMeshTasksNV = (delegate* unmanaged<VkCommandBuffer, uint, uint, void>)LoadFunction(instance, "vkCmdDrawMeshTasksNV");
        __vkCmdDrawMultiEXT = (delegate* unmanaged<VkCommandBuffer, uint, VkMultiDrawInfoEXT*, uint, uint, uint, void>)LoadFunction(instance, "vkCmdDrawMultiEXT");
        __vkCmdDrawMultiIndexedEXT = (delegate* unmanaged<VkCommandBuffer, uint, VkMultiDrawIndexedInfoEXT*, uint, uint, uint, int*, void>)LoadFunction(instance, "vkCmdDrawMultiIndexedEXT");
        __vkCmdEndConditionalRenderingEXT = (delegate* unmanaged<VkCommandBuffer, void>)LoadFunction(instance, "vkCmdEndConditionalRenderingEXT");
        __vkCmdEndDebugUtilsLabelEXT = (delegate* unmanaged<VkCommandBuffer, void>)LoadFunction(instance, "vkCmdEndDebugUtilsLabelEXT");
        __vkCmdEndQuery = (delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, void>)LoadFunction(instance, "vkCmdEndQuery");
        __vkCmdEndQueryIndexedEXT = (delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, uint, void>)LoadFunction(instance, "vkCmdEndQueryIndexedEXT");
        __vkCmdEndRendering = (delegate* unmanaged<VkCommandBuffer, void>)LoadFunction(instance, "vkCmdEndRendering");
        __vkCmdEndRenderingKHR = (delegate* unmanaged<VkCommandBuffer, void>)LoadFunction(instance, "vkCmdEndRenderingKHR");
        __vkCmdEndRenderPass = (delegate* unmanaged<VkCommandBuffer, void>)LoadFunction(instance, "vkCmdEndRenderPass");
        __vkCmdEndRenderPass2 = (delegate* unmanaged<VkCommandBuffer, VkSubpassEndInfo*, void>)LoadFunction(instance, "vkCmdEndRenderPass2");
        __vkCmdEndRenderPass2KHR = (delegate* unmanaged<VkCommandBuffer, VkSubpassEndInfo*, void>)LoadFunction(instance, "vkCmdEndRenderPass2KHR");
        __vkCmdEndTransformFeedbackEXT = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkBuffer*, VkDeviceSize*, void>)LoadFunction(instance, "vkCmdEndTransformFeedbackEXT");
        __vkCmdExecuteCommands = (delegate* unmanaged<VkCommandBuffer, uint, VkCommandBuffer*, void>)LoadFunction(instance, "vkCmdExecuteCommands");
        __vkCmdExecuteGeneratedCommandsNV = (delegate* unmanaged<VkCommandBuffer, VkBool32, VkGeneratedCommandsInfoNV*, void>)LoadFunction(instance, "vkCmdExecuteGeneratedCommandsNV");
        __vkCmdFillBuffer = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, uint, void>)LoadFunction(instance, "vkCmdFillBuffer");
        __vkCmdInsertDebugUtilsLabelEXT = (delegate* unmanaged<VkCommandBuffer, VkDebugUtilsLabelEXT*, void>)LoadFunction(instance, "vkCmdInsertDebugUtilsLabelEXT");
        __vkCmdNextSubpass = (delegate* unmanaged<VkCommandBuffer, VkSubpassContents, void>)LoadFunction(instance, "vkCmdNextSubpass");
        __vkCmdNextSubpass2 = (delegate* unmanaged<VkCommandBuffer, VkSubpassBeginInfo*, VkSubpassEndInfo*, void>)LoadFunction(instance, "vkCmdNextSubpass2");
        __vkCmdNextSubpass2KHR = (delegate* unmanaged<VkCommandBuffer, VkSubpassBeginInfo*, VkSubpassEndInfo*, void>)LoadFunction(instance, "vkCmdNextSubpass2KHR");
        __vkCmdPipelineBarrier = (delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, uint, VkMemoryBarrier*, uint, VkBufferMemoryBarrier*, uint, VkImageMemoryBarrier*, void>)LoadFunction(instance, "vkCmdPipelineBarrier");
        __vkCmdPipelineBarrier2 = (delegate* unmanaged<VkCommandBuffer, VkDependencyInfo*, void>)LoadFunction(instance, "vkCmdPipelineBarrier2");
        __vkCmdPipelineBarrier2KHR = (delegate* unmanaged<VkCommandBuffer, VkDependencyInfo*, void>)LoadFunction(instance, "vkCmdPipelineBarrier2KHR");
        __vkCmdPreprocessGeneratedCommandsNV = (delegate* unmanaged<VkCommandBuffer, VkGeneratedCommandsInfoNV*, void>)LoadFunction(instance, "vkCmdPreprocessGeneratedCommandsNV");
        __vkCmdPushConstants = (delegate* unmanaged<VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, uint, uint, void*, void>)LoadFunction(instance, "vkCmdPushConstants");
        __vkCmdPushDescriptorSetKHR = (delegate* unmanaged<VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, uint, uint, VkWriteDescriptorSet*, void>)LoadFunction(instance, "vkCmdPushDescriptorSetKHR");
        __vkCmdPushDescriptorSetWithTemplateKHR = (delegate* unmanaged<VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, uint, void*, void>)LoadFunction(instance, "vkCmdPushDescriptorSetWithTemplateKHR");
        __vkCmdResetEvent = (delegate* unmanaged<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void>)LoadFunction(instance, "vkCmdResetEvent");
        __vkCmdResetEvent2 = (delegate* unmanaged<VkCommandBuffer, VkEvent, VkPipelineStageFlags2, void>)LoadFunction(instance, "vkCmdResetEvent2");
        __vkCmdResetEvent2KHR = (delegate* unmanaged<VkCommandBuffer, VkEvent, VkPipelineStageFlags2, void>)LoadFunction(instance, "vkCmdResetEvent2KHR");
        __vkCmdResetQueryPool = (delegate* unmanaged<VkCommandBuffer, VkQueryPool, uint, uint, void>)LoadFunction(instance, "vkCmdResetQueryPool");
        __vkCmdResolveImage = (delegate* unmanaged<VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, uint, VkImageResolve*, void>)LoadFunction(instance, "vkCmdResolveImage");
        __vkCmdResolveImage2 = (delegate* unmanaged<VkCommandBuffer, VkResolveImageInfo2*, void>)LoadFunction(instance, "vkCmdResolveImage2");
        __vkCmdResolveImage2KHR = (delegate* unmanaged<VkCommandBuffer, VkResolveImageInfo2*, void>)LoadFunction(instance, "vkCmdResolveImage2KHR");
        __vkCmdSetBlendConstants = (delegate* unmanaged<VkCommandBuffer, float*, void>)LoadFunction(instance, "vkCmdSetBlendConstants");
        __vkCmdSetCheckpointNV = (delegate* unmanaged<VkCommandBuffer, void*, void>)LoadFunction(instance, "vkCmdSetCheckpointNV");
        __vkCmdSetCoarseSampleOrderNV = (delegate* unmanaged<VkCommandBuffer, VkCoarseSampleOrderTypeNV, uint, VkCoarseSampleOrderCustomNV*, void>)LoadFunction(instance, "vkCmdSetCoarseSampleOrderNV");
        __vkCmdSetColorWriteEnableEXT = (delegate* unmanaged<VkCommandBuffer, uint, VkBool32*, void>)LoadFunction(instance, "vkCmdSetColorWriteEnableEXT");
        __vkCmdSetCullMode = (delegate* unmanaged<VkCommandBuffer, VkCullModeFlags, void>)LoadFunction(instance, "vkCmdSetCullMode");
        __vkCmdSetCullModeEXT = (delegate* unmanaged<VkCommandBuffer, VkCullModeFlags, void>)LoadFunction(instance, "vkCmdSetCullModeEXT");
        __vkCmdSetDepthBias = (delegate* unmanaged<VkCommandBuffer, float, float, float, void>)LoadFunction(instance, "vkCmdSetDepthBias");
        __vkCmdSetDepthBiasEnable = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)LoadFunction(instance, "vkCmdSetDepthBiasEnable");
        __vkCmdSetDepthBiasEnableEXT = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)LoadFunction(instance, "vkCmdSetDepthBiasEnableEXT");
        __vkCmdSetDepthBounds = (delegate* unmanaged<VkCommandBuffer, float, float, void>)LoadFunction(instance, "vkCmdSetDepthBounds");
        __vkCmdSetDepthBoundsTestEnable = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)LoadFunction(instance, "vkCmdSetDepthBoundsTestEnable");
        __vkCmdSetDepthBoundsTestEnableEXT = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)LoadFunction(instance, "vkCmdSetDepthBoundsTestEnableEXT");
        __vkCmdSetDepthCompareOp = (delegate* unmanaged<VkCommandBuffer, VkCompareOp, void>)LoadFunction(instance, "vkCmdSetDepthCompareOp");
        __vkCmdSetDepthCompareOpEXT = (delegate* unmanaged<VkCommandBuffer, VkCompareOp, void>)LoadFunction(instance, "vkCmdSetDepthCompareOpEXT");
        __vkCmdSetDepthTestEnable = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)LoadFunction(instance, "vkCmdSetDepthTestEnable");
        __vkCmdSetDepthTestEnableEXT = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)LoadFunction(instance, "vkCmdSetDepthTestEnableEXT");
        __vkCmdSetDepthWriteEnable = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)LoadFunction(instance, "vkCmdSetDepthWriteEnable");
        __vkCmdSetDepthWriteEnableEXT = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)LoadFunction(instance, "vkCmdSetDepthWriteEnableEXT");
        __vkCmdSetDeviceMask = (delegate* unmanaged<VkCommandBuffer, uint, void>)LoadFunction(instance, "vkCmdSetDeviceMask");
        __vkCmdSetDeviceMaskKHR = (delegate* unmanaged<VkCommandBuffer, uint, void>)LoadFunction(instance, "vkCmdSetDeviceMaskKHR");
        __vkCmdSetDiscardRectangleEXT = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkRect2D*, void>)LoadFunction(instance, "vkCmdSetDiscardRectangleEXT");
        __vkCmdSetEvent = (delegate* unmanaged<VkCommandBuffer, VkEvent, VkPipelineStageFlags, void>)LoadFunction(instance, "vkCmdSetEvent");
        __vkCmdSetEvent2 = (delegate* unmanaged<VkCommandBuffer, VkEvent, VkDependencyInfo*, void>)LoadFunction(instance, "vkCmdSetEvent2");
        __vkCmdSetEvent2KHR = (delegate* unmanaged<VkCommandBuffer, VkEvent, VkDependencyInfo*, void>)LoadFunction(instance, "vkCmdSetEvent2KHR");
        __vkCmdSetExclusiveScissorNV = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkRect2D*, void>)LoadFunction(instance, "vkCmdSetExclusiveScissorNV");
        __vkCmdSetFragmentShadingRateEnumNV = (delegate* unmanaged<VkCommandBuffer, VkFragmentShadingRateNV, VkFragmentShadingRateCombinerOpKHR*, void>)LoadFunction(instance, "vkCmdSetFragmentShadingRateEnumNV");
        __vkCmdSetFragmentShadingRateKHR = (delegate* unmanaged<VkCommandBuffer, VkExtent2D*, VkFragmentShadingRateCombinerOpKHR*, void>)LoadFunction(instance, "vkCmdSetFragmentShadingRateKHR");
        __vkCmdSetFrontFace = (delegate* unmanaged<VkCommandBuffer, VkFrontFace, void>)LoadFunction(instance, "vkCmdSetFrontFace");
        __vkCmdSetFrontFaceEXT = (delegate* unmanaged<VkCommandBuffer, VkFrontFace, void>)LoadFunction(instance, "vkCmdSetFrontFaceEXT");
        __vkCmdSetLineStippleEXT = (delegate* unmanaged<VkCommandBuffer, uint, ushort, void>)LoadFunction(instance, "vkCmdSetLineStippleEXT");
        __vkCmdSetLineWidth = (delegate* unmanaged<VkCommandBuffer, float, void>)LoadFunction(instance, "vkCmdSetLineWidth");
        __vkCmdSetLogicOpEXT = (delegate* unmanaged<VkCommandBuffer, VkLogicOp, void>)LoadFunction(instance, "vkCmdSetLogicOpEXT");
        __vkCmdSetPatchControlPointsEXT = (delegate* unmanaged<VkCommandBuffer, uint, void>)LoadFunction(instance, "vkCmdSetPatchControlPointsEXT");
        __vkCmdSetPerformanceMarkerINTEL = (delegate* unmanaged<VkCommandBuffer, VkPerformanceMarkerInfoINTEL*, VkResult>)LoadFunction(instance, "vkCmdSetPerformanceMarkerINTEL");
        __vkCmdSetPerformanceOverrideINTEL = (delegate* unmanaged<VkCommandBuffer, VkPerformanceOverrideInfoINTEL*, VkResult>)LoadFunction(instance, "vkCmdSetPerformanceOverrideINTEL");
        __vkCmdSetPerformanceStreamMarkerINTEL = (delegate* unmanaged<VkCommandBuffer, VkPerformanceStreamMarkerInfoINTEL*, VkResult>)LoadFunction(instance, "vkCmdSetPerformanceStreamMarkerINTEL");
        __vkCmdSetPrimitiveRestartEnable = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)LoadFunction(instance, "vkCmdSetPrimitiveRestartEnable");
        __vkCmdSetPrimitiveRestartEnableEXT = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)LoadFunction(instance, "vkCmdSetPrimitiveRestartEnableEXT");
        __vkCmdSetPrimitiveTopology = (delegate* unmanaged<VkCommandBuffer, VkPrimitiveTopology, void>)LoadFunction(instance, "vkCmdSetPrimitiveTopology");
        __vkCmdSetPrimitiveTopologyEXT = (delegate* unmanaged<VkCommandBuffer, VkPrimitiveTopology, void>)LoadFunction(instance, "vkCmdSetPrimitiveTopologyEXT");
        __vkCmdSetRasterizerDiscardEnable = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)LoadFunction(instance, "vkCmdSetRasterizerDiscardEnable");
        __vkCmdSetRasterizerDiscardEnableEXT = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)LoadFunction(instance, "vkCmdSetRasterizerDiscardEnableEXT");
        __vkCmdSetRayTracingPipelineStackSizeKHR = (delegate* unmanaged<VkCommandBuffer, uint, void>)LoadFunction(instance, "vkCmdSetRayTracingPipelineStackSizeKHR");
        __vkCmdSetSampleLocationsEXT = (delegate* unmanaged<VkCommandBuffer, VkSampleLocationsInfoEXT*, void>)LoadFunction(instance, "vkCmdSetSampleLocationsEXT");
        __vkCmdSetScissor = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkRect2D*, void>)LoadFunction(instance, "vkCmdSetScissor");
        __vkCmdSetScissorWithCount = (delegate* unmanaged<VkCommandBuffer, uint, VkRect2D*, void>)LoadFunction(instance, "vkCmdSetScissorWithCount");
        __vkCmdSetScissorWithCountEXT = (delegate* unmanaged<VkCommandBuffer, uint, VkRect2D*, void>)LoadFunction(instance, "vkCmdSetScissorWithCountEXT");
        __vkCmdSetStencilCompareMask = (delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, uint, void>)LoadFunction(instance, "vkCmdSetStencilCompareMask");
        __vkCmdSetStencilOp = (delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp, void>)LoadFunction(instance, "vkCmdSetStencilOp");
        __vkCmdSetStencilOpEXT = (delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp, void>)LoadFunction(instance, "vkCmdSetStencilOpEXT");
        __vkCmdSetStencilReference = (delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, uint, void>)LoadFunction(instance, "vkCmdSetStencilReference");
        __vkCmdSetStencilTestEnable = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)LoadFunction(instance, "vkCmdSetStencilTestEnable");
        __vkCmdSetStencilTestEnableEXT = (delegate* unmanaged<VkCommandBuffer, VkBool32, void>)LoadFunction(instance, "vkCmdSetStencilTestEnableEXT");
        __vkCmdSetStencilWriteMask = (delegate* unmanaged<VkCommandBuffer, VkStencilFaceFlags, uint, void>)LoadFunction(instance, "vkCmdSetStencilWriteMask");
        __vkCmdSetVertexInputEXT = (delegate* unmanaged<VkCommandBuffer, uint, VkVertexInputBindingDescription2EXT*, uint, VkVertexInputAttributeDescription2EXT*, void>)LoadFunction(instance, "vkCmdSetVertexInputEXT");
        __vkCmdSetViewport = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkViewport*, void>)LoadFunction(instance, "vkCmdSetViewport");
        __vkCmdSetViewportShadingRatePaletteNV = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkShadingRatePaletteNV*, void>)LoadFunction(instance, "vkCmdSetViewportShadingRatePaletteNV");
        __vkCmdSetViewportWithCount = (delegate* unmanaged<VkCommandBuffer, uint, VkViewport*, void>)LoadFunction(instance, "vkCmdSetViewportWithCount");
        __vkCmdSetViewportWithCountEXT = (delegate* unmanaged<VkCommandBuffer, uint, VkViewport*, void>)LoadFunction(instance, "vkCmdSetViewportWithCountEXT");
        __vkCmdSetViewportWScalingNV = (delegate* unmanaged<VkCommandBuffer, uint, uint, VkViewportWScalingNV*, void>)LoadFunction(instance, "vkCmdSetViewportWScalingNV");
        __vkCmdSubpassShadingHUAWEI = (delegate* unmanaged<VkCommandBuffer, void>)LoadFunction(instance, "vkCmdSubpassShadingHUAWEI");
        __vkCmdTraceRaysIndirectKHR = (delegate* unmanaged<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkDeviceAddress, void>)LoadFunction(instance, "vkCmdTraceRaysIndirectKHR");
        __vkCmdTraceRaysKHR = (delegate* unmanaged<VkCommandBuffer, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, VkStridedDeviceAddressRegionKHR*, uint, uint, uint, void>)LoadFunction(instance, "vkCmdTraceRaysKHR");
        __vkCmdTraceRaysNV = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, uint, uint, uint, void>)LoadFunction(instance, "vkCmdTraceRaysNV");
        __vkCmdUpdateBuffer = (delegate* unmanaged<VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, void*, void>)LoadFunction(instance, "vkCmdUpdateBuffer");
        __vkCmdWaitEvents = (delegate* unmanaged<VkCommandBuffer, uint, VkEvent*, VkPipelineStageFlags, VkPipelineStageFlags, uint, VkMemoryBarrier*, uint, VkBufferMemoryBarrier*, uint, VkImageMemoryBarrier*, void>)LoadFunction(instance, "vkCmdWaitEvents");
        __vkCmdWaitEvents2 = (delegate* unmanaged<VkCommandBuffer, uint, VkEvent*, VkDependencyInfo*, void>)LoadFunction(instance, "vkCmdWaitEvents2");
        __vkCmdWaitEvents2KHR = (delegate* unmanaged<VkCommandBuffer, uint, VkEvent*, VkDependencyInfo*, void>)LoadFunction(instance, "vkCmdWaitEvents2KHR");
        __vkCmdWriteAccelerationStructuresPropertiesKHR = (delegate* unmanaged<VkCommandBuffer, uint, VkAccelerationStructureKHR*, VkQueryType, VkQueryPool, uint, void>)LoadFunction(instance, "vkCmdWriteAccelerationStructuresPropertiesKHR");
        __vkCmdWriteAccelerationStructuresPropertiesNV = (delegate* unmanaged<VkCommandBuffer, uint, VkAccelerationStructureNV*, VkQueryType, VkQueryPool, uint, void>)LoadFunction(instance, "vkCmdWriteAccelerationStructuresPropertiesNV");
        __vkCmdWriteBufferMarker2AMD = (delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags2, VkBuffer, VkDeviceSize, uint, void>)LoadFunction(instance, "vkCmdWriteBufferMarker2AMD");
        __vkCmdWriteBufferMarkerAMD = (delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlagBits, VkBuffer, VkDeviceSize, uint, void>)LoadFunction(instance, "vkCmdWriteBufferMarkerAMD");
        __vkCmdWriteTimestamp = (delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlagBits, VkQueryPool, uint, void>)LoadFunction(instance, "vkCmdWriteTimestamp");
        __vkCmdWriteTimestamp2 = (delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint, void>)LoadFunction(instance, "vkCmdWriteTimestamp2");
        __vkCmdWriteTimestamp2KHR = (delegate* unmanaged<VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, uint, void>)LoadFunction(instance, "vkCmdWriteTimestamp2KHR");
        __vkCompileDeferredNV = (delegate* unmanaged<VkDevice, VkPipeline, uint, VkResult>)LoadFunction(instance, "vkCompileDeferredNV");
        __vkCopyAccelerationStructureKHR = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkCopyAccelerationStructureInfoKHR*, VkResult>)LoadFunction(instance, "vkCopyAccelerationStructureKHR");
        __vkCopyAccelerationStructureToMemoryKHR = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkCopyAccelerationStructureToMemoryInfoKHR*, VkResult>)LoadFunction(instance, "vkCopyAccelerationStructureToMemoryKHR");
        __vkCopyMemoryToAccelerationStructureKHR = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkCopyMemoryToAccelerationStructureInfoKHR*, VkResult>)LoadFunction(instance, "vkCopyMemoryToAccelerationStructureKHR");
        __vkCreateAccelerationStructureKHR = (delegate* unmanaged<VkDevice, VkAccelerationStructureCreateInfoKHR*, VkAllocationCallbacks*, VkAccelerationStructureKHR*, VkResult>)LoadFunction(instance, "vkCreateAccelerationStructureKHR");
        __vkCreateAccelerationStructureNV = (delegate* unmanaged<VkDevice, VkAccelerationStructureCreateInfoNV*, VkAllocationCallbacks*, VkAccelerationStructureNV*, VkResult>)LoadFunction(instance, "vkCreateAccelerationStructureNV");
        __vkCreateBuffer = (delegate* unmanaged<VkDevice, VkBufferCreateInfo*, VkAllocationCallbacks*, VkBuffer*, VkResult>)LoadFunction(instance, "vkCreateBuffer");
        __vkCreateBufferView = (delegate* unmanaged<VkDevice, VkBufferViewCreateInfo*, VkAllocationCallbacks*, VkBufferView*, VkResult>)LoadFunction(instance, "vkCreateBufferView");
        __vkCreateCommandPool = (delegate* unmanaged<VkDevice, VkCommandPoolCreateInfo*, VkAllocationCallbacks*, VkCommandPool*, VkResult>)LoadFunction(instance, "vkCreateCommandPool");
        __vkCreateComputePipelines = (delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkComputePipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*, VkResult>)LoadFunction(instance, "vkCreateComputePipelines");
        __vkCreateCuFunctionNVX = (delegate* unmanaged<VkDevice, VkCuFunctionCreateInfoNVX*, VkAllocationCallbacks*, VkCuFunctionNVX*, VkResult>)LoadFunction(instance, "vkCreateCuFunctionNVX");
        __vkCreateCuModuleNVX = (delegate* unmanaged<VkDevice, VkCuModuleCreateInfoNVX*, VkAllocationCallbacks*, VkCuModuleNVX*, VkResult>)LoadFunction(instance, "vkCreateCuModuleNVX");
        __vkCreateDebugReportCallbackEXT = (delegate* unmanaged<VkInstance, VkDebugReportCallbackCreateInfoEXT*, VkAllocationCallbacks*, VkDebugReportCallbackEXT*, VkResult>)LoadFunction(instance, "vkCreateDebugReportCallbackEXT");
        __vkCreateDebugUtilsMessengerEXT = (delegate* unmanaged<VkInstance, VkDebugUtilsMessengerCreateInfoEXT*, VkAllocationCallbacks*, VkDebugUtilsMessengerEXT*, VkResult>)LoadFunction(instance, "vkCreateDebugUtilsMessengerEXT");
        __vkCreateDeferredOperationKHR = (delegate* unmanaged<VkDevice, VkAllocationCallbacks*, VkDeferredOperationKHR*, VkResult>)LoadFunction(instance, "vkCreateDeferredOperationKHR");
        __vkCreateDescriptorPool = (delegate* unmanaged<VkDevice, VkDescriptorPoolCreateInfo*, VkAllocationCallbacks*, VkDescriptorPool*, VkResult>)LoadFunction(instance, "vkCreateDescriptorPool");
        __vkCreateDescriptorSetLayout = (delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkAllocationCallbacks*, VkDescriptorSetLayout*, VkResult>)LoadFunction(instance, "vkCreateDescriptorSetLayout");
        __vkCreateDescriptorUpdateTemplate = (delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult>)LoadFunction(instance, "vkCreateDescriptorUpdateTemplate");
        __vkCreateDescriptorUpdateTemplateKHR = (delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplateCreateInfo*, VkAllocationCallbacks*, VkDescriptorUpdateTemplate*, VkResult>)LoadFunction(instance, "vkCreateDescriptorUpdateTemplateKHR");
        __vkCreateDevice = (delegate* unmanaged<VkPhysicalDevice, VkDeviceCreateInfo*, VkAllocationCallbacks*, VkDevice*, VkResult>)LoadFunction(instance, "vkCreateDevice");
        __vkCreateDisplayModeKHR = (delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, VkDisplayModeCreateInfoKHR*, VkAllocationCallbacks*, VkDisplayModeKHR*, VkResult>)LoadFunction(instance, "vkCreateDisplayModeKHR");
        __vkCreateDisplayPlaneSurfaceKHR = (delegate* unmanaged<VkInstance, VkDisplaySurfaceCreateInfoKHR*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)LoadFunction(instance, "vkCreateDisplayPlaneSurfaceKHR");
        __vkCreateEvent = (delegate* unmanaged<VkDevice, VkEventCreateInfo*, VkAllocationCallbacks*, VkEvent*, VkResult>)LoadFunction(instance, "vkCreateEvent");
        __vkCreateFence = (delegate* unmanaged<VkDevice, VkFenceCreateInfo*, VkAllocationCallbacks*, VkFence*, VkResult>)LoadFunction(instance, "vkCreateFence");
        __vkCreateFramebuffer = (delegate* unmanaged<VkDevice, VkFramebufferCreateInfo*, VkAllocationCallbacks*, VkFramebuffer*, VkResult>)LoadFunction(instance, "vkCreateFramebuffer");
        __vkCreateGraphicsPipelines = (delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkGraphicsPipelineCreateInfo*, VkAllocationCallbacks*, VkPipeline*, VkResult>)LoadFunction(instance, "vkCreateGraphicsPipelines");
        __vkCreateHeadlessSurfaceEXT = (delegate* unmanaged<VkInstance, VkHeadlessSurfaceCreateInfoEXT*, VkAllocationCallbacks*, VkSurfaceKHR*, VkResult>)LoadFunction(instance, "vkCreateHeadlessSurfaceEXT");
        __vkCreateImage = (delegate* unmanaged<VkDevice, VkImageCreateInfo*, VkAllocationCallbacks*, VkImage*, VkResult>)LoadFunction(instance, "vkCreateImage");
        __vkCreateImageView = (delegate* unmanaged<VkDevice, VkImageViewCreateInfo*, VkAllocationCallbacks*, VkImageView*, VkResult>)LoadFunction(instance, "vkCreateImageView");
        __vkCreateIndirectCommandsLayoutNV = (delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutCreateInfoNV*, VkAllocationCallbacks*, VkIndirectCommandsLayoutNV*, VkResult>)LoadFunction(instance, "vkCreateIndirectCommandsLayoutNV");
        __vkCreateInstance = (delegate* unmanaged<VkInstanceCreateInfo*, VkAllocationCallbacks*, VkInstance*, VkResult>)LoadFunction(instance, "vkCreateInstance");
        __vkCreatePipelineCache = (delegate* unmanaged<VkDevice, VkPipelineCacheCreateInfo*, VkAllocationCallbacks*, VkPipelineCache*, VkResult>)LoadFunction(instance, "vkCreatePipelineCache");
        __vkCreatePipelineLayout = (delegate* unmanaged<VkDevice, VkPipelineLayoutCreateInfo*, VkAllocationCallbacks*, VkPipelineLayout*, VkResult>)LoadFunction(instance, "vkCreatePipelineLayout");
        __vkCreatePrivateDataSlot = (delegate* unmanaged<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, VkPrivateDataSlot*, VkResult>)LoadFunction(instance, "vkCreatePrivateDataSlot");
        __vkCreatePrivateDataSlotEXT = (delegate* unmanaged<VkDevice, VkPrivateDataSlotCreateInfo*, VkAllocationCallbacks*, VkPrivateDataSlot*, VkResult>)LoadFunction(instance, "vkCreatePrivateDataSlotEXT");
        __vkCreateQueryPool = (delegate* unmanaged<VkDevice, VkQueryPoolCreateInfo*, VkAllocationCallbacks*, VkQueryPool*, VkResult>)LoadFunction(instance, "vkCreateQueryPool");
        __vkCreateRayTracingPipelinesKHR = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoKHR*, VkAllocationCallbacks*, VkPipeline*, VkResult>)LoadFunction(instance, "vkCreateRayTracingPipelinesKHR");
        __vkCreateRayTracingPipelinesNV = (delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkRayTracingPipelineCreateInfoNV*, VkAllocationCallbacks*, VkPipeline*, VkResult>)LoadFunction(instance, "vkCreateRayTracingPipelinesNV");
        __vkCreateRenderPass = (delegate* unmanaged<VkDevice, VkRenderPassCreateInfo*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)LoadFunction(instance, "vkCreateRenderPass");
        __vkCreateRenderPass2 = (delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)LoadFunction(instance, "vkCreateRenderPass2");
        __vkCreateRenderPass2KHR = (delegate* unmanaged<VkDevice, VkRenderPassCreateInfo2*, VkAllocationCallbacks*, VkRenderPass*, VkResult>)LoadFunction(instance, "vkCreateRenderPass2KHR");
        __vkCreateSampler = (delegate* unmanaged<VkDevice, VkSamplerCreateInfo*, VkAllocationCallbacks*, VkSampler*, VkResult>)LoadFunction(instance, "vkCreateSampler");
        __vkCreateSamplerYcbcrConversion = (delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult>)LoadFunction(instance, "vkCreateSamplerYcbcrConversion");
        __vkCreateSamplerYcbcrConversionKHR = (delegate* unmanaged<VkDevice, VkSamplerYcbcrConversionCreateInfo*, VkAllocationCallbacks*, VkSamplerYcbcrConversion*, VkResult>)LoadFunction(instance, "vkCreateSamplerYcbcrConversionKHR");
        __vkCreateSemaphore = (delegate* unmanaged<VkDevice, VkSemaphoreCreateInfo*, VkAllocationCallbacks*, VkSemaphore*, VkResult>)LoadFunction(instance, "vkCreateSemaphore");
        __vkCreateShaderModule = (delegate* unmanaged<VkDevice, VkShaderModuleCreateInfo*, VkAllocationCallbacks*, VkShaderModule*, VkResult>)LoadFunction(instance, "vkCreateShaderModule");
        __vkCreateSharedSwapchainsKHR = (delegate* unmanaged<VkDevice, uint, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)LoadFunction(instance, "vkCreateSharedSwapchainsKHR");
        __vkCreateSwapchainKHR = (delegate* unmanaged<VkDevice, VkSwapchainCreateInfoKHR*, VkAllocationCallbacks*, VkSwapchainKHR*, VkResult>)LoadFunction(instance, "vkCreateSwapchainKHR");
        __vkCreateValidationCacheEXT = (delegate* unmanaged<VkDevice, VkValidationCacheCreateInfoEXT*, VkAllocationCallbacks*, VkValidationCacheEXT*, VkResult>)LoadFunction(instance, "vkCreateValidationCacheEXT");
        __vkDebugMarkerSetObjectNameEXT = (delegate* unmanaged<VkDevice, VkDebugMarkerObjectNameInfoEXT*, VkResult>)LoadFunction(instance, "vkDebugMarkerSetObjectNameEXT");
        __vkDebugMarkerSetObjectTagEXT = (delegate* unmanaged<VkDevice, VkDebugMarkerObjectTagInfoEXT*, VkResult>)LoadFunction(instance, "vkDebugMarkerSetObjectTagEXT");
        __vkDebugReportMessageEXT = (delegate* unmanaged<VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, ulong, uint, int, byte*, byte*, void>)LoadFunction(instance, "vkDebugReportMessageEXT");
        __vkDeferredOperationJoinKHR = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkResult>)LoadFunction(instance, "vkDeferredOperationJoinKHR");
        __vkDestroyAccelerationStructureKHR = (delegate* unmanaged<VkDevice, VkAccelerationStructureKHR, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyAccelerationStructureKHR");
        __vkDestroyAccelerationStructureNV = (delegate* unmanaged<VkDevice, VkAccelerationStructureNV, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyAccelerationStructureNV");
        __vkDestroyBuffer = (delegate* unmanaged<VkDevice, VkBuffer, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyBuffer");
        __vkDestroyBufferView = (delegate* unmanaged<VkDevice, VkBufferView, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyBufferView");
        __vkDestroyCommandPool = (delegate* unmanaged<VkDevice, VkCommandPool, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyCommandPool");
        __vkDestroyCuFunctionNVX = (delegate* unmanaged<VkDevice, VkCuFunctionNVX, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyCuFunctionNVX");
        __vkDestroyCuModuleNVX = (delegate* unmanaged<VkDevice, VkCuModuleNVX, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyCuModuleNVX");
        __vkDestroyDebugReportCallbackEXT = (delegate* unmanaged<VkInstance, VkDebugReportCallbackEXT, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyDebugReportCallbackEXT");
        __vkDestroyDebugUtilsMessengerEXT = (delegate* unmanaged<VkInstance, VkDebugUtilsMessengerEXT, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyDebugUtilsMessengerEXT");
        __vkDestroyDeferredOperationKHR = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyDeferredOperationKHR");
        __vkDestroyDescriptorPool = (delegate* unmanaged<VkDevice, VkDescriptorPool, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyDescriptorPool");
        __vkDestroyDescriptorSetLayout = (delegate* unmanaged<VkDevice, VkDescriptorSetLayout, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyDescriptorSetLayout");
        __vkDestroyDescriptorUpdateTemplate = (delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplate, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyDescriptorUpdateTemplate");
        __vkDestroyDescriptorUpdateTemplateKHR = (delegate* unmanaged<VkDevice, VkDescriptorUpdateTemplate, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyDescriptorUpdateTemplateKHR");
        __vkDestroyDevice = (delegate* unmanaged<VkDevice, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyDevice");
        __vkDestroyEvent = (delegate* unmanaged<VkDevice, VkEvent, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyEvent");
        __vkDestroyFence = (delegate* unmanaged<VkDevice, VkFence, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyFence");
        __vkDestroyFramebuffer = (delegate* unmanaged<VkDevice, VkFramebuffer, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyFramebuffer");
        __vkDestroyImage = (delegate* unmanaged<VkDevice, VkImage, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyImage");
        __vkDestroyImageView = (delegate* unmanaged<VkDevice, VkImageView, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyImageView");
        __vkDestroyIndirectCommandsLayoutNV = (delegate* unmanaged<VkDevice, VkIndirectCommandsLayoutNV, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyIndirectCommandsLayoutNV");
        __vkDestroyInstance = (delegate* unmanaged<VkInstance, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyInstance");
        __vkDestroyPipeline = (delegate* unmanaged<VkDevice, VkPipeline, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyPipeline");
        __vkDestroyPipelineCache = (delegate* unmanaged<VkDevice, VkPipelineCache, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyPipelineCache");
        __vkDestroyPipelineLayout = (delegate* unmanaged<VkDevice, VkPipelineLayout, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyPipelineLayout");
        __vkDestroyPrivateDataSlot = (delegate* unmanaged<VkDevice, VkPrivateDataSlot, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyPrivateDataSlot");
        __vkDestroyPrivateDataSlotEXT = (delegate* unmanaged<VkDevice, VkPrivateDataSlot, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyPrivateDataSlotEXT");
        __vkDestroyQueryPool = (delegate* unmanaged<VkDevice, VkQueryPool, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyQueryPool");
        __vkDestroyRenderPass = (delegate* unmanaged<VkDevice, VkRenderPass, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyRenderPass");
        __vkDestroySampler = (delegate* unmanaged<VkDevice, VkSampler, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroySampler");
        __vkDestroySamplerYcbcrConversion = (delegate* unmanaged<VkDevice, VkSamplerYcbcrConversion, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroySamplerYcbcrConversion");
        __vkDestroySamplerYcbcrConversionKHR = (delegate* unmanaged<VkDevice, VkSamplerYcbcrConversion, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroySamplerYcbcrConversionKHR");
        __vkDestroySemaphore = (delegate* unmanaged<VkDevice, VkSemaphore, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroySemaphore");
        __vkDestroyShaderModule = (delegate* unmanaged<VkDevice, VkShaderModule, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyShaderModule");
        __vkDestroySurfaceKHR = (delegate* unmanaged<VkInstance, VkSurfaceKHR, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroySurfaceKHR");
        __vkDestroySwapchainKHR = (delegate* unmanaged<VkDevice, VkSwapchainKHR, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroySwapchainKHR");
        __vkDestroyValidationCacheEXT = (delegate* unmanaged<VkDevice, VkValidationCacheEXT, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkDestroyValidationCacheEXT");
        __vkDeviceWaitIdle = (delegate* unmanaged<VkDevice, VkResult>)LoadFunction(instance, "vkDeviceWaitIdle");
        __vkDisplayPowerControlEXT = (delegate* unmanaged<VkDevice, VkDisplayKHR, VkDisplayPowerInfoEXT*, VkResult>)LoadFunction(instance, "vkDisplayPowerControlEXT");
        __vkEndCommandBuffer = (delegate* unmanaged<VkCommandBuffer, VkResult>)LoadFunction(instance, "vkEndCommandBuffer");
        __vkEnumerateDeviceExtensionProperties = (delegate* unmanaged<VkPhysicalDevice, byte*, uint*, VkExtensionProperties*, VkResult>)LoadFunction(instance, "vkEnumerateDeviceExtensionProperties");
        __vkEnumerateDeviceLayerProperties = (delegate* unmanaged<VkPhysicalDevice, uint*, VkLayerProperties*, VkResult>)LoadFunction(instance, "vkEnumerateDeviceLayerProperties");
        __vkEnumerateInstanceExtensionProperties = (delegate* unmanaged<byte*, uint*, VkExtensionProperties*, VkResult>)LoadFunction(instance, "vkEnumerateInstanceExtensionProperties");
        __vkEnumerateInstanceLayerProperties = (delegate* unmanaged<uint*, VkLayerProperties*, VkResult>)LoadFunction(instance, "vkEnumerateInstanceLayerProperties");
        __vkEnumerateInstanceVersion = (delegate* unmanaged<uint*, VkResult>)LoadFunction(instance, "vkEnumerateInstanceVersion");
        __vkEnumeratePhysicalDeviceGroups = (delegate* unmanaged<VkInstance, uint*, VkPhysicalDeviceGroupProperties*, VkResult>)LoadFunction(instance, "vkEnumeratePhysicalDeviceGroups");
        __vkEnumeratePhysicalDeviceGroupsKHR = (delegate* unmanaged<VkInstance, uint*, VkPhysicalDeviceGroupProperties*, VkResult>)LoadFunction(instance, "vkEnumeratePhysicalDeviceGroupsKHR");
        __vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = (delegate* unmanaged<VkPhysicalDevice, uint, uint*, VkPerformanceCounterKHR*, VkPerformanceCounterDescriptionKHR*, VkResult>)LoadFunction(instance, "vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR");
        __vkEnumeratePhysicalDevices = (delegate* unmanaged<VkInstance, uint*, VkPhysicalDevice*, VkResult>)LoadFunction(instance, "vkEnumeratePhysicalDevices");
        __vkFlushMappedMemoryRanges = (delegate* unmanaged<VkDevice, uint, VkMappedMemoryRange*, VkResult>)LoadFunction(instance, "vkFlushMappedMemoryRanges");
        __vkFreeCommandBuffers = (delegate* unmanaged<VkDevice, VkCommandPool, uint, VkCommandBuffer*, void>)LoadFunction(instance, "vkFreeCommandBuffers");
        __vkFreeDescriptorSets = (delegate* unmanaged<VkDevice, VkDescriptorPool, uint, VkDescriptorSet*, VkResult>)LoadFunction(instance, "vkFreeDescriptorSets");
        __vkFreeMemory = (delegate* unmanaged<VkDevice, VkDeviceMemory, VkAllocationCallbacks*, void>)LoadFunction(instance, "vkFreeMemory");
        __vkGetAccelerationStructureBuildSizesKHR = (delegate* unmanaged<VkDevice, VkAccelerationStructureBuildTypeKHR, VkAccelerationStructureBuildGeometryInfoKHR*, uint*, VkAccelerationStructureBuildSizesInfoKHR*, void>)LoadFunction(instance, "vkGetAccelerationStructureBuildSizesKHR");
        __vkGetAccelerationStructureDeviceAddressKHR = (delegate* unmanaged<VkDevice, VkAccelerationStructureDeviceAddressInfoKHR*, VkDeviceAddress>)LoadFunction(instance, "vkGetAccelerationStructureDeviceAddressKHR");
        __vkGetAccelerationStructureHandleNV = (delegate* unmanaged<VkDevice, VkAccelerationStructureNV, uint, void*, VkResult>)LoadFunction(instance, "vkGetAccelerationStructureHandleNV");
        __vkGetAccelerationStructureMemoryRequirementsNV = (delegate* unmanaged<VkDevice, VkAccelerationStructureMemoryRequirementsInfoNV*, VkMemoryRequirements2KHR*, void>)LoadFunction(instance, "vkGetAccelerationStructureMemoryRequirementsNV");
        __vkGetBufferDeviceAddress = (delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, VkDeviceAddress>)LoadFunction(instance, "vkGetBufferDeviceAddress");
        __vkGetBufferDeviceAddressEXT = (delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, VkDeviceAddress>)LoadFunction(instance, "vkGetBufferDeviceAddressEXT");
        __vkGetBufferDeviceAddressKHR = (delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, VkDeviceAddress>)LoadFunction(instance, "vkGetBufferDeviceAddressKHR");
        __vkGetBufferMemoryRequirements = (delegate* unmanaged<VkDevice, VkBuffer, VkMemoryRequirements*, void>)LoadFunction(instance, "vkGetBufferMemoryRequirements");
        __vkGetBufferMemoryRequirements2 = (delegate* unmanaged<VkDevice, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*, void>)LoadFunction(instance, "vkGetBufferMemoryRequirements2");
        __vkGetBufferMemoryRequirements2KHR = (delegate* unmanaged<VkDevice, VkBufferMemoryRequirementsInfo2*, VkMemoryRequirements2*, void>)LoadFunction(instance, "vkGetBufferMemoryRequirements2KHR");
        __vkGetBufferOpaqueCaptureAddress = (delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, ulong>)LoadFunction(instance, "vkGetBufferOpaqueCaptureAddress");
        __vkGetBufferOpaqueCaptureAddressKHR = (delegate* unmanaged<VkDevice, VkBufferDeviceAddressInfo*, ulong>)LoadFunction(instance, "vkGetBufferOpaqueCaptureAddressKHR");
        __vkGetCalibratedTimestampsEXT = (delegate* unmanaged<VkDevice, uint, VkCalibratedTimestampInfoEXT*, ulong*, ulong*, VkResult>)LoadFunction(instance, "vkGetCalibratedTimestampsEXT");
        __vkGetDeferredOperationMaxConcurrencyKHR = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, uint>)LoadFunction(instance, "vkGetDeferredOperationMaxConcurrencyKHR");
        __vkGetDeferredOperationResultKHR = (delegate* unmanaged<VkDevice, VkDeferredOperationKHR, VkResult>)LoadFunction(instance, "vkGetDeferredOperationResultKHR");
        __vkGetDescriptorSetLayoutSupport = (delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkDescriptorSetLayoutSupport*, void>)LoadFunction(instance, "vkGetDescriptorSetLayoutSupport");
        __vkGetDescriptorSetLayoutSupportKHR = (delegate* unmanaged<VkDevice, VkDescriptorSetLayoutCreateInfo*, VkDescriptorSetLayoutSupport*, void>)LoadFunction(instance, "vkGetDescriptorSetLayoutSupportKHR");
        __vkGetDeviceAccelerationStructureCompatibilityKHR = (delegate* unmanaged<VkDevice, VkAccelerationStructureVersionInfoKHR*, VkAccelerationStructureCompatibilityKHR*, void>)LoadFunction(instance, "vkGetDeviceAccelerationStructureCompatibilityKHR");
        __vkGetDeviceBufferMemoryRequirements = (delegate* unmanaged<VkDevice, VkDeviceBufferMemoryRequirements*, VkMemoryRequirements2*, void>)LoadFunction(instance, "vkGetDeviceBufferMemoryRequirements");
        __vkGetDeviceBufferMemoryRequirementsKHR = (delegate* unmanaged<VkDevice, VkDeviceBufferMemoryRequirements*, VkMemoryRequirements2*, void>)LoadFunction(instance, "vkGetDeviceBufferMemoryRequirementsKHR");
        __vkGetDeviceGroupPeerMemoryFeatures = (delegate* unmanaged<VkDevice, uint, uint, uint, VkPeerMemoryFeatureFlags*, void>)LoadFunction(instance, "vkGetDeviceGroupPeerMemoryFeatures");
        __vkGetDeviceGroupPeerMemoryFeaturesKHR = (delegate* unmanaged<VkDevice, uint, uint, uint, VkPeerMemoryFeatureFlags*, void>)LoadFunction(instance, "vkGetDeviceGroupPeerMemoryFeaturesKHR");
        __vkGetDeviceGroupPresentCapabilitiesKHR = (delegate* unmanaged<VkDevice, VkDeviceGroupPresentCapabilitiesKHR*, VkResult>)LoadFunction(instance, "vkGetDeviceGroupPresentCapabilitiesKHR");
        __vkGetDeviceGroupSurfacePresentModesKHR = (delegate* unmanaged<VkDevice, VkSurfaceKHR, VkDeviceGroupPresentModeFlagsKHR*, VkResult>)LoadFunction(instance, "vkGetDeviceGroupSurfacePresentModesKHR");
        __vkGetDeviceImageMemoryRequirements = (delegate* unmanaged<VkDevice, VkDeviceImageMemoryRequirements*, VkMemoryRequirements2*, void>)LoadFunction(instance, "vkGetDeviceImageMemoryRequirements");
        __vkGetDeviceImageMemoryRequirementsKHR = (delegate* unmanaged<VkDevice, VkDeviceImageMemoryRequirements*, VkMemoryRequirements2*, void>)LoadFunction(instance, "vkGetDeviceImageMemoryRequirementsKHR");
        __vkGetDeviceImageSparseMemoryRequirements = (delegate* unmanaged<VkDevice, VkDeviceImageMemoryRequirements*, uint*, VkSparseImageMemoryRequirements2*, void>)LoadFunction(instance, "vkGetDeviceImageSparseMemoryRequirements");
        __vkGetDeviceImageSparseMemoryRequirementsKHR = (delegate* unmanaged<VkDevice, VkDeviceImageMemoryRequirements*, uint*, VkSparseImageMemoryRequirements2*, void>)LoadFunction(instance, "vkGetDeviceImageSparseMemoryRequirementsKHR");
        __vkGetDeviceMemoryCommitment = (delegate* unmanaged<VkDevice, VkDeviceMemory, VkDeviceSize*, void>)LoadFunction(instance, "vkGetDeviceMemoryCommitment");
        __vkGetDeviceMemoryOpaqueCaptureAddress = (delegate* unmanaged<VkDevice, VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong>)LoadFunction(instance, "vkGetDeviceMemoryOpaqueCaptureAddress");
        __vkGetDeviceMemoryOpaqueCaptureAddressKHR = (delegate* unmanaged<VkDevice, VkDeviceMemoryOpaqueCaptureAddressInfo*, ulong>)LoadFunction(instance, "vkGetDeviceMemoryOpaqueCaptureAddressKHR");
        __vkGetDeviceQueue = (delegate* unmanaged<VkDevice, uint, uint, VkQueue*, void>)LoadFunction(instance, "vkGetDeviceQueue");
        __vkGetDeviceQueue2 = (delegate* unmanaged<VkDevice, VkDeviceQueueInfo2*, VkQueue*, void>)LoadFunction(instance, "vkGetDeviceQueue2");
        __vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = (delegate* unmanaged<VkDevice, VkRenderPass, VkExtent2D*, VkResult>)LoadFunction(instance, "vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI");
        __vkGetDisplayModeProperties2KHR = (delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, uint*, VkDisplayModeProperties2KHR*, VkResult>)LoadFunction(instance, "vkGetDisplayModeProperties2KHR");
        __vkGetDisplayModePropertiesKHR = (delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, uint*, VkDisplayModePropertiesKHR*, VkResult>)LoadFunction(instance, "vkGetDisplayModePropertiesKHR");
        __vkGetDisplayPlaneCapabilities2KHR = (delegate* unmanaged<VkPhysicalDevice, VkDisplayPlaneInfo2KHR*, VkDisplayPlaneCapabilities2KHR*, VkResult>)LoadFunction(instance, "vkGetDisplayPlaneCapabilities2KHR");
        __vkGetDisplayPlaneCapabilitiesKHR = (delegate* unmanaged<VkPhysicalDevice, VkDisplayModeKHR, uint, VkDisplayPlaneCapabilitiesKHR*, VkResult>)LoadFunction(instance, "vkGetDisplayPlaneCapabilitiesKHR");
        __vkGetDisplayPlaneSupportedDisplaysKHR = (delegate* unmanaged<VkPhysicalDevice, uint, uint*, VkDisplayKHR*, VkResult>)LoadFunction(instance, "vkGetDisplayPlaneSupportedDisplaysKHR");
        __vkGetDrmDisplayEXT = (delegate* unmanaged<VkPhysicalDevice, int, uint, VkDisplayKHR*, VkResult>)LoadFunction(instance, "vkGetDrmDisplayEXT");
        __vkGetEventStatus = (delegate* unmanaged<VkDevice, VkEvent, VkResult>)LoadFunction(instance, "vkGetEventStatus");
        __vkGetFenceFdKHR = (delegate* unmanaged<VkDevice, VkFenceGetFdInfoKHR*, int*, VkResult>)LoadFunction(instance, "vkGetFenceFdKHR");
        __vkGetFenceStatus = (delegate* unmanaged<VkDevice, VkFence, VkResult>)LoadFunction(instance, "vkGetFenceStatus");
        __vkGetGeneratedCommandsMemoryRequirementsNV = (delegate* unmanaged<VkDevice, VkGeneratedCommandsMemoryRequirementsInfoNV*, VkMemoryRequirements2*, void>)LoadFunction(instance, "vkGetGeneratedCommandsMemoryRequirementsNV");
        __vkGetImageDrmFormatModifierPropertiesEXT = (delegate* unmanaged<VkDevice, VkImage, VkImageDrmFormatModifierPropertiesEXT*, VkResult>)LoadFunction(instance, "vkGetImageDrmFormatModifierPropertiesEXT");
        __vkGetImageMemoryRequirements = (delegate* unmanaged<VkDevice, VkImage, VkMemoryRequirements*, void>)LoadFunction(instance, "vkGetImageMemoryRequirements");
        __vkGetImageMemoryRequirements2 = (delegate* unmanaged<VkDevice, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*, void>)LoadFunction(instance, "vkGetImageMemoryRequirements2");
        __vkGetImageMemoryRequirements2KHR = (delegate* unmanaged<VkDevice, VkImageMemoryRequirementsInfo2*, VkMemoryRequirements2*, void>)LoadFunction(instance, "vkGetImageMemoryRequirements2KHR");
        __vkGetImageSparseMemoryRequirements = (delegate* unmanaged<VkDevice, VkImage, uint*, VkSparseImageMemoryRequirements*, void>)LoadFunction(instance, "vkGetImageSparseMemoryRequirements");
        __vkGetImageSparseMemoryRequirements2 = (delegate* unmanaged<VkDevice, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2*, void>)LoadFunction(instance, "vkGetImageSparseMemoryRequirements2");
        __vkGetImageSparseMemoryRequirements2KHR = (delegate* unmanaged<VkDevice, VkImageSparseMemoryRequirementsInfo2*, uint*, VkSparseImageMemoryRequirements2*, void>)LoadFunction(instance, "vkGetImageSparseMemoryRequirements2KHR");
        __vkGetImageSubresourceLayout = (delegate* unmanaged<VkDevice, VkImage, VkImageSubresource*, VkSubresourceLayout*, void>)LoadFunction(instance, "vkGetImageSubresourceLayout");
        __vkGetImageViewAddressNVX = (delegate* unmanaged<VkDevice, VkImageView, VkImageViewAddressPropertiesNVX*, VkResult>)LoadFunction(instance, "vkGetImageViewAddressNVX");
        __vkGetImageViewHandleNVX = (delegate* unmanaged<VkDevice, VkImageViewHandleInfoNVX*, uint>)LoadFunction(instance, "vkGetImageViewHandleNVX");
        __vkGetMemoryFdKHR = (delegate* unmanaged<VkDevice, VkMemoryGetFdInfoKHR*, int*, VkResult>)LoadFunction(instance, "vkGetMemoryFdKHR");
        __vkGetMemoryFdPropertiesKHR = (delegate* unmanaged<VkDevice, VkExternalMemoryHandleTypeFlagBits, int, VkMemoryFdPropertiesKHR*, VkResult>)LoadFunction(instance, "vkGetMemoryFdPropertiesKHR");
        __vkGetMemoryHostPointerPropertiesEXT = (delegate* unmanaged<VkDevice, VkExternalMemoryHandleTypeFlagBits, void*, VkMemoryHostPointerPropertiesEXT*, VkResult>)LoadFunction(instance, "vkGetMemoryHostPointerPropertiesEXT");
        __vkGetMemoryRemoteAddressNV = (delegate* unmanaged<VkDevice, VkMemoryGetRemoteAddressInfoNV*, VkRemoteAddressNV*, VkResult>)LoadFunction(instance, "vkGetMemoryRemoteAddressNV");
        __vkGetPastPresentationTimingGOOGLE = (delegate* unmanaged<VkDevice, VkSwapchainKHR, uint*, VkPastPresentationTimingGOOGLE*, VkResult>)LoadFunction(instance, "vkGetPastPresentationTimingGOOGLE");
        __vkGetPerformanceParameterINTEL = (delegate* unmanaged<VkDevice, VkPerformanceParameterTypeINTEL, VkPerformanceValueINTEL*, VkResult>)LoadFunction(instance, "vkGetPerformanceParameterINTEL");
        __vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = (delegate* unmanaged<VkPhysicalDevice, uint*, VkTimeDomainEXT*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceCalibrateableTimeDomainsEXT");
        __vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = (delegate* unmanaged<VkPhysicalDevice, uint*, VkCooperativeMatrixPropertiesNV*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceCooperativeMatrixPropertiesNV");
        __vkGetPhysicalDeviceDisplayPlaneProperties2KHR = (delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayPlaneProperties2KHR*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceDisplayPlaneProperties2KHR");
        __vkGetPhysicalDeviceDisplayPlanePropertiesKHR = (delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayPlanePropertiesKHR*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceDisplayPlanePropertiesKHR");
        __vkGetPhysicalDeviceDisplayProperties2KHR = (delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayProperties2KHR*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceDisplayProperties2KHR");
        __vkGetPhysicalDeviceDisplayPropertiesKHR = (delegate* unmanaged<VkPhysicalDevice, uint*, VkDisplayPropertiesKHR*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceDisplayPropertiesKHR");
        __vkGetPhysicalDeviceExternalBufferProperties = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void>)LoadFunction(instance, "vkGetPhysicalDeviceExternalBufferProperties");
        __vkGetPhysicalDeviceExternalBufferPropertiesKHR = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalBufferInfo*, VkExternalBufferProperties*, void>)LoadFunction(instance, "vkGetPhysicalDeviceExternalBufferPropertiesKHR");
        __vkGetPhysicalDeviceExternalFenceProperties = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void>)LoadFunction(instance, "vkGetPhysicalDeviceExternalFenceProperties");
        __vkGetPhysicalDeviceExternalFencePropertiesKHR = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalFenceInfo*, VkExternalFenceProperties*, void>)LoadFunction(instance, "vkGetPhysicalDeviceExternalFencePropertiesKHR");
        __vkGetPhysicalDeviceExternalImageFormatPropertiesNV = (delegate* unmanaged<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, VkExternalImageFormatPropertiesNV*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceExternalImageFormatPropertiesNV");
        __vkGetPhysicalDeviceExternalSemaphoreProperties = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void>)LoadFunction(instance, "vkGetPhysicalDeviceExternalSemaphoreProperties");
        __vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceExternalSemaphoreInfo*, VkExternalSemaphoreProperties*, void>)LoadFunction(instance, "vkGetPhysicalDeviceExternalSemaphorePropertiesKHR");
        __vkGetPhysicalDeviceFeatures = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceFeatures*, void>)LoadFunction(instance, "vkGetPhysicalDeviceFeatures");
        __vkGetPhysicalDeviceFeatures2 = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceFeatures2*, void>)LoadFunction(instance, "vkGetPhysicalDeviceFeatures2");
        __vkGetPhysicalDeviceFeatures2KHR = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceFeatures2*, void>)LoadFunction(instance, "vkGetPhysicalDeviceFeatures2KHR");
        __vkGetPhysicalDeviceFormatProperties = (delegate* unmanaged<VkPhysicalDevice, VkFormat, VkFormatProperties*, void>)LoadFunction(instance, "vkGetPhysicalDeviceFormatProperties");
        __vkGetPhysicalDeviceFormatProperties2 = (delegate* unmanaged<VkPhysicalDevice, VkFormat, VkFormatProperties2*, void>)LoadFunction(instance, "vkGetPhysicalDeviceFormatProperties2");
        __vkGetPhysicalDeviceFormatProperties2KHR = (delegate* unmanaged<VkPhysicalDevice, VkFormat, VkFormatProperties2*, void>)LoadFunction(instance, "vkGetPhysicalDeviceFormatProperties2KHR");
        __vkGetPhysicalDeviceFragmentShadingRatesKHR = (delegate* unmanaged<VkPhysicalDevice, uint*, VkPhysicalDeviceFragmentShadingRateKHR*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceFragmentShadingRatesKHR");
        __vkGetPhysicalDeviceImageFormatProperties = (delegate* unmanaged<VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkImageFormatProperties*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceImageFormatProperties");
        __vkGetPhysicalDeviceImageFormatProperties2 = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceImageFormatProperties2");
        __vkGetPhysicalDeviceImageFormatProperties2KHR = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceImageFormatInfo2*, VkImageFormatProperties2*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceImageFormatProperties2KHR");
        __vkGetPhysicalDeviceMemoryProperties = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceMemoryProperties*, void>)LoadFunction(instance, "vkGetPhysicalDeviceMemoryProperties");
        __vkGetPhysicalDeviceMemoryProperties2 = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceMemoryProperties2*, void>)LoadFunction(instance, "vkGetPhysicalDeviceMemoryProperties2");
        __vkGetPhysicalDeviceMemoryProperties2KHR = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceMemoryProperties2*, void>)LoadFunction(instance, "vkGetPhysicalDeviceMemoryProperties2KHR");
        __vkGetPhysicalDeviceMultisamplePropertiesEXT = (delegate* unmanaged<VkPhysicalDevice, VkSampleCountFlagBits, VkMultisamplePropertiesEXT*, void>)LoadFunction(instance, "vkGetPhysicalDeviceMultisamplePropertiesEXT");
        __vkGetPhysicalDevicePresentRectanglesKHR = (delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkRect2D*, VkResult>)LoadFunction(instance, "vkGetPhysicalDevicePresentRectanglesKHR");
        __vkGetPhysicalDeviceProperties = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceProperties*, void>)LoadFunction(instance, "vkGetPhysicalDeviceProperties");
        __vkGetPhysicalDeviceProperties2 = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceProperties2*, void>)LoadFunction(instance, "vkGetPhysicalDeviceProperties2");
        __vkGetPhysicalDeviceProperties2KHR = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceProperties2*, void>)LoadFunction(instance, "vkGetPhysicalDeviceProperties2KHR");
        __vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = (delegate* unmanaged<VkPhysicalDevice, VkQueryPoolPerformanceCreateInfoKHR*, uint*, void>)LoadFunction(instance, "vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR");
        __vkGetPhysicalDeviceQueueFamilyProperties = (delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties*, void>)LoadFunction(instance, "vkGetPhysicalDeviceQueueFamilyProperties");
        __vkGetPhysicalDeviceQueueFamilyProperties2 = (delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties2*, void>)LoadFunction(instance, "vkGetPhysicalDeviceQueueFamilyProperties2");
        __vkGetPhysicalDeviceQueueFamilyProperties2KHR = (delegate* unmanaged<VkPhysicalDevice, uint*, VkQueueFamilyProperties2*, void>)LoadFunction(instance, "vkGetPhysicalDeviceQueueFamilyProperties2KHR");
        __vkGetPhysicalDeviceSparseImageFormatProperties = (delegate* unmanaged<VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlagBits, VkImageUsageFlags, VkImageTiling, uint*, VkSparseImageFormatProperties*, void>)LoadFunction(instance, "vkGetPhysicalDeviceSparseImageFormatProperties");
        __vkGetPhysicalDeviceSparseImageFormatProperties2 = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void>)LoadFunction(instance, "vkGetPhysicalDeviceSparseImageFormatProperties2");
        __vkGetPhysicalDeviceSparseImageFormatProperties2KHR = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSparseImageFormatInfo2*, uint*, VkSparseImageFormatProperties2*, void>)LoadFunction(instance, "vkGetPhysicalDeviceSparseImageFormatProperties2KHR");
        __vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = (delegate* unmanaged<VkPhysicalDevice, uint*, VkFramebufferMixedSamplesCombinationNV*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV");
        __vkGetPhysicalDeviceSurfaceCapabilities2EXT = (delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, VkSurfaceCapabilities2EXT*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceSurfaceCapabilities2EXT");
        __vkGetPhysicalDeviceSurfaceCapabilities2KHR = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, VkSurfaceCapabilities2KHR*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceSurfaceCapabilities2KHR");
        __vkGetPhysicalDeviceSurfaceCapabilitiesKHR = (delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, VkSurfaceCapabilitiesKHR*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceSurfaceCapabilitiesKHR");
        __vkGetPhysicalDeviceSurfaceFormats2KHR = (delegate* unmanaged<VkPhysicalDevice, VkPhysicalDeviceSurfaceInfo2KHR*, uint*, VkSurfaceFormat2KHR*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceSurfaceFormats2KHR");
        __vkGetPhysicalDeviceSurfaceFormatsKHR = (delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkSurfaceFormatKHR*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceSurfaceFormatsKHR");
        __vkGetPhysicalDeviceSurfacePresentModesKHR = (delegate* unmanaged<VkPhysicalDevice, VkSurfaceKHR, uint*, VkPresentModeKHR*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceSurfacePresentModesKHR");
        __vkGetPhysicalDeviceSurfaceSupportKHR = (delegate* unmanaged<VkPhysicalDevice, uint, VkSurfaceKHR, VkBool32*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceSurfaceSupportKHR");
        __vkGetPhysicalDeviceToolProperties = (delegate* unmanaged<VkPhysicalDevice, uint*, VkPhysicalDeviceToolProperties*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceToolProperties");
        __vkGetPhysicalDeviceToolPropertiesEXT = (delegate* unmanaged<VkPhysicalDevice, uint*, VkPhysicalDeviceToolProperties*, VkResult>)LoadFunction(instance, "vkGetPhysicalDeviceToolPropertiesEXT");
        __vkGetPipelineCacheData = (delegate* unmanaged<VkDevice, VkPipelineCache, uint*, void*, VkResult>)LoadFunction(instance, "vkGetPipelineCacheData");
        __vkGetPipelineExecutableInternalRepresentationsKHR = (delegate* unmanaged<VkDevice, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableInternalRepresentationKHR*, VkResult>)LoadFunction(instance, "vkGetPipelineExecutableInternalRepresentationsKHR");
        __vkGetPipelineExecutablePropertiesKHR = (delegate* unmanaged<VkDevice, VkPipelineInfoKHR*, uint*, VkPipelineExecutablePropertiesKHR*, VkResult>)LoadFunction(instance, "vkGetPipelineExecutablePropertiesKHR");
        __vkGetPipelineExecutableStatisticsKHR = (delegate* unmanaged<VkDevice, VkPipelineExecutableInfoKHR*, uint*, VkPipelineExecutableStatisticKHR*, VkResult>)LoadFunction(instance, "vkGetPipelineExecutableStatisticsKHR");
        __vkGetPrivateData = (delegate* unmanaged<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong*, void>)LoadFunction(instance, "vkGetPrivateData");
        __vkGetPrivateDataEXT = (delegate* unmanaged<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong*, void>)LoadFunction(instance, "vkGetPrivateDataEXT");
        __vkGetQueryPoolResults = (delegate* unmanaged<VkDevice, VkQueryPool, uint, uint, uint, void*, VkDeviceSize, VkQueryResultFlags, VkResult>)LoadFunction(instance, "vkGetQueryPoolResults");
        __vkGetQueueCheckpointData2NV = (delegate* unmanaged<VkQueue, uint*, VkCheckpointData2NV*, void>)LoadFunction(instance, "vkGetQueueCheckpointData2NV");
        __vkGetQueueCheckpointDataNV = (delegate* unmanaged<VkQueue, uint*, VkCheckpointDataNV*, void>)LoadFunction(instance, "vkGetQueueCheckpointDataNV");
        __vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = (delegate* unmanaged<VkDevice, VkPipeline, uint, uint, uint, void*, VkResult>)LoadFunction(instance, "vkGetRayTracingCaptureReplayShaderGroupHandlesKHR");
        __vkGetRayTracingShaderGroupHandlesKHR = (delegate* unmanaged<VkDevice, VkPipeline, uint, uint, uint, void*, VkResult>)LoadFunction(instance, "vkGetRayTracingShaderGroupHandlesKHR");
        __vkGetRayTracingShaderGroupHandlesNV = (delegate* unmanaged<VkDevice, VkPipeline, uint, uint, uint, void*, VkResult>)LoadFunction(instance, "vkGetRayTracingShaderGroupHandlesNV");
        __vkGetRayTracingShaderGroupStackSizeKHR = (delegate* unmanaged<VkDevice, VkPipeline, uint, VkShaderGroupShaderKHR, VkDeviceSize>)LoadFunction(instance, "vkGetRayTracingShaderGroupStackSizeKHR");
        __vkGetRefreshCycleDurationGOOGLE = (delegate* unmanaged<VkDevice, VkSwapchainKHR, VkRefreshCycleDurationGOOGLE*, VkResult>)LoadFunction(instance, "vkGetRefreshCycleDurationGOOGLE");
        __vkGetRenderAreaGranularity = (delegate* unmanaged<VkDevice, VkRenderPass, VkExtent2D*, void>)LoadFunction(instance, "vkGetRenderAreaGranularity");
        __vkGetSemaphoreCounterValue = (delegate* unmanaged<VkDevice, VkSemaphore, ulong*, VkResult>)LoadFunction(instance, "vkGetSemaphoreCounterValue");
        __vkGetSemaphoreCounterValueKHR = (delegate* unmanaged<VkDevice, VkSemaphore, ulong*, VkResult>)LoadFunction(instance, "vkGetSemaphoreCounterValueKHR");
        __vkGetSemaphoreFdKHR = (delegate* unmanaged<VkDevice, VkSemaphoreGetFdInfoKHR*, int*, VkResult>)LoadFunction(instance, "vkGetSemaphoreFdKHR");
        __vkGetShaderInfoAMD = (delegate* unmanaged<VkDevice, VkPipeline, VkShaderStageFlagBits, VkShaderInfoTypeAMD, uint*, void*, VkResult>)LoadFunction(instance, "vkGetShaderInfoAMD");
        __vkGetSwapchainCounterEXT = (delegate* unmanaged<VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagBitsEXT, ulong*, VkResult>)LoadFunction(instance, "vkGetSwapchainCounterEXT");
        __vkGetSwapchainImagesKHR = (delegate* unmanaged<VkDevice, VkSwapchainKHR, uint*, VkImage*, VkResult>)LoadFunction(instance, "vkGetSwapchainImagesKHR");
        __vkGetSwapchainStatusKHR = (delegate* unmanaged<VkDevice, VkSwapchainKHR, VkResult>)LoadFunction(instance, "vkGetSwapchainStatusKHR");
        __vkGetValidationCacheDataEXT = (delegate* unmanaged<VkDevice, VkValidationCacheEXT, uint*, void*, VkResult>)LoadFunction(instance, "vkGetValidationCacheDataEXT");
        __vkGetWinrtDisplayNV = (delegate* unmanaged<VkPhysicalDevice, uint, VkDisplayKHR*, VkResult>)LoadFunction(instance, "vkGetWinrtDisplayNV");
        __vkImportFenceFdKHR = (delegate* unmanaged<VkDevice, VkImportFenceFdInfoKHR*, VkResult>)LoadFunction(instance, "vkImportFenceFdKHR");
        __vkImportSemaphoreFdKHR = (delegate* unmanaged<VkDevice, VkImportSemaphoreFdInfoKHR*, VkResult>)LoadFunction(instance, "vkImportSemaphoreFdKHR");
        __vkInitializePerformanceApiINTEL = (delegate* unmanaged<VkDevice, VkInitializePerformanceApiInfoINTEL*, VkResult>)LoadFunction(instance, "vkInitializePerformanceApiINTEL");
        __vkInvalidateMappedMemoryRanges = (delegate* unmanaged<VkDevice, uint, VkMappedMemoryRange*, VkResult>)LoadFunction(instance, "vkInvalidateMappedMemoryRanges");
        __vkMapMemory = (delegate* unmanaged<VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, void*, VkResult>)LoadFunction(instance, "vkMapMemory");
        __vkMergePipelineCaches = (delegate* unmanaged<VkDevice, VkPipelineCache, uint, VkPipelineCache*, VkResult>)LoadFunction(instance, "vkMergePipelineCaches");
        __vkMergeValidationCachesEXT = (delegate* unmanaged<VkDevice, VkValidationCacheEXT, uint, VkValidationCacheEXT*, VkResult>)LoadFunction(instance, "vkMergeValidationCachesEXT");
        __vkQueueBeginDebugUtilsLabelEXT = (delegate* unmanaged<VkQueue, VkDebugUtilsLabelEXT*, void>)LoadFunction(instance, "vkQueueBeginDebugUtilsLabelEXT");
        __vkQueueBindSparse = (delegate* unmanaged<VkQueue, uint, VkBindSparseInfo*, VkFence, VkResult>)LoadFunction(instance, "vkQueueBindSparse");
        __vkQueueEndDebugUtilsLabelEXT = (delegate* unmanaged<VkQueue, void>)LoadFunction(instance, "vkQueueEndDebugUtilsLabelEXT");
        __vkQueueInsertDebugUtilsLabelEXT = (delegate* unmanaged<VkQueue, VkDebugUtilsLabelEXT*, void>)LoadFunction(instance, "vkQueueInsertDebugUtilsLabelEXT");
        __vkQueuePresentKHR = (delegate* unmanaged<VkQueue, VkPresentInfoKHR*, VkResult>)LoadFunction(instance, "vkQueuePresentKHR");
        __vkQueueSetPerformanceConfigurationINTEL = (delegate* unmanaged<VkQueue, VkPerformanceConfigurationINTEL, VkResult>)LoadFunction(instance, "vkQueueSetPerformanceConfigurationINTEL");
        __vkQueueSubmit = (delegate* unmanaged<VkQueue, uint, VkSubmitInfo*, VkFence, VkResult>)LoadFunction(instance, "vkQueueSubmit");
        __vkQueueSubmit2 = (delegate* unmanaged<VkQueue, uint, VkSubmitInfo2*, VkFence, VkResult>)LoadFunction(instance, "vkQueueSubmit2");
        __vkQueueSubmit2KHR = (delegate* unmanaged<VkQueue, uint, VkSubmitInfo2*, VkFence, VkResult>)LoadFunction(instance, "vkQueueSubmit2KHR");
        __vkQueueWaitIdle = (delegate* unmanaged<VkQueue, VkResult>)LoadFunction(instance, "vkQueueWaitIdle");
        __vkRegisterDeviceEventEXT = (delegate* unmanaged<VkDevice, VkDeviceEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult>)LoadFunction(instance, "vkRegisterDeviceEventEXT");
        __vkRegisterDisplayEventEXT = (delegate* unmanaged<VkDevice, VkDisplayKHR, VkDisplayEventInfoEXT*, VkAllocationCallbacks*, VkFence*, VkResult>)LoadFunction(instance, "vkRegisterDisplayEventEXT");
        __vkReleaseDisplayEXT = (delegate* unmanaged<VkPhysicalDevice, VkDisplayKHR, VkResult>)LoadFunction(instance, "vkReleaseDisplayEXT");
        __vkReleasePerformanceConfigurationINTEL = (delegate* unmanaged<VkDevice, VkPerformanceConfigurationINTEL, VkResult>)LoadFunction(instance, "vkReleasePerformanceConfigurationINTEL");
        __vkReleaseProfilingLockKHR = (delegate* unmanaged<VkDevice, void>)LoadFunction(instance, "vkReleaseProfilingLockKHR");
        __vkResetCommandBuffer = (delegate* unmanaged<VkCommandBuffer, VkCommandBufferResetFlags, VkResult>)LoadFunction(instance, "vkResetCommandBuffer");
        __vkResetCommandPool = (delegate* unmanaged<VkDevice, VkCommandPool, VkCommandPoolResetFlags, VkResult>)LoadFunction(instance, "vkResetCommandPool");
        __vkResetDescriptorPool = (delegate* unmanaged<VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags, VkResult>)LoadFunction(instance, "vkResetDescriptorPool");
        __vkResetEvent = (delegate* unmanaged<VkDevice, VkEvent, VkResult>)LoadFunction(instance, "vkResetEvent");
        __vkResetFences = (delegate* unmanaged<VkDevice, uint, VkFence*, VkResult>)LoadFunction(instance, "vkResetFences");
        __vkResetQueryPool = (delegate* unmanaged<VkDevice, VkQueryPool, uint, uint, void>)LoadFunction(instance, "vkResetQueryPool");
        __vkResetQueryPoolEXT = (delegate* unmanaged<VkDevice, VkQueryPool, uint, uint, void>)LoadFunction(instance, "vkResetQueryPoolEXT");
        __vkSetDebugUtilsObjectNameEXT = (delegate* unmanaged<VkDevice, VkDebugUtilsObjectNameInfoEXT*, VkResult>)LoadFunction(instance, "vkSetDebugUtilsObjectNameEXT");
        __vkSetDebugUtilsObjectTagEXT = (delegate* unmanaged<VkDevice, VkDebugUtilsObjectTagInfoEXT*, VkResult>)LoadFunction(instance, "vkSetDebugUtilsObjectTagEXT");
        __vkSetDeviceMemoryPriorityEXT = (delegate* unmanaged<VkDevice, VkDeviceMemory, float, void>)LoadFunction(instance, "vkSetDeviceMemoryPriorityEXT");
        __vkSetEvent = (delegate* unmanaged<VkDevice, VkEvent, VkResult>)LoadFunction(instance, "vkSetEvent");
        __vkSetHdrMetadataEXT = (delegate* unmanaged<VkDevice, uint, VkSwapchainKHR*, VkHdrMetadataEXT*, void>)LoadFunction(instance, "vkSetHdrMetadataEXT");
        __vkSetLocalDimmingAMD = (delegate* unmanaged<VkDevice, VkSwapchainKHR, VkBool32, void>)LoadFunction(instance, "vkSetLocalDimmingAMD");
        __vkSetPrivateData = (delegate* unmanaged<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong, VkResult>)LoadFunction(instance, "vkSetPrivateData");
        __vkSetPrivateDataEXT = (delegate* unmanaged<VkDevice, VkObjectType, ulong, VkPrivateDataSlot, ulong, VkResult>)LoadFunction(instance, "vkSetPrivateDataEXT");
        __vkSignalSemaphore = (delegate* unmanaged<VkDevice, VkSemaphoreSignalInfo*, VkResult>)LoadFunction(instance, "vkSignalSemaphore");
        __vkSignalSemaphoreKHR = (delegate* unmanaged<VkDevice, VkSemaphoreSignalInfo*, VkResult>)LoadFunction(instance, "vkSignalSemaphoreKHR");
        __vkSubmitDebugUtilsMessageEXT = (delegate* unmanaged<VkInstance, VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, VkDebugUtilsMessengerCallbackDataEXT*, void>)LoadFunction(instance, "vkSubmitDebugUtilsMessageEXT");
        __vkTrimCommandPool = (delegate* unmanaged<VkDevice, VkCommandPool, VkCommandPoolTrimFlags, void>)LoadFunction(instance, "vkTrimCommandPool");
        __vkTrimCommandPoolKHR = (delegate* unmanaged<VkDevice, VkCommandPool, VkCommandPoolTrimFlags, void>)LoadFunction(instance, "vkTrimCommandPoolKHR");
        __vkUninitializePerformanceApiINTEL = (delegate* unmanaged<VkDevice, void>)LoadFunction(instance, "vkUninitializePerformanceApiINTEL");
        __vkUnmapMemory = (delegate* unmanaged<VkDevice, VkDeviceMemory, void>)LoadFunction(instance, "vkUnmapMemory");
        __vkUpdateDescriptorSets = (delegate* unmanaged<VkDevice, uint, VkWriteDescriptorSet*, uint, VkCopyDescriptorSet*, void>)LoadFunction(instance, "vkUpdateDescriptorSets");
        __vkUpdateDescriptorSetWithTemplate = (delegate* unmanaged<VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, void*, void>)LoadFunction(instance, "vkUpdateDescriptorSetWithTemplate");
        __vkUpdateDescriptorSetWithTemplateKHR = (delegate* unmanaged<VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, void*, void>)LoadFunction(instance, "vkUpdateDescriptorSetWithTemplateKHR");
        __vkWaitForFences = (delegate* unmanaged<VkDevice, uint, VkFence*, VkBool32, ulong, VkResult>)LoadFunction(instance, "vkWaitForFences");
        __vkWaitForPresentKHR = (delegate* unmanaged<VkDevice, VkSwapchainKHR, ulong, ulong, VkResult>)LoadFunction(instance, "vkWaitForPresentKHR");
        __vkWaitSemaphores = (delegate* unmanaged<VkDevice, VkSemaphoreWaitInfo*, ulong, VkResult>)LoadFunction(instance, "vkWaitSemaphores");
        __vkWaitSemaphoresKHR = (delegate* unmanaged<VkDevice, VkSemaphoreWaitInfo*, ulong, VkResult>)LoadFunction(instance, "vkWaitSemaphoresKHR");
        __vkWriteAccelerationStructuresPropertiesKHR = (delegate* unmanaged<VkDevice, uint, VkAccelerationStructureKHR*, VkQueryType, uint, void*, uint, VkResult>)LoadFunction(instance, "vkWriteAccelerationStructuresPropertiesKHR");
    }
}
