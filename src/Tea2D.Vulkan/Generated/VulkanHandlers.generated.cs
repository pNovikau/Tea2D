// ============================================================================ 
// This file is generated by Tea2D.Vulkan.Generator tool. 
// ============================================================================ 


using System.Diagnostics;

namespace Tea2D.Vulkan
{
    public readonly partial struct VkBuffer : IEquatable<VkBuffer>
    {
        public readonly IntPtr Handle;

        public VkBuffer(IntPtr existingHandle) => Handle = existingHandle;

        public static VkBuffer Null => new VkBuffer(IntPtr.Zero);

        public static implicit operator VkBuffer(IntPtr handle) => new VkBuffer(handle);

        public static bool operator ==(VkBuffer left, VkBuffer right) => left.Handle == right.Handle;
        public static bool operator !=(VkBuffer left, VkBuffer right) => left.Handle != right.Handle;
        public static bool operator ==(VkBuffer left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkBuffer left, IntPtr right) => left.Handle != right;

        public bool Equals(VkBuffer other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkBuffer handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkImage : IEquatable<VkImage>
    {
        public readonly IntPtr Handle;

        public VkImage(IntPtr existingHandle) => Handle = existingHandle;

        public static VkImage Null => new VkImage(IntPtr.Zero);

        public static implicit operator VkImage(IntPtr handle) => new VkImage(handle);

        public static bool operator ==(VkImage left, VkImage right) => left.Handle == right.Handle;
        public static bool operator !=(VkImage left, VkImage right) => left.Handle != right.Handle;
        public static bool operator ==(VkImage left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkImage left, IntPtr right) => left.Handle != right;

        public bool Equals(VkImage other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkImage handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkInstance : IEquatable<VkInstance>
    {
        public readonly IntPtr Handle;

        public VkInstance(IntPtr existingHandle) => Handle = existingHandle;

        public static VkInstance Null => new VkInstance(IntPtr.Zero);

        public static implicit operator VkInstance(IntPtr handle) => new VkInstance(handle);

        public static bool operator ==(VkInstance left, VkInstance right) => left.Handle == right.Handle;
        public static bool operator !=(VkInstance left, VkInstance right) => left.Handle != right.Handle;
        public static bool operator ==(VkInstance left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkInstance left, IntPtr right) => left.Handle != right;

        public bool Equals(VkInstance other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkInstance handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkPhysicalDevice : IEquatable<VkPhysicalDevice>
    {
        public readonly IntPtr Handle;

        public VkPhysicalDevice(IntPtr existingHandle) => Handle = existingHandle;

        public static VkPhysicalDevice Null => new VkPhysicalDevice(IntPtr.Zero);

        public static implicit operator VkPhysicalDevice(IntPtr handle) => new VkPhysicalDevice(handle);

        public static bool operator ==(VkPhysicalDevice left, VkPhysicalDevice right) => left.Handle == right.Handle;
        public static bool operator !=(VkPhysicalDevice left, VkPhysicalDevice right) => left.Handle != right.Handle;
        public static bool operator ==(VkPhysicalDevice left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkPhysicalDevice left, IntPtr right) => left.Handle != right;

        public bool Equals(VkPhysicalDevice other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkPhysicalDevice handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkDevice : IEquatable<VkDevice>
    {
        public readonly IntPtr Handle;

        public VkDevice(IntPtr existingHandle) => Handle = existingHandle;

        public static VkDevice Null => new VkDevice(IntPtr.Zero);

        public static implicit operator VkDevice(IntPtr handle) => new VkDevice(handle);

        public static bool operator ==(VkDevice left, VkDevice right) => left.Handle == right.Handle;
        public static bool operator !=(VkDevice left, VkDevice right) => left.Handle != right.Handle;
        public static bool operator ==(VkDevice left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkDevice left, IntPtr right) => left.Handle != right;

        public bool Equals(VkDevice other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkDevice handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkQueue : IEquatable<VkQueue>
    {
        public readonly IntPtr Handle;

        public VkQueue(IntPtr existingHandle) => Handle = existingHandle;

        public static VkQueue Null => new VkQueue(IntPtr.Zero);

        public static implicit operator VkQueue(IntPtr handle) => new VkQueue(handle);

        public static bool operator ==(VkQueue left, VkQueue right) => left.Handle == right.Handle;
        public static bool operator !=(VkQueue left, VkQueue right) => left.Handle != right.Handle;
        public static bool operator ==(VkQueue left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkQueue left, IntPtr right) => left.Handle != right;

        public bool Equals(VkQueue other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkQueue handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkSemaphore : IEquatable<VkSemaphore>
    {
        public readonly IntPtr Handle;

        public VkSemaphore(IntPtr existingHandle) => Handle = existingHandle;

        public static VkSemaphore Null => new VkSemaphore(IntPtr.Zero);

        public static implicit operator VkSemaphore(IntPtr handle) => new VkSemaphore(handle);

        public static bool operator ==(VkSemaphore left, VkSemaphore right) => left.Handle == right.Handle;
        public static bool operator !=(VkSemaphore left, VkSemaphore right) => left.Handle != right.Handle;
        public static bool operator ==(VkSemaphore left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkSemaphore left, IntPtr right) => left.Handle != right;

        public bool Equals(VkSemaphore other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkSemaphore handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkCommandBuffer : IEquatable<VkCommandBuffer>
    {
        public readonly IntPtr Handle;

        public VkCommandBuffer(IntPtr existingHandle) => Handle = existingHandle;

        public static VkCommandBuffer Null => new VkCommandBuffer(IntPtr.Zero);

        public static implicit operator VkCommandBuffer(IntPtr handle) => new VkCommandBuffer(handle);

        public static bool operator ==(VkCommandBuffer left, VkCommandBuffer right) => left.Handle == right.Handle;
        public static bool operator !=(VkCommandBuffer left, VkCommandBuffer right) => left.Handle != right.Handle;
        public static bool operator ==(VkCommandBuffer left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkCommandBuffer left, IntPtr right) => left.Handle != right;

        public bool Equals(VkCommandBuffer other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkCommandBuffer handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkFence : IEquatable<VkFence>
    {
        public readonly IntPtr Handle;

        public VkFence(IntPtr existingHandle) => Handle = existingHandle;

        public static VkFence Null => new VkFence(IntPtr.Zero);

        public static implicit operator VkFence(IntPtr handle) => new VkFence(handle);

        public static bool operator ==(VkFence left, VkFence right) => left.Handle == right.Handle;
        public static bool operator !=(VkFence left, VkFence right) => left.Handle != right.Handle;
        public static bool operator ==(VkFence left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkFence left, IntPtr right) => left.Handle != right;

        public bool Equals(VkFence other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkFence handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkDeviceMemory : IEquatable<VkDeviceMemory>
    {
        public readonly IntPtr Handle;

        public VkDeviceMemory(IntPtr existingHandle) => Handle = existingHandle;

        public static VkDeviceMemory Null => new VkDeviceMemory(IntPtr.Zero);

        public static implicit operator VkDeviceMemory(IntPtr handle) => new VkDeviceMemory(handle);

        public static bool operator ==(VkDeviceMemory left, VkDeviceMemory right) => left.Handle == right.Handle;
        public static bool operator !=(VkDeviceMemory left, VkDeviceMemory right) => left.Handle != right.Handle;
        public static bool operator ==(VkDeviceMemory left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkDeviceMemory left, IntPtr right) => left.Handle != right;

        public bool Equals(VkDeviceMemory other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkDeviceMemory handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkEvent : IEquatable<VkEvent>
    {
        public readonly IntPtr Handle;

        public VkEvent(IntPtr existingHandle) => Handle = existingHandle;

        public static VkEvent Null => new VkEvent(IntPtr.Zero);

        public static implicit operator VkEvent(IntPtr handle) => new VkEvent(handle);

        public static bool operator ==(VkEvent left, VkEvent right) => left.Handle == right.Handle;
        public static bool operator !=(VkEvent left, VkEvent right) => left.Handle != right.Handle;
        public static bool operator ==(VkEvent left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkEvent left, IntPtr right) => left.Handle != right;

        public bool Equals(VkEvent other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkEvent handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkQueryPool : IEquatable<VkQueryPool>
    {
        public readonly IntPtr Handle;

        public VkQueryPool(IntPtr existingHandle) => Handle = existingHandle;

        public static VkQueryPool Null => new VkQueryPool(IntPtr.Zero);

        public static implicit operator VkQueryPool(IntPtr handle) => new VkQueryPool(handle);

        public static bool operator ==(VkQueryPool left, VkQueryPool right) => left.Handle == right.Handle;
        public static bool operator !=(VkQueryPool left, VkQueryPool right) => left.Handle != right.Handle;
        public static bool operator ==(VkQueryPool left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkQueryPool left, IntPtr right) => left.Handle != right;

        public bool Equals(VkQueryPool other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkQueryPool handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkBufferView : IEquatable<VkBufferView>
    {
        public readonly IntPtr Handle;

        public VkBufferView(IntPtr existingHandle) => Handle = existingHandle;

        public static VkBufferView Null => new VkBufferView(IntPtr.Zero);

        public static implicit operator VkBufferView(IntPtr handle) => new VkBufferView(handle);

        public static bool operator ==(VkBufferView left, VkBufferView right) => left.Handle == right.Handle;
        public static bool operator !=(VkBufferView left, VkBufferView right) => left.Handle != right.Handle;
        public static bool operator ==(VkBufferView left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkBufferView left, IntPtr right) => left.Handle != right;

        public bool Equals(VkBufferView other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkBufferView handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkImageView : IEquatable<VkImageView>
    {
        public readonly IntPtr Handle;

        public VkImageView(IntPtr existingHandle) => Handle = existingHandle;

        public static VkImageView Null => new VkImageView(IntPtr.Zero);

        public static implicit operator VkImageView(IntPtr handle) => new VkImageView(handle);

        public static bool operator ==(VkImageView left, VkImageView right) => left.Handle == right.Handle;
        public static bool operator !=(VkImageView left, VkImageView right) => left.Handle != right.Handle;
        public static bool operator ==(VkImageView left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkImageView left, IntPtr right) => left.Handle != right;

        public bool Equals(VkImageView other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkImageView handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkShaderModule : IEquatable<VkShaderModule>
    {
        public readonly IntPtr Handle;

        public VkShaderModule(IntPtr existingHandle) => Handle = existingHandle;

        public static VkShaderModule Null => new VkShaderModule(IntPtr.Zero);

        public static implicit operator VkShaderModule(IntPtr handle) => new VkShaderModule(handle);

        public static bool operator ==(VkShaderModule left, VkShaderModule right) => left.Handle == right.Handle;
        public static bool operator !=(VkShaderModule left, VkShaderModule right) => left.Handle != right.Handle;
        public static bool operator ==(VkShaderModule left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkShaderModule left, IntPtr right) => left.Handle != right;

        public bool Equals(VkShaderModule other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkShaderModule handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkPipelineCache : IEquatable<VkPipelineCache>
    {
        public readonly IntPtr Handle;

        public VkPipelineCache(IntPtr existingHandle) => Handle = existingHandle;

        public static VkPipelineCache Null => new VkPipelineCache(IntPtr.Zero);

        public static implicit operator VkPipelineCache(IntPtr handle) => new VkPipelineCache(handle);

        public static bool operator ==(VkPipelineCache left, VkPipelineCache right) => left.Handle == right.Handle;
        public static bool operator !=(VkPipelineCache left, VkPipelineCache right) => left.Handle != right.Handle;
        public static bool operator ==(VkPipelineCache left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkPipelineCache left, IntPtr right) => left.Handle != right;

        public bool Equals(VkPipelineCache other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkPipelineCache handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkPipelineLayout : IEquatable<VkPipelineLayout>
    {
        public readonly IntPtr Handle;

        public VkPipelineLayout(IntPtr existingHandle) => Handle = existingHandle;

        public static VkPipelineLayout Null => new VkPipelineLayout(IntPtr.Zero);

        public static implicit operator VkPipelineLayout(IntPtr handle) => new VkPipelineLayout(handle);

        public static bool operator ==(VkPipelineLayout left, VkPipelineLayout right) => left.Handle == right.Handle;
        public static bool operator !=(VkPipelineLayout left, VkPipelineLayout right) => left.Handle != right.Handle;
        public static bool operator ==(VkPipelineLayout left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkPipelineLayout left, IntPtr right) => left.Handle != right;

        public bool Equals(VkPipelineLayout other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkPipelineLayout handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkPipeline : IEquatable<VkPipeline>
    {
        public readonly IntPtr Handle;

        public VkPipeline(IntPtr existingHandle) => Handle = existingHandle;

        public static VkPipeline Null => new VkPipeline(IntPtr.Zero);

        public static implicit operator VkPipeline(IntPtr handle) => new VkPipeline(handle);

        public static bool operator ==(VkPipeline left, VkPipeline right) => left.Handle == right.Handle;
        public static bool operator !=(VkPipeline left, VkPipeline right) => left.Handle != right.Handle;
        public static bool operator ==(VkPipeline left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkPipeline left, IntPtr right) => left.Handle != right;

        public bool Equals(VkPipeline other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkPipeline handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkRenderPass : IEquatable<VkRenderPass>
    {
        public readonly IntPtr Handle;

        public VkRenderPass(IntPtr existingHandle) => Handle = existingHandle;

        public static VkRenderPass Null => new VkRenderPass(IntPtr.Zero);

        public static implicit operator VkRenderPass(IntPtr handle) => new VkRenderPass(handle);

        public static bool operator ==(VkRenderPass left, VkRenderPass right) => left.Handle == right.Handle;
        public static bool operator !=(VkRenderPass left, VkRenderPass right) => left.Handle != right.Handle;
        public static bool operator ==(VkRenderPass left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkRenderPass left, IntPtr right) => left.Handle != right;

        public bool Equals(VkRenderPass other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkRenderPass handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkDescriptorSetLayout : IEquatable<VkDescriptorSetLayout>
    {
        public readonly IntPtr Handle;

        public VkDescriptorSetLayout(IntPtr existingHandle) => Handle = existingHandle;

        public static VkDescriptorSetLayout Null => new VkDescriptorSetLayout(IntPtr.Zero);

        public static implicit operator VkDescriptorSetLayout(IntPtr handle) => new VkDescriptorSetLayout(handle);

        public static bool operator ==(VkDescriptorSetLayout left, VkDescriptorSetLayout right) => left.Handle == right.Handle;
        public static bool operator !=(VkDescriptorSetLayout left, VkDescriptorSetLayout right) => left.Handle != right.Handle;
        public static bool operator ==(VkDescriptorSetLayout left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkDescriptorSetLayout left, IntPtr right) => left.Handle != right;

        public bool Equals(VkDescriptorSetLayout other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkDescriptorSetLayout handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkSampler : IEquatable<VkSampler>
    {
        public readonly IntPtr Handle;

        public VkSampler(IntPtr existingHandle) => Handle = existingHandle;

        public static VkSampler Null => new VkSampler(IntPtr.Zero);

        public static implicit operator VkSampler(IntPtr handle) => new VkSampler(handle);

        public static bool operator ==(VkSampler left, VkSampler right) => left.Handle == right.Handle;
        public static bool operator !=(VkSampler left, VkSampler right) => left.Handle != right.Handle;
        public static bool operator ==(VkSampler left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkSampler left, IntPtr right) => left.Handle != right;

        public bool Equals(VkSampler other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkSampler handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkDescriptorSet : IEquatable<VkDescriptorSet>
    {
        public readonly IntPtr Handle;

        public VkDescriptorSet(IntPtr existingHandle) => Handle = existingHandle;

        public static VkDescriptorSet Null => new VkDescriptorSet(IntPtr.Zero);

        public static implicit operator VkDescriptorSet(IntPtr handle) => new VkDescriptorSet(handle);

        public static bool operator ==(VkDescriptorSet left, VkDescriptorSet right) => left.Handle == right.Handle;
        public static bool operator !=(VkDescriptorSet left, VkDescriptorSet right) => left.Handle != right.Handle;
        public static bool operator ==(VkDescriptorSet left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkDescriptorSet left, IntPtr right) => left.Handle != right;

        public bool Equals(VkDescriptorSet other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkDescriptorSet handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkDescriptorPool : IEquatable<VkDescriptorPool>
    {
        public readonly IntPtr Handle;

        public VkDescriptorPool(IntPtr existingHandle) => Handle = existingHandle;

        public static VkDescriptorPool Null => new VkDescriptorPool(IntPtr.Zero);

        public static implicit operator VkDescriptorPool(IntPtr handle) => new VkDescriptorPool(handle);

        public static bool operator ==(VkDescriptorPool left, VkDescriptorPool right) => left.Handle == right.Handle;
        public static bool operator !=(VkDescriptorPool left, VkDescriptorPool right) => left.Handle != right.Handle;
        public static bool operator ==(VkDescriptorPool left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkDescriptorPool left, IntPtr right) => left.Handle != right;

        public bool Equals(VkDescriptorPool other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkDescriptorPool handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkFramebuffer : IEquatable<VkFramebuffer>
    {
        public readonly IntPtr Handle;

        public VkFramebuffer(IntPtr existingHandle) => Handle = existingHandle;

        public static VkFramebuffer Null => new VkFramebuffer(IntPtr.Zero);

        public static implicit operator VkFramebuffer(IntPtr handle) => new VkFramebuffer(handle);

        public static bool operator ==(VkFramebuffer left, VkFramebuffer right) => left.Handle == right.Handle;
        public static bool operator !=(VkFramebuffer left, VkFramebuffer right) => left.Handle != right.Handle;
        public static bool operator ==(VkFramebuffer left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkFramebuffer left, IntPtr right) => left.Handle != right;

        public bool Equals(VkFramebuffer other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkFramebuffer handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkCommandPool : IEquatable<VkCommandPool>
    {
        public readonly IntPtr Handle;

        public VkCommandPool(IntPtr existingHandle) => Handle = existingHandle;

        public static VkCommandPool Null => new VkCommandPool(IntPtr.Zero);

        public static implicit operator VkCommandPool(IntPtr handle) => new VkCommandPool(handle);

        public static bool operator ==(VkCommandPool left, VkCommandPool right) => left.Handle == right.Handle;
        public static bool operator !=(VkCommandPool left, VkCommandPool right) => left.Handle != right.Handle;
        public static bool operator ==(VkCommandPool left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkCommandPool left, IntPtr right) => left.Handle != right;

        public bool Equals(VkCommandPool other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkCommandPool handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkSamplerYcbcrConversion : IEquatable<VkSamplerYcbcrConversion>
    {
        public readonly IntPtr Handle;

        public VkSamplerYcbcrConversion(IntPtr existingHandle) => Handle = existingHandle;

        public static VkSamplerYcbcrConversion Null => new VkSamplerYcbcrConversion(IntPtr.Zero);

        public static implicit operator VkSamplerYcbcrConversion(IntPtr handle) => new VkSamplerYcbcrConversion(handle);

        public static bool operator ==(VkSamplerYcbcrConversion left, VkSamplerYcbcrConversion right) => left.Handle == right.Handle;
        public static bool operator !=(VkSamplerYcbcrConversion left, VkSamplerYcbcrConversion right) => left.Handle != right.Handle;
        public static bool operator ==(VkSamplerYcbcrConversion left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkSamplerYcbcrConversion left, IntPtr right) => left.Handle != right;

        public bool Equals(VkSamplerYcbcrConversion other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkSamplerYcbcrConversion handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkDescriptorUpdateTemplate : IEquatable<VkDescriptorUpdateTemplate>
    {
        public readonly IntPtr Handle;

        public VkDescriptorUpdateTemplate(IntPtr existingHandle) => Handle = existingHandle;

        public static VkDescriptorUpdateTemplate Null => new VkDescriptorUpdateTemplate(IntPtr.Zero);

        public static implicit operator VkDescriptorUpdateTemplate(IntPtr handle) => new VkDescriptorUpdateTemplate(handle);

        public static bool operator ==(VkDescriptorUpdateTemplate left, VkDescriptorUpdateTemplate right) => left.Handle == right.Handle;
        public static bool operator !=(VkDescriptorUpdateTemplate left, VkDescriptorUpdateTemplate right) => left.Handle != right.Handle;
        public static bool operator ==(VkDescriptorUpdateTemplate left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkDescriptorUpdateTemplate left, IntPtr right) => left.Handle != right;

        public bool Equals(VkDescriptorUpdateTemplate other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkDescriptorUpdateTemplate handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkPrivateDataSlot : IEquatable<VkPrivateDataSlot>
    {
        public readonly IntPtr Handle;

        public VkPrivateDataSlot(IntPtr existingHandle) => Handle = existingHandle;

        public static VkPrivateDataSlot Null => new VkPrivateDataSlot(IntPtr.Zero);

        public static implicit operator VkPrivateDataSlot(IntPtr handle) => new VkPrivateDataSlot(handle);

        public static bool operator ==(VkPrivateDataSlot left, VkPrivateDataSlot right) => left.Handle == right.Handle;
        public static bool operator !=(VkPrivateDataSlot left, VkPrivateDataSlot right) => left.Handle != right.Handle;
        public static bool operator ==(VkPrivateDataSlot left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkPrivateDataSlot left, IntPtr right) => left.Handle != right;

        public bool Equals(VkPrivateDataSlot other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkPrivateDataSlot handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkSurfaceKHR : IEquatable<VkSurfaceKHR>
    {
        public readonly IntPtr Handle;

        public VkSurfaceKHR(IntPtr existingHandle) => Handle = existingHandle;

        public static VkSurfaceKHR Null => new VkSurfaceKHR(IntPtr.Zero);

        public static implicit operator VkSurfaceKHR(IntPtr handle) => new VkSurfaceKHR(handle);

        public static bool operator ==(VkSurfaceKHR left, VkSurfaceKHR right) => left.Handle == right.Handle;
        public static bool operator !=(VkSurfaceKHR left, VkSurfaceKHR right) => left.Handle != right.Handle;
        public static bool operator ==(VkSurfaceKHR left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkSurfaceKHR left, IntPtr right) => left.Handle != right;

        public bool Equals(VkSurfaceKHR other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkSurfaceKHR handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkSwapchainKHR : IEquatable<VkSwapchainKHR>
    {
        public readonly IntPtr Handle;

        public VkSwapchainKHR(IntPtr existingHandle) => Handle = existingHandle;

        public static VkSwapchainKHR Null => new VkSwapchainKHR(IntPtr.Zero);

        public static implicit operator VkSwapchainKHR(IntPtr handle) => new VkSwapchainKHR(handle);

        public static bool operator ==(VkSwapchainKHR left, VkSwapchainKHR right) => left.Handle == right.Handle;
        public static bool operator !=(VkSwapchainKHR left, VkSwapchainKHR right) => left.Handle != right.Handle;
        public static bool operator ==(VkSwapchainKHR left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkSwapchainKHR left, IntPtr right) => left.Handle != right;

        public bool Equals(VkSwapchainKHR other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkSwapchainKHR handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkDisplayKHR : IEquatable<VkDisplayKHR>
    {
        public readonly IntPtr Handle;

        public VkDisplayKHR(IntPtr existingHandle) => Handle = existingHandle;

        public static VkDisplayKHR Null => new VkDisplayKHR(IntPtr.Zero);

        public static implicit operator VkDisplayKHR(IntPtr handle) => new VkDisplayKHR(handle);

        public static bool operator ==(VkDisplayKHR left, VkDisplayKHR right) => left.Handle == right.Handle;
        public static bool operator !=(VkDisplayKHR left, VkDisplayKHR right) => left.Handle != right.Handle;
        public static bool operator ==(VkDisplayKHR left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkDisplayKHR left, IntPtr right) => left.Handle != right;

        public bool Equals(VkDisplayKHR other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkDisplayKHR handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkDisplayModeKHR : IEquatable<VkDisplayModeKHR>
    {
        public readonly IntPtr Handle;

        public VkDisplayModeKHR(IntPtr existingHandle) => Handle = existingHandle;

        public static VkDisplayModeKHR Null => new VkDisplayModeKHR(IntPtr.Zero);

        public static implicit operator VkDisplayModeKHR(IntPtr handle) => new VkDisplayModeKHR(handle);

        public static bool operator ==(VkDisplayModeKHR left, VkDisplayModeKHR right) => left.Handle == right.Handle;
        public static bool operator !=(VkDisplayModeKHR left, VkDisplayModeKHR right) => left.Handle != right.Handle;
        public static bool operator ==(VkDisplayModeKHR left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkDisplayModeKHR left, IntPtr right) => left.Handle != right;

        public bool Equals(VkDisplayModeKHR other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkDisplayModeKHR handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkDeferredOperationKHR : IEquatable<VkDeferredOperationKHR>
    {
        public readonly IntPtr Handle;

        public VkDeferredOperationKHR(IntPtr existingHandle) => Handle = existingHandle;

        public static VkDeferredOperationKHR Null => new VkDeferredOperationKHR(IntPtr.Zero);

        public static implicit operator VkDeferredOperationKHR(IntPtr handle) => new VkDeferredOperationKHR(handle);

        public static bool operator ==(VkDeferredOperationKHR left, VkDeferredOperationKHR right) => left.Handle == right.Handle;
        public static bool operator !=(VkDeferredOperationKHR left, VkDeferredOperationKHR right) => left.Handle != right.Handle;
        public static bool operator ==(VkDeferredOperationKHR left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkDeferredOperationKHR left, IntPtr right) => left.Handle != right;

        public bool Equals(VkDeferredOperationKHR other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkDeferredOperationKHR handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkDebugReportCallbackEXT : IEquatable<VkDebugReportCallbackEXT>
    {
        public readonly IntPtr Handle;

        public VkDebugReportCallbackEXT(IntPtr existingHandle) => Handle = existingHandle;

        public static VkDebugReportCallbackEXT Null => new VkDebugReportCallbackEXT(IntPtr.Zero);

        public static implicit operator VkDebugReportCallbackEXT(IntPtr handle) => new VkDebugReportCallbackEXT(handle);

        public static bool operator ==(VkDebugReportCallbackEXT left, VkDebugReportCallbackEXT right) => left.Handle == right.Handle;
        public static bool operator !=(VkDebugReportCallbackEXT left, VkDebugReportCallbackEXT right) => left.Handle != right.Handle;
        public static bool operator ==(VkDebugReportCallbackEXT left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkDebugReportCallbackEXT left, IntPtr right) => left.Handle != right;

        public bool Equals(VkDebugReportCallbackEXT other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkDebugReportCallbackEXT handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkCuModuleNVX : IEquatable<VkCuModuleNVX>
    {
        public readonly IntPtr Handle;

        public VkCuModuleNVX(IntPtr existingHandle) => Handle = existingHandle;

        public static VkCuModuleNVX Null => new VkCuModuleNVX(IntPtr.Zero);

        public static implicit operator VkCuModuleNVX(IntPtr handle) => new VkCuModuleNVX(handle);

        public static bool operator ==(VkCuModuleNVX left, VkCuModuleNVX right) => left.Handle == right.Handle;
        public static bool operator !=(VkCuModuleNVX left, VkCuModuleNVX right) => left.Handle != right.Handle;
        public static bool operator ==(VkCuModuleNVX left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkCuModuleNVX left, IntPtr right) => left.Handle != right;

        public bool Equals(VkCuModuleNVX other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkCuModuleNVX handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkCuFunctionNVX : IEquatable<VkCuFunctionNVX>
    {
        public readonly IntPtr Handle;

        public VkCuFunctionNVX(IntPtr existingHandle) => Handle = existingHandle;

        public static VkCuFunctionNVX Null => new VkCuFunctionNVX(IntPtr.Zero);

        public static implicit operator VkCuFunctionNVX(IntPtr handle) => new VkCuFunctionNVX(handle);

        public static bool operator ==(VkCuFunctionNVX left, VkCuFunctionNVX right) => left.Handle == right.Handle;
        public static bool operator !=(VkCuFunctionNVX left, VkCuFunctionNVX right) => left.Handle != right.Handle;
        public static bool operator ==(VkCuFunctionNVX left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkCuFunctionNVX left, IntPtr right) => left.Handle != right;

        public bool Equals(VkCuFunctionNVX other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkCuFunctionNVX handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkDebugUtilsMessengerEXT : IEquatable<VkDebugUtilsMessengerEXT>
    {
        public readonly IntPtr Handle;

        public VkDebugUtilsMessengerEXT(IntPtr existingHandle) => Handle = existingHandle;

        public static VkDebugUtilsMessengerEXT Null => new VkDebugUtilsMessengerEXT(IntPtr.Zero);

        public static implicit operator VkDebugUtilsMessengerEXT(IntPtr handle) => new VkDebugUtilsMessengerEXT(handle);

        public static bool operator ==(VkDebugUtilsMessengerEXT left, VkDebugUtilsMessengerEXT right) => left.Handle == right.Handle;
        public static bool operator !=(VkDebugUtilsMessengerEXT left, VkDebugUtilsMessengerEXT right) => left.Handle != right.Handle;
        public static bool operator ==(VkDebugUtilsMessengerEXT left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkDebugUtilsMessengerEXT left, IntPtr right) => left.Handle != right;

        public bool Equals(VkDebugUtilsMessengerEXT other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkDebugUtilsMessengerEXT handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkValidationCacheEXT : IEquatable<VkValidationCacheEXT>
    {
        public readonly IntPtr Handle;

        public VkValidationCacheEXT(IntPtr existingHandle) => Handle = existingHandle;

        public static VkValidationCacheEXT Null => new VkValidationCacheEXT(IntPtr.Zero);

        public static implicit operator VkValidationCacheEXT(IntPtr handle) => new VkValidationCacheEXT(handle);

        public static bool operator ==(VkValidationCacheEXT left, VkValidationCacheEXT right) => left.Handle == right.Handle;
        public static bool operator !=(VkValidationCacheEXT left, VkValidationCacheEXT right) => left.Handle != right.Handle;
        public static bool operator ==(VkValidationCacheEXT left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkValidationCacheEXT left, IntPtr right) => left.Handle != right;

        public bool Equals(VkValidationCacheEXT other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkValidationCacheEXT handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkAccelerationStructureNV : IEquatable<VkAccelerationStructureNV>
    {
        public readonly IntPtr Handle;

        public VkAccelerationStructureNV(IntPtr existingHandle) => Handle = existingHandle;

        public static VkAccelerationStructureNV Null => new VkAccelerationStructureNV(IntPtr.Zero);

        public static implicit operator VkAccelerationStructureNV(IntPtr handle) => new VkAccelerationStructureNV(handle);

        public static bool operator ==(VkAccelerationStructureNV left, VkAccelerationStructureNV right) => left.Handle == right.Handle;
        public static bool operator !=(VkAccelerationStructureNV left, VkAccelerationStructureNV right) => left.Handle != right.Handle;
        public static bool operator ==(VkAccelerationStructureNV left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkAccelerationStructureNV left, IntPtr right) => left.Handle != right;

        public bool Equals(VkAccelerationStructureNV other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkAccelerationStructureNV handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkPerformanceConfigurationINTEL : IEquatable<VkPerformanceConfigurationINTEL>
    {
        public readonly IntPtr Handle;

        public VkPerformanceConfigurationINTEL(IntPtr existingHandle) => Handle = existingHandle;

        public static VkPerformanceConfigurationINTEL Null => new VkPerformanceConfigurationINTEL(IntPtr.Zero);

        public static implicit operator VkPerformanceConfigurationINTEL(IntPtr handle) => new VkPerformanceConfigurationINTEL(handle);

        public static bool operator ==(VkPerformanceConfigurationINTEL left, VkPerformanceConfigurationINTEL right) => left.Handle == right.Handle;
        public static bool operator !=(VkPerformanceConfigurationINTEL left, VkPerformanceConfigurationINTEL right) => left.Handle != right.Handle;
        public static bool operator ==(VkPerformanceConfigurationINTEL left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkPerformanceConfigurationINTEL left, IntPtr right) => left.Handle != right;

        public bool Equals(VkPerformanceConfigurationINTEL other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkPerformanceConfigurationINTEL handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkIndirectCommandsLayoutNV : IEquatable<VkIndirectCommandsLayoutNV>
    {
        public readonly IntPtr Handle;

        public VkIndirectCommandsLayoutNV(IntPtr existingHandle) => Handle = existingHandle;

        public static VkIndirectCommandsLayoutNV Null => new VkIndirectCommandsLayoutNV(IntPtr.Zero);

        public static implicit operator VkIndirectCommandsLayoutNV(IntPtr handle) => new VkIndirectCommandsLayoutNV(handle);

        public static bool operator ==(VkIndirectCommandsLayoutNV left, VkIndirectCommandsLayoutNV right) => left.Handle == right.Handle;
        public static bool operator !=(VkIndirectCommandsLayoutNV left, VkIndirectCommandsLayoutNV right) => left.Handle != right.Handle;
        public static bool operator ==(VkIndirectCommandsLayoutNV left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkIndirectCommandsLayoutNV left, IntPtr right) => left.Handle != right;

        public bool Equals(VkIndirectCommandsLayoutNV other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkIndirectCommandsLayoutNV handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkRemoteAddressNV : IEquatable<VkRemoteAddressNV>
    {
        public readonly IntPtr Handle;

        public VkRemoteAddressNV(IntPtr existingHandle) => Handle = existingHandle;

        public static VkRemoteAddressNV Null => new VkRemoteAddressNV(IntPtr.Zero);

        public static implicit operator VkRemoteAddressNV(IntPtr handle) => new VkRemoteAddressNV(handle);

        public static bool operator ==(VkRemoteAddressNV left, VkRemoteAddressNV right) => left.Handle == right.Handle;
        public static bool operator !=(VkRemoteAddressNV left, VkRemoteAddressNV right) => left.Handle != right.Handle;
        public static bool operator ==(VkRemoteAddressNV left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkRemoteAddressNV left, IntPtr right) => left.Handle != right;

        public bool Equals(VkRemoteAddressNV other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkRemoteAddressNV handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

    public readonly partial struct VkAccelerationStructureKHR : IEquatable<VkAccelerationStructureKHR>
    {
        public readonly IntPtr Handle;

        public VkAccelerationStructureKHR(IntPtr existingHandle) => Handle = existingHandle;

        public static VkAccelerationStructureKHR Null => new VkAccelerationStructureKHR(IntPtr.Zero);

        public static implicit operator VkAccelerationStructureKHR(IntPtr handle) => new VkAccelerationStructureKHR(handle);

        public static bool operator ==(VkAccelerationStructureKHR left, VkAccelerationStructureKHR right) => left.Handle == right.Handle;
        public static bool operator !=(VkAccelerationStructureKHR left, VkAccelerationStructureKHR right) => left.Handle != right.Handle;
        public static bool operator ==(VkAccelerationStructureKHR left, IntPtr right) => left.Handle == right;
        public static bool operator !=(VkAccelerationStructureKHR left, IntPtr right) => left.Handle != right;

        public bool Equals(VkAccelerationStructureKHR other) => Handle == other.Handle;

        public override bool Equals(object obj) => obj is VkAccelerationStructureKHR handle && Equals(handle);

        public override int GetHashCode() => Handle.GetHashCode();
    }

}
